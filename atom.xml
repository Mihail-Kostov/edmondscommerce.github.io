<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-09T19:04:45+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Blocks with Liquid or Twig Tags using Octopress]]></title>
    <link href="http://edmondscommerce.github.io/octopress/code-blocks-with-liquid-or-twig-tags-using-octopress.html"/>
    <updated>2013-12-09T18:57:42+00:00</updated>
    <id>http://edmondscommerce.github.io/octopress/code-blocks-with-liquid-or-twig-tags-using-octopress</id>
    <content type="html"><![CDATA[<p>Here is a quicky I figured out when posting my previous story that included a snippet of Twig code.</p>

<p>If you put Twig code into codeblocks, it doesn&rsquo;t work, instead of regarding anything inside the code block as escaped code, it tries to parse it.</p>

<p>The solution is simply to wrap your code in a raw tag like this:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% codeblock %}
</span><span class='line'>{% raw %}
</span><span class='line'>   // your code here
</span><span class='line'>{% end[REMOVE_THIS_BIT]raw %}
</span><span class='line'>{% endcodeblock %}</span></code></pre></td></tr></table></div></figure>


<p>In fact I had to do that to get this post to work as well</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony2 Twig  'DateTime could not be converted to string']]></title>
    <link href="http://edmondscommerce.github.io/symfony2/symfony2-twig-datetime-could-not-be-converted-to-string.html"/>
    <updated>2013-12-09T18:43:03+00:00</updated>
    <id>http://edmondscommerce.github.io/symfony2/symfony2-twig-datetime-could-not-be-converted-to-string</id>
    <content type="html"><![CDATA[<p>I just hit an interesting issue with a nice and easy solution once you understand what is going on.
On a current project I making heavy use of the <a href="https://github.com/sensiolabs/SensioGeneratorBundle">SensioGeneratorBundle</a> to generate CRUD etc. So far its working really nicely.</p>

<p>However I started to see an issue with one of my entities that Twig was not handling a DateTime column properly but others were being handled fine.</p>

<p>Looking through the Twig template I noticed this:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html+jinja'><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="cp">{%</span>- <span class="k">for</span> <span class="nv">field</span><span class="o">,</span> <span class="nv">metadata</span> <span class="k">in</span> <span class="nv">fields</span> <span class="cp">%}</span>
</span><span class='line'>            <span class="cp">{%</span>- <span class="k">if</span> <span class="nb">loop</span><span class="nv">.first</span> <span class="k">and</span> <span class="o">(</span><span class="s1">&#39;show&#39;</span> <span class="k">in</span> <span class="nv">actions</span><span class="o">)</span> <span class="cp">%}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;td&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="s2">&quot;{{ path(&#39;&quot;</span> <span class="o">~</span> <span class="nv">route_name_prefix</span> <span class="o">~</span> <span class="s2">&quot;_show&#39;, { &#39;id&#39;: entity.id }) }}&quot;</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="nt">&gt;</span><span class="cp">{{</span> <span class="s1">&#39;{{ entity.&#39;</span> <span class="o">~</span> <span class="nv">field</span><span class="o">|</span><span class="nf">replace</span><span class="o">({</span><span class="s1">&#39;_&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">})</span> <span class="o">~</span> <span class="s1">&#39; }}&#39;</span> <span class="cp">}}</span><span class="nt">&lt;/a&gt;&lt;/td&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="cp">{%</span>- <span class="k">elseif</span> <span class="nv">metadata.type</span> <span class="k">in</span> <span class="o">[</span><span class="s1">&#39;date&#39;</span><span class="o">,</span> <span class="s1">&#39;datetime&#39;</span><span class="o">]</span> <span class="cp">%}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">{{</span> <span class="s1">&#39;{% if entity.&#39;</span> <span class="o">~</span> <span class="nv">field</span><span class="o">|</span><span class="nf">replace</span><span class="o">({</span><span class="s1">&#39;_&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">})</span> <span class="o">~</span> <span class="s1">&#39; %}{{ entity.&#39;</span> <span class="o">~</span> <span class="nv">field</span><span class="o">|</span><span class="nf">replace</span><span class="o">({</span><span class="s1">&#39;_&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">})</span> <span class="o">~</span> <span class="s1">&#39;|date(\&#39;Y-m-d H:i:s\&#39;) }}{% endif %}&#39;</span> <span class="cp">}}</span><span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this means is that the first entity will never have the DateTime handling. Of course you probably don&rsquo;t want a DateTime to be the first entity so I think this is reasonable.</p>

<p>To fix this, all you need to do is make sure that your Doctrine class does not declare the first property as a DateTime.</p>

<p>If you have a primary key or unique reference property then try to get this as the first declared property in your Doctrine entity class and then rebuild the CRUD and the problem goes away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browsers Currently Supported By Google]]></title>
    <link href="http://edmondscommerce.github.io/browsers/browsers-currently-supported-by-google.html"/>
    <updated>2013-12-06T18:49:19+00:00</updated>
    <id>http://edmondscommerce.github.io/browsers/browsers-currently-supported-by-google</id>
    <content type="html"><![CDATA[<p>Google Apps, such as Gmail, Calendar, Docs etc lean heavily on Javascript to create fluid web applications. Naturally this requires up to date browsers to take advantage of functionality and technologies.</p>

<p>Google&rsquo;s policy on browser support is quite strict, especially where Internet Explorer is concerned. <strong>For Chrome only the latest version is supported because of its auto-update policy. Internet Explorer, Firefox and Safari are supported in the most recent, and previous version.</strong> The third most recent browser is no longer supported as soon as a new one is released. No official support is offered for Opera.</p>

<p>This is particularly strict for Internet Explorer, since its versioning is vastly different from that of Chrome and Firefox, with the latter incrementing the version for much smaller changes, and being more frequent. Another effect is that ruling out what is currently IE9 rules out both Windows XP and Windows Vista &ndash; both OSs currently supported by Microsoft.</p>

<p>Naturally this doesn&rsquo;t mean that the products won&rsquo;t work, anjd in many cases they were developed before support was dropped for specific versions. In some cases however it does enforce a more simplistic UI, such as redirecting very old browsers to a Basic HTML view for Gmail</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapping a List in Quotes in PHPStorm]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html"/>
    <updated>2013-12-06T11:35:58+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm</id>
    <content type="html"><![CDATA[<p>Some times you might find your self with a list of values you want to copy and paste from somewhere into your PHP code as an array of strings.</p>

<p>For example, take this list of carrier names that I need to use:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Blue Package, USPS, UPS, UPSMI, FedEx, DHL, DHL Global Mail, Fastway, UPS Mail Innovations, Lasership, Royal Mail, FedEx SmartPost, OSM, OnTrac, Streamlite, Newgistics, Canada Post, City Link, GLS, GO!, Hermes Logistik Gruppe, Parcelforce, TNT, Target, SagawaExpress, NipponExpress, YamatoTransport, Other</span></code></pre></td></tr></table></div></figure>


<p>I really don&rsquo;t fancy wrapping each element of this list with quotes one by one, there must be a better way!</p>

<p>There is, you can use the regex replace functionality of PHPStorm to do this for you quickly and easily.</p>

<p>First of all paste the string into your PHPStorm editor and highlight it. Then hit <code>[ctrl]+[r]</code> to start your find and replace.</p>

<p>The &ldquo;In Selection&rdquo; tick box should be ticked already, you also need to tick the regex box.</p>

<p>Then in the find section, use this regex:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>( |)([^,]+),</span></code></pre></td></tr></table></div></figure>


<p>And in your replace box, put this:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\n'$2',</span></code></pre></td></tr></table></div></figure>


<p>This gets you nearly all the way there, you might just need to tidy up a bit you should now have something looking like this:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'Blue Package',
</span><span class='line'>'USPS',
</span><span class='line'>'UPS',
</span><span class='line'>'UPSMI',
</span><span class='line'>'FedEx',
</span><span class='line'>'DHL',
</span><span class='line'>'DHL Global Mail',
</span><span class='line'>'Fastway',
</span><span class='line'>'UPS Mail Innovations',
</span><span class='line'>'Lasership',
</span><span class='line'>'Royal Mail',
</span><span class='line'>'FedEx SmartPost',
</span><span class='line'>'OSM',
</span><span class='line'>'OnTrac',
</span><span class='line'>'Streamlite',
</span><span class='line'>'Newgistics',
</span><span class='line'>'Canada Post',
</span><span class='line'>'City Link',
</span><span class='line'>'GLS',
</span><span class='line'>'GO!',
</span><span class='line'>'Hermes Logistik Gruppe',
</span><span class='line'>'Parcelforce',
</span><span class='line'>'TNT',
</span><span class='line'>'Target',
</span><span class='line'>'SagawaExpress',
</span><span class='line'>'NipponExpress',
</span><span class='line'>'YamatoTransport', Other</span></code></pre></td></tr></table></div></figure>


<p>The <code>Other</code> on the end has not been converted has it doesn&rsquo;t have a trailing comma. You could mess about with yoru regex trying to get this to also be converted, or you could say good enough and move on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merging Forks for Composer]]></title>
    <link href="http://edmondscommerce.github.io/composer/merging-forks-for-composer.html"/>
    <updated>2013-12-05T19:53:16+00:00</updated>
    <id>http://edmondscommerce.github.io/composer/merging-forks-for-composer</id>
    <content type="html"><![CDATA[<p>I am really enjoying using Composer with a Symfony2 project that I am currently working on.</p>

<p>Recently though I found an issue where I am using the FOSRest Bundle to provide JSON API functionality. This in turn uses the
JMS/SerializerBundle to handle the actual encoding into JSON.</p>

<p>The problem is that the JMS bundle converts camelCase to snake_case and I decided I really didn&rsquo;t want that. I want my property and entity names to be the same across formats.</p>

<p>A bit of digging and I found <a href="https://github.com/passkey1510/JMSSerializerBundle">this fork</a> which features a fix for exactly this problem, brilliant!</p>

<p>However on trying to get this to install with Composer I simply could not get it to work. Further investigation shows that the version of the JMS bundle that this fork does not meet
the minimum version requirements of the FOSRest bundle. Problem.</p>

<p>The solution in the end was to fork the JMSSerializerBundle Directly then pull this down locally. Once I had that locally I then added the fork with the fix I need as another remote:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add passkey1510 git@github.com:passkey1510/JMSSerializerBundle.git
</span><span class='line'>git merge remote/passkey1510/master
</span><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>Those three commands added the other fork as another remote allowing me to pull in the commits that feature the fix I need. Finally I pushed this back up to github.</p>

<p>I can now reference my fork in my composer.json file like this:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"repositories": [
</span><span class='line'>        {
</span><span class='line'>            "url": "https://github.com/edmondscommerce/JMSSerializerBundle.git",
</span><span class='line'>            "type": "vcs"
</span><span class='line'>        },
</span><span class='line'>],</span></code></pre></td></tr></table></div></figure>


<p>Now running a <code>composer update --dev</code> and composer successfully brought in my fork of the Serializerbundle with the extra fixes to allow the property names to stay in camelCase.</p>

<p>And that is it, problem solved :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The First Thing You Should Read on SEO]]></title>
    <link href="http://edmondscommerce.github.io/SEO/the-first-thing-you-should-read-on-seo.html"/>
    <updated>2013-12-05T12:16:17+00:00</updated>
    <id>http://edmondscommerce.github.io/SEO/the-first-thing-you-should-read-on-seo</id>
    <content type="html"><![CDATA[<p>There is so much information about SEO out there and so many things that used
to be true but are no longer that it really has become a bit of a minefield.</p>

<p>For the average web master who simply wants to rank reasonably well and make sure that they are doign all of the basic things required to do so then this is the document you should read.</p>

<p>It is written by the company that are almost synonymous with the word search engine. In fact their company name has now become a verb meaning &lsquo;to use a search engine&rsquo;. It is of course Google.</p>

<p>You can read the official google SEO guidelines <a href="http://static.googleusercontent.com/media/www.google.co.uk/en/uk/webmasters/docs/search-engine-optimization-starter-guide.pdf">here</a></p>

<p>It is not a huge document and should be well within the technical understanding of the average webmaster.</p>

<p>I suggest you read it today!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress auto building the site locally for one blog post]]></title>
    <link href="http://edmondscommerce.github.io/Octoress/octopress-auto-building-the-site-locally-for-one-blog-post.html"/>
    <updated>2013-12-03T17:47:30+00:00</updated>
    <id>http://edmondscommerce.github.io/Octoress/octopress-auto-building-the-site-locally-for-one-blog-post</id>
    <content type="html"><![CDATA[<p>Setting up a blog post using Octopress involves writing up your Markdown content, building the site, and previewing it.</p>

<p>This can be time-consuming when writing posts, having to run several commands repeatedly. Here&rsquo;s a few lines you can put into a bash script and run once each time:</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">PATHTOLATEST</span><span class="o">=</span><span class="sb">`</span>ls -t <span class="nb">source</span>/_posts | head -1<span class="sb">`</span>;
</span><span class='line'><span class="nb">echo</span> <span class="nv">$PATHTOLATEST</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake isolate<span class="o">[</span><span class="nv">$PATHTOLATEST</span><span class="o">]</span>;
</span><span class='line'>bundle <span class="nb">exec </span>rake generate;
</span><span class='line'>bundle <span class="nb">exec </span>rake preview;
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The PATHTOLATEST variable finds the latest post</li>
<li>echo the variable for debugging purposes</li>
<li>rake isolate instructs octopress to build the site with only the latest blog post</li>
<li>rake generate builds the site</li>
<li>rake preview initialises the web server</li>
</ol>


<p>From then you can make changes to your post, and the site will be automatically regenerated. This uses a file watcher so it&rsquo;s helpful to keep the terminal open to watch for it building, or having errors</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting Results Arbitrarily in MySQL]]></title>
    <link href="http://edmondscommerce.github.io/mysql/sorting-results-arbitrarily-in-mysql.html"/>
    <updated>2013-12-03T12:40:04+00:00</updated>
    <id>http://edmondscommerce.github.io/mysql/sorting-results-arbitrarily-in-mysql</id>
    <content type="html"><![CDATA[<p>When you have a result set in MySQL that you need to order in a specific way you might think that it is not possible and instead you are going to have to read all
of your results into your application domain (eg PHP) and manage the sorting from there. On a large results set that could be seriously inefficient.</p>

<p>The truth is that you don&rsquo;t have to do that. You can specify any kind of sort order including sorting by string values as you see fit.</p>

<p>The way to do this is to use the magic of <a href="http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_find-in-set">FIND_IN_SET</a> combined with ORDER BY.</p>

<p>For a full example see this query that is pulling out product images from a data repository in descending image size as described in one of the columns as a string.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">dcl</span><span class="p">.</span><span class="n">prodID</span><span class="p">,</span>
</span><span class='line'>  <span class="n">dcl</span><span class="p">.</span><span class="n">contentGuid</span><span class="p">,</span>
</span><span class='line'>  <span class="n">dc</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
</span><span class='line'>  <span class="n">dcmv</span><span class="p">.</span><span class="n">metaValueName</span> <span class="k">AS</span> <span class="n">resolution</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">cds_DigContent</span> <span class="n">dc</span>
</span><span class='line'>  <span class="k">JOIN</span> <span class="n">cds_DigContent_Links</span> <span class="n">dcl</span>
</span><span class='line'>    <span class="k">ON</span> <span class="p">(</span><span class="n">dc</span><span class="p">.</span><span class="n">contentGuid</span> <span class="o">=</span> <span class="n">dcl</span><span class="p">.</span><span class="n">contentGuid</span><span class="p">)</span>
</span><span class='line'>  <span class="k">JOIN</span> <span class="n">cds_DigContent_Meta</span> <span class="n">dcm</span>
</span><span class='line'>    <span class="k">ON</span> <span class="p">(</span><span class="n">dcm</span><span class="p">.</span><span class="n">contentGuid</span> <span class="o">=</span> <span class="n">dc</span><span class="p">.</span><span class="n">contentGuid</span>
</span><span class='line'>        <span class="k">AND</span> <span class="n">dcm</span><span class="p">.</span><span class="n">metaAtrId</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="k">JOIN</span> <span class="n">cds_DigContent_Meta_ValVoc</span> <span class="n">dcmv</span>
</span><span class='line'>    <span class="k">ON</span> <span class="p">(</span><span class="n">dcmv</span><span class="p">.</span><span class="n">metaValueId</span> <span class="o">=</span> <span class="n">dcm</span><span class="p">.</span><span class="n">metaValueId</span><span class="p">)</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">dc</span><span class="p">.</span><span class="n">mediaTypeId</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>      <span class="k">AND</span> <span class="n">dcl</span><span class="p">.</span><span class="n">prodId</span> <span class="o">=</span> <span class="s1">&#39;{$this-&gt;getCnetProdID()}&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>  <span class="nf">FIND_IN_SET</span><span class="p">(</span><span class="n">dcmv</span><span class="p">.</span><span class="n">metaValueName</span><span class="p">,</span> <span class="s1">&#39;2400 x 1800,1200 x 900,1024 x 768,800 x 600,640 x 480,400 x 300,200 x 150,75 x 75&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faker Symfony2 Integration]]></title>
    <link href="http://edmondscommerce.github.io/symfony2/faker-symfony2-integration.html"/>
    <updated>2013-12-02T20:43:49+00:00</updated>
    <id>http://edmondscommerce.github.io/symfony2/faker-symfony2-integration</id>
    <content type="html"><![CDATA[<p>Generating test data is a crucial part of properly testing your code. If you have to hard code your test data or fixtures then you might be tempted to use only a small number of test entities.</p>

<p>To help with this you can use the brilliant <a href="https://github.com/fzaninotto/Faker">Faker</a> library to generate your test data. The Faker library is designed purely to generate test data and has a range of providers for all kinds of data.</p>

<p>As if that wasn&rsquo;t good enough, you can leverage all the power of this library in your Symfony2 development by simply installing this Symfony2 bundle, <a href="https://github.com/willdurand/BazingaFakerBundle/blob/master/Resources/doc/index.md">BazingaFakerBundle</a>.</p>

<p>Installation is a breeze with Composer and then simply reference your entities in the configuration and run the command</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/console faker:populate</span></code></pre></td></tr></table></div></figure>


<p>To generate your entities programmatically rather than as a command line action (perhaps as part of a unit or functional test) you can use this code:</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">//Faker load test data</span>
</span><span class='line'><span class="nv">$populator</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getContainer</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;faker.populator&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$insertedPks</span> <span class="o">=</span> <span class="nv">$populator</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$insertedPks</span> <span class="k">as</span> <span class="nv">$class</span> <span class="o">=&gt;</span> <span class="nv">$pks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$reflClass</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\ReflectionClass</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$shortClassName</span> <span class="o">=</span> <span class="nv">$reflClass</span><span class="o">-&gt;</span><span class="na">getShortName</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Faker: Inserted %s new %s objects</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$pks</span><span class="p">),</span> <span class="nv">$shortClassName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trigger Basic Auth Popup in Chrome]]></title>
    <link href="http://edmondscommerce.github.io/chrome/trigger-basic-auth-popup-in-chrome.html"/>
    <updated>2013-12-02T19:32:58+00:00</updated>
    <id>http://edmondscommerce.github.io/chrome/trigger-basic-auth-popup-in-chrome</id>
    <content type="html"><![CDATA[<p>In Chrome, if you have already authenticated with a site using Basic Authentiation (a Web Server level authentication) then you will have probably realised that once you are authenticated, Chrome does not continuously prompt you for the details, and that is a good thing.
However, in a scenario where perhaps you want to authenticate as a different user or otherwise re enter the details then it can be tricky to figure out how to do this.</p>

<p>The answer is simple enough, you can retrigger this prompt by putting your username@ the url and the pop up will be shown again.</p>

<p>To be clear:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://www.somedomain.com</span></code></pre></td></tr></table></div></figure>


<p>becomes:</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://username@www.somedomain.com</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symonfy2 PHPStorm Project Setup]]></title>
    <link href="http://edmondscommerce.github.io/Symonfy2/symonfy2-phpstorm-project-setup.html"/>
    <updated>2013-12-02T19:01:51+00:00</updated>
    <id>http://edmondscommerce.github.io/Symonfy2/symonfy2-phpstorm-project-setup</id>
    <content type="html"><![CDATA[<p>I was going to write a nice summary of how to set up PHPStorm with a Symfony2 project.
There are a few things to be aware of such as getting the right code style set up so that your code follows the Symonfy2 coding standards.</p>

<p>As it happens though a quick google found that there is already an excellent summary <a href="http://www.kevwebdev.com/blog/setting-up-a-symfony2-project-in-phpstorm.html">here</a> which I suggest you have a read of.</p>

<p>The only thing I would add to this are that you should probably install these PHPStorm plugins to get the best out of it:</p>

<p><a href="http://plugins.jetbrains.com/plugin?pr=&amp;pluginId=7219">Symfony2</a></p>

<p>and <a href="http://plugins.jetbrains.com/plugin/7320">PHP Annotations</a></p>

<p>If you do all of this then you should have a really nice PHPStorm set up for working on your Symfony2 projects, enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Syntax Highlighting for Vim]]></title>
    <link href="http://edmondscommerce.github.io/vim/octopress-syntax-highlighting-for-vim.html"/>
    <updated>2013-11-29T13:53:12+00:00</updated>
    <id>http://edmondscommerce.github.io/vim/octopress-syntax-highlighting-for-vim</id>
    <content type="html"><![CDATA[<p>Still learning some of the various things that can be done with Octopress and
came across this Octopress syntax highlighting package that makes it even nicer
to write blog posts (such as this one) using Vim.</p>

<p>You can see the package <a href="https://github.com/tangledhelix/vim-octopress">here</a>.</p>

<p>If you have already installed the SPF13 Vim then you are already running the required bundles
and can simply run</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.vim/bundle
</span><span class='line'>git clone https://github.com/tangledhelix/vim-octopress.git octopress
</span></code></pre></td></tr></table></div></figure>


<p>It isn&rsquo;t a groundbreaking improvement but it is worth throwing in there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Syntax Highlighting with PHPStorm]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/ruby/ruby-syntax-highlighting-with-phpstorm.html"/>
    <updated>2013-11-28T10:30:12+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/ruby/ruby-syntax-highlighting-with-phpstorm</id>
    <content type="html"><![CDATA[<p>PHPStorm is my IDE of choice for PHP development of course and also as many other languages as I can get it to support. One of my favourite plugins for PHPStorm is BASH Support which makes it into a fully featured BASH IDE with function support and syntax highlighting and some code inspections.</p>

<p>As we are now moving to Octopress for blogging functionality I wanted a way to get Ruby syntax highlighting. There is a full blown IntelliJ based Ruby IDE but that is overkill for my needs. I had a look at Netbeans however it has now stopped supporting Ruby though there is a community supported plugin apparently.</p>

<p>My best IDE solution so far is simply Vim, perhaps the <a href="http://vim.spf13.com/">spf13 flavour</a>.</p>

<p>After a bit of Googling good old Stack Overflow came through for me with <a href="http://stackoverflow.com/questions/16451359/is-it-possible-to-get-ruby-syntax-highlighting-in-phpstorm">this post</a> that explains how to leverage PHPStorm&rsquo;s TextMate bundle support to get Ruby syntax highlighting. This works a treat though on my colour scheme (a slightly modified Darcula) it was unreadable. The final thing to do is to change the settings under Settings > TextMate Bundles and in the grid at the bottom next to my theme I switched the TextMate colour scheme from Mac Classic to RailsCasts and now it looks good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a Fedora 19 based PHP Development Installation]]></title>
    <link href="http://edmondscommerce.github.io/fedora/setting-up-a-fedora-19-based-php-development-installation.html"/>
    <updated>2013-10-31T10:25:52+00:00</updated>
    <id>http://edmondscommerce.github.io/fedora/setting-up-a-fedora-19-based-php-development-installation</id>
    <content type="html"><![CDATA[<p>I have decided to switch from Debian/Ubuntu/Mint which has served me very well over the last few years and move towards more of a RedHat based distribution as it seems that servers these days are more commonly CentOS or RedHat based and I always like to keep my development environment as close as I can to the server environment for all kinds of reason.</p>

<p>Also, I have decided that I really quite like Gnome Shell and it makes sense to pick a distribution that is properly bundled with Gnome Shell rather than bolting it into a distro after installation.</p>

<h3>1. Install Apache and PHP 5.5</h3>


<p>You need to become root first, stay as root for the rest of the steps.</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>su
</span><span class='line'>rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm
</span><span class='line'>rpm -Uvh http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm
</span><span class='line'>rpm -Uvh http://rpms.famillecollet.com/remi-release-19.rpm
</span><span class='line'>yum --enablerepo<span class="o">=</span>remi install httpd php php-common
</span><span class='line'>yum --enablerepo<span class="o">=</span>remi install php-pecl-apc php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongo php-sqlite php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml
</span></code></pre></td></tr></table></div></figure>




<h3>2. Set that to start up automatically (you are going to be developing none stop right?)</h3>




<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service httpd start
</span><span class='line'>systemctl <span class="nb">enable </span>httpd.service
</span></code></pre></td></tr></table></div></figure>




<h3>3. Create a test PHP file to confirm thats all working</h3>


<p>Extra bit here, install <a href="http://vim.spf13.com/" target="_blank">this version of Vim</a>, its quite tasty:</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://j.mp/spf13-vim3 -L -o - | sh
</span></code></pre></td></tr></table></div></figure>


<p>Now create your PHP file:</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim /var/www/html/test.php
</span></code></pre></td></tr></table></div></figure>


<p>May as well just throw a phpinfo() in there</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">phpinfo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now check it: <a href="http://localhost/test.php"><a href="http://localhost/test.php">http://localhost/test.php</a></a></p>

<h3>4. Finally lets get a MySQL version installed. Lets choose MariaDB</h3>


<p>I tried Percona but it does not have a proper Fedora version. Then I discovered that Fedora have adopted MariaDB which is fine by me, lets go with the flow:</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install mariadb mariadb-server
</span><span class='line'>systemctl start mysqld.service
</span><span class='line'>systemctl <span class="nb">enable </span>mysqld.service
</span><span class='line'>/usr/bin/mysql_secure_installation
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it, next up is getting Java and PhpStorm installed and also phpMyAdmin</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically convert old PHP file to camelCase ]]></title>
    <link href="http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase.html"/>
    <updated>2013-10-17T10:53:15+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been working with an old project that uses a combination of different coding styles.</p>

<p>One of the more trivial annoyances with this is that the variables used through the project are a combination of $camelCase and $snake_case which throws of the coding standards tools that I use.</p>

<p>To get round this I have put a little script together that will convert $snake_case to $camelCase automatically.</p>

<p>Obviously, you will need to check the results of this to make sure that there are not variables that should not be changed, but it has saved me a lot of time doing this manually.</p>

<p>I&rsquo;ve added this to my .bash_allias file, though it could easily be turned into a standalone script if required</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'></h3></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Fix legacy code</span>
</span><span class='line'> cammelCase<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   vim -E -s <span class="nv">$@</span> <span class="s">&lt;&lt;-EOF</span>
</span><span class='line'><span class="s">   :%s#\%($\%(\k\+\)\)\@&lt;=_\(\k\)#\u\1#g</span>
</span><span class='line'><span class="s">   :update</span>
</span><span class='line'><span class="s">   :quit</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Locking Up, Always When you are Ready to Save? Solution]]></title>
    <link href="http://edmondscommerce.github.io/linux/vim-locking-up-always-when-you-are-ready-to-save-solution.html"/>
    <updated>2013-10-04T10:33:41+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/vim-locking-up-always-when-you-are-ready-to-save-solution</id>
    <content type="html"><![CDATA[<p>If you are constantly frustated by Vim freezing up on you are editing a file on a server then this is quite possibly your problem, and your solution.</p>

<p>The issue is that most text editors and IDEs have [ctrl]+[s] mapped to save. If you do a lot of file editing then you probably bash the [ctrl]+[s] combo all the time, without even thinking about it&hellip;</p>

<p>Now back to Vim. As it is running in the terminal then it can be frozen by using the [ctrl]+[s] combination. You probably weren&rsquo;t aware of that feature.</p>

<p>To bring things back to life, just hit the [ctrl]+[q] combo. There are ways to permanently disable this which you can try.</p>

<p>For full information on this, check out this great <a href="http://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal" target="_blank">stack exchange page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento 1.8 released]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-1-8-released.html"/>
    <updated>2013-09-30T10:01:28+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-1-8-released</id>
    <content type="html"><![CDATA[<p>Today I got a notification through that Magento 1.8 had finally been released.</p>

<p>This has been in beta since alpha since April, and contains server fixes that a lot of people have been waiting for.</p>

<p>The most important one for UK vendors is that the rounding issue in tax calculations has been fixed.</p>

<p>There are also improvements to caching and database performance. The full release notes can be seen <a href="http://www.magentocommerce.com/knowledge-base/entry/ce-18-later-release-notes">here</a></p>

<p>These are issues that have affected merchants since that change in the VAT rate, so we would recommend upgrading for everyone at this time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Great Way to Simplify Git Merges]]></title>
    <link href="http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges.html"/>
    <updated>2013-09-26T17:34:04+01:00</updated>
    <id>http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges</id>
    <content type="html"><![CDATA[<p>If you are struggling with a git merge with a long list of failed merge files then this little trick might be helpful.</p>

<p>The standard approach is to go file by file and use git mergetool to open the files in a tool like Meld and then manually manage the differences. In many cases though you know exactly which version you want and this is simply a laborious process that doesn&rsquo;t really require human input.</p>

<p>The solution to this is deceptively simple. All you need to do is to check out the file from the branch you want to keep the version of. If you have an entire directory where you know that the branch (for example master) has the correct version then you can check out that entire directory.</p>

<p>You might find that sensible use of this technique can save you lots of time and really make the mergetool the one you use for the files where you really do need to merge.</p>

<p>Thanks to <a href="http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git?answertab=active#tab-top">this StackOverflow answer</a> for simplifying this for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[During git pull: error: RPC failed; result=56, HTTP code = 200 [x] KiB/s       fatal: The remote end hung up unexpectedly]]></title>
    <link href="http://edmondscommerce.github.io/git/during-git-pull-error-rpc-failed-result56-http-code-200-x-kibs-fatal-the-remote-end-hung-up-unexpectedly.html"/>
    <updated>2013-09-16T15:07:54+01:00</updated>
    <id>http://edmondscommerce.github.io/git/during-git-pull-error-rpc-failed-result56-http-code-200-x-kibs-fatal-the-remote-end-hung-up-unexpectedly</id>
    <content type="html"><![CDATA[<p>If you receive this series of errors during a git pull (after the Receiving Objects stage):</p>

<figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>$ git pull
</span><span class='line'>Password for 'https://xxxxxxxxxx@bitbucket.org': 
</span><span class='line'>remote: Counting objects: 1011, done.
</span><span class='line'>remote: Compressing objects: 100% (394/394), done.
</span><span class='line'>error: RPC failed; result=56, HTTP code = 200 51 KiB/s      
</span><span class='line'>fatal: The remote end hung up unexpectedly
</span><span class='line'>fatal: early EOF
</span><span class='line'>fatal: index-pack failed
</span></code></pre></td></tr></table></div></figure>


<p>a quick solution is to use ssh to pull rather than the https protocol</p>

<p>Hope this helps</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is User Experience & Why Bother?]]></title>
    <link href="http://edmondscommerce.github.io/web%20design/what-is-user-experience-why-bother.html"/>
    <updated>2013-09-02T07:50:51+01:00</updated>
    <id>http://edmondscommerce.github.io/web%20design/what-is-user-experience-why-bother</id>
    <content type="html"><![CDATA[<p>If you are running an E-Commerce store then you&rsquo;ve probably received various offers to improve the online shopping experience, optimize conversion rate and so on. All these offers are a part of a user experience. For example &ndash; if you receive an offer to improve your online store&rsquo;s shopping experience then most likely the service provider will go thorough the sales funnel, get some valuable input by <a href="http://www.edmondscommerce.co.uk/conversion-rate-optimization/using-advanced-analytics-to-improve-conversion-rates/" title="Using Advanced Analytics to Improve Conversion Rates" target="_blank">setting up and analysing your website metrics</a>, conduct a user survey by online forms and ask directly to the customers via email or even give them a private call.
All of the above is necessary to really understand how your users (customers) interact with your site, how:</p>

<ul>
    <li>valuable</li>

    <li>findable</li>

    <li>usable</li>

    <li>desirable</li>

    <li>accessible</li>

    <li>credible</li>
</ul>


<p>they found your site or offer to be. As for those who need a definition &ndash; <a href="http://en.wikipedia.org/wiki/User_experience" title="User Experience - Wikipedia" target="_blank">here&rsquo;s what wikipedia says about user experience</a> &ndash; <em>User experience (UX) involves a person&rsquo;s emotions about using a particular product, system or service. User experience highlights the experiential, affective, meaningful and valuable aspects of human-computer interaction and product ownership. Additionally, it includes a person’s perceptions of the practical aspects such as utility, ease of use and efficiency of the system. User experience is subjective in nature because it is about individual perception and thought with respect to the system. User experience is dynamic as it is constantly modified over time due to changing circumstances and new innovations.</em></p>

<h2>So, what elements the user experience should contain?</h2>


<p><img src="http://edmondscommerce.github.io/assets/UserExperience.png"></p>

<h3>Valuable</h3>


<p>The solution must deliver measurable value for site owners or interested group. It can be conversions, leads, subscriptions, etc.</p>

<h3>Findable</h3>


<p>Make it easy to find what your target audience is looking for, not only by optimizing search engines but focusing on internal navigation</p>

<h3>Usable</h3>


<p>Ease of use is extremely important; it must be intuitive and fluid. You need to create a funnel that leads your audience to your goal effectively</p>

<h3>Desirable</h3>


<p>Your target audience must have a strong desire to use your solution whether it’s for content, experience or emotions</p>

<h3>Accessible</h3>


<p>The solution must be easily accessible for your target audience – whether it’s technological requirements or people with disabilities</p>

<h3>Credible</h3>


<p>Your solution must be credible by all means. It has to build trust in your particular target audience by including important credibility factors</p>

<h2>What’s In It For You?</h2>


<p>The benefits are pretty obvious. In this stage we help you to identify your market and learn about your target audience behavior and needs as much as possible. These real world insights are extremely valuable and perform a key role in a project life-cycle. In short – careful planning allows you to focus on most beneficial features first and drive more revenue with minimum effort.</p>

<h2>Why Plan?</h2>


<p>When embarking on a project to launch or relaunch an e-commerce web site it can seem like a daunting and overwhelming prospect. The danger is that without <a href="http://www.edmondscommerce.co.uk/web-project-management/guidelines-of-effective-web-project-workflow/" title="Guidelines of Effective Web Project Management" target="_blank">proper planning and project management</a>, the final outcome can be much less effective and efficient than if proper planning and preliminary research is used to define clear goals and then ensure these are met</p>

<h2>Why Work With Us?</h2>


<p>Edmonds Commerce is specifically focused on E-Commerce projects. We have experienced and professional team of certified Magento and Zend developers, User Experience, Design and Strategy experts. We tend to become partners and build a lasting business relationship which is proven by our long term clients of some of most promising UK’s e-commerce stores and businesses all over the Europe.</p>

<h2>What’s Next?</h2>


<p>We are happy to hear more about your upcoming or existing e-commerce project. Please get in touch with us and explain your vision, goals, requirements and deadlines. Discover how we can help you.</p>
]]></content>
  </entry>
  
</feed>
