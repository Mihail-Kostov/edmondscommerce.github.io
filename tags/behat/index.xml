<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behat on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/behat/</link>
    <description>Recent content in Behat on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 May 2017 11:03:35 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/behat/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Behat and Behaviour Driven Development</title>
      <link>https://edmondscommerce.github.io/introduction-to-behat-and-behaviour-driven-development/</link>
      <pubDate>Thu, 11 May 2017 11:03:35 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/introduction-to-behat-and-behaviour-driven-development/</guid>
      <description>

&lt;h2 id=&#34;origins-of-bdd-behaviour-driven-development&#34;&gt;Origins of BDD (Behaviour Driven Development)&lt;/h2&gt;

&lt;p&gt;This derives from TDD (Test Driven Development) which is very similar but focuses more on unit tests and smaller parts of the software whereas BDD will be used to work on the bigger processes you might expect to have in the software you are developing. BDD also concentrates on how the software should actually behave.
Before the software is actually built you would first need to define how the end user would actually use the software once it is complete, it could be as simple as working out how a user would log in.&lt;/p&gt;

&lt;h2 id=&#34;3-amigos&#34;&gt;3 Amigos&lt;/h2&gt;

&lt;p&gt;This form of testing makes it so all parties involved in development will be able to communicate a lot more as it makes it easier for everyone involved to understand as they wouldn&amp;rsquo;t need to know PHP etc. which will allow them to work closer together. Whenever software is being designed and created there should be 3 parties involved. This will consist of customer, developer and tester this is also known as the 3 amigos.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Customer &amp;gt; Developer &amp;gt; Tester&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;user-stories&#34;&gt;User stories&lt;/h2&gt;

&lt;p&gt;A user story is defined by wikipedia as &amp;ldquo;an informal, natural language description of one or more features of a software system.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The user stories would need to cover what the software would ultimately need and be expected to do. This is something which a user  would be able to do on their own but usually all the 3 amigos help to offer different views. You will see an example of this further down which we have referred to as &amp;ldquo;feature&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;gherkin&#34;&gt;Gherkin&lt;/h2&gt;

&lt;p&gt;Before we dive into talking about user stories and scenarios, We should discuss Gherkin which is the language that Behat understands. This language allows you to describe the behaviour of the software you are working with, without having to go into too much detail on how things would be implemented and developed.&lt;/p&gt;

&lt;h2 id=&#34;scenarios&#34;&gt;Scenarios&lt;/h2&gt;

&lt;p&gt;Scenarios are used to define what the software will need to do and how the user/customer will actually use it. This will need to be in quite a bit of depth to cover all bases. An example of this would be how a user/customer would log into the software if it is required.&lt;/p&gt;

&lt;p&gt;Before actually going away and writing your own scenarios we will first need to cover how they would actually be structured and what they should look like.&lt;/p&gt;

&lt;p&gt;Below you will see a template of how you would usually find them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt; 
    &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;As a [Role]&lt;/span&gt;       
    &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;I need to [Feature]&lt;/span&gt;
    &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;In order to [Benefit]&lt;/span&gt;

&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Scenario&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt; 
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Given [Context]&lt;/span&gt;
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;When [Event]&lt;/span&gt;
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;And [Additional Event]&lt;/span&gt;
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Then [Outcome]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you should have an idea of how scenarios should be structured and what should be included in everyone you create. It is now time to look at how we would write a scenario for a simple log in process which we mentioned earlier.&lt;/p&gt;

&lt;p&gt;Here is a real world example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;A user needs to access the system&lt;/span&gt; 
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;In order to access the system&lt;/span&gt; 
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;As a user&lt;/span&gt; 
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;I need to be able to log in&lt;/span&gt; 

&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Scenario&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;The user can log in&lt;/span&gt; 
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Given I am on the login page&lt;/span&gt;
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;When I fill in the following&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;p p-Indicator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; UserName  | admin        |	&lt;/span&gt;     
         &lt;span class=&#34;no&#34;&gt;| Password   | password  |&lt;/span&gt;
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;And I follow &amp;quot;Log In&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Then I should see &amp;quot;Sign Out&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above example is just one of many different ways you would test your software. The reason we would need to go into such depth is to cover all bases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What happens if everything is fine I.e login/password&lt;/li&gt;
&lt;li&gt;What happens if email is incorrect? Will they be prompted with a forgot password icon or any form of indication it is incorrect?&lt;/li&gt;
&lt;li&gt;The ability to create an account if one is needed&lt;/li&gt;
&lt;li&gt;What happens after 3 failed login attempts i.e captcha/ lock out?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By adding in the above you will cover a lot more of the issues a user might face when attempting to log in. This will have a positive impact on the software as this will decrease the amount of issues you could face.&lt;/p&gt;

&lt;h2 id=&#34;acceptance-testing-your-project-with-behat-mink-and-selenium&#34;&gt;Acceptance testing your project with Behat, Mink and Selenium&lt;/h2&gt;

&lt;h3 id=&#34;what-is-acceptance-testing&#34;&gt;What is acceptance testing?&lt;/h3&gt;

&lt;p&gt;According to Wikipedia, acceptance testing is a test, conducted to determine if requirements of specification are met. This type of testing comes along with another abbreviation seen in programming called BDD (Behaviour Driven Development).&lt;/p&gt;

&lt;h3 id=&#34;what-is-mink&#34;&gt;What is Mink?&lt;/h3&gt;

&lt;p&gt;Mink is a library which unifies different browser emulators and removes API differences between those emulators. It provides us of easy ways to control the browser, traverse pages, manipulate page elements or interact with them.&lt;/p&gt;

&lt;h3 id=&#34;what-is-selenium&#34;&gt;What is Selenium?&lt;/h3&gt;

&lt;p&gt;Selenium helps in automation of browsers, primarily for testing purposes. Selenium has the support of some of the largest browser vendors, who also making Selenium the native part of their browser.&lt;/p&gt;

&lt;h2 id=&#34;edmonds-commerce-behat-framework&#34;&gt;Edmonds Commerce Behat Framework&lt;/h2&gt;

&lt;p&gt;Developers in Edmonds Commerce have been fans of Behat since February 15th, 2015. This was the first time Edmonds deployed and shared with the world Behat context class for filling form fields with data from Faker class which generates random fake data. Since that time Edmonds Commerce as of today holds 12 context classes for various acceptance testing steps. 4 of the classes are specific to Magento, Magento 2, Prestashop and Prototype JS, rest of the classes can be applied to any project.&lt;/p&gt;

&lt;h3 id=&#34;what-is-feature-context&#34;&gt;What is Feature Context?&lt;/h3&gt;

&lt;p&gt;According to Behat documentation Feature Context class is plain simple PHP object used by Behat to represent how your application should be tested and that it behaves the way you want. So firstly you write your scenarios, followed by implementation of steps (which is parsed by Behat using annotations) in your Feature Class to test against expected behaviour.&lt;/p&gt;

&lt;p&gt;Let’s give you a brief look of general context classes created by Edmonds Commerce.&lt;/p&gt;

&lt;h3 id=&#34;behat-mouse-context&#34;&gt;Behat-mouse-context&lt;/h3&gt;

&lt;p&gt;This context class gives aids us when testing events triggered by mouse. Such as hovering, right clicking, double clicking elements on the page. Actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-mouse-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;behat-javascript-context&#34;&gt;Behat-javascript-context&lt;/h3&gt;

&lt;p&gt;This context class gives us a chance to test against popup windows, alert boxes, ajax calls etc&amp;hellip;
Actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-javascript-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;behat-html-context&#34;&gt;Behat-html-context&lt;/h3&gt;

&lt;p&gt;This context class implements various HTML manipulation steps. Actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-html-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;behat-faker-context&#34;&gt;Behat-faker-context&lt;/h3&gt;

&lt;p&gt;This context class enables us to automate finding of HTML form element in the page and filling it with fake data. Actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-faker-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;behat-error-handling-context&#34;&gt;Behat-error-handling-context&lt;/h3&gt;

&lt;p&gt;This context class allows us to handle simple errors and take screenshots when they occur. Actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-error-handling-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;behat-chrome-performance-context&#34;&gt;Behat-chrome-performance-context&lt;/h3&gt;

&lt;p&gt;This context class allows us to monitor chrome performance, check for broken links and check total size of downloaded files per request. The actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-chrome-performance-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;behat-error-detection-context&#34;&gt;Behat-error-detection-context&lt;/h3&gt;

&lt;p&gt;This context class allows you to detect errors from the web browser including PHP exception messages. The actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-error-detection-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;behat-screenshot-context&#34;&gt;Behat-screenshot-context&lt;/h3&gt;

&lt;p&gt;This context class allows you to take screenshot when triggering the &amp;ldquo;I take screenshot&amp;rdquo; step. The actual code can be cloned from &lt;a href=&#34;https://github.com/edmondscommerce/behat-screenshot-context&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;These tools like Behat, Mink, Selenium mirrors Cross-functional team paradigm. Separately these tools, doesn’t have many powers. However when they are combined together they can be called “Acceptance testing on steroids”.&lt;/p&gt;

&lt;p&gt;Behat is fun to work with and enables things to be tested properly with a chance to read and understand scenarios even for non-technical person, as it is basically simple english sentences.&lt;/p&gt;

&lt;p&gt;And for developers, we hate repetition, therefore we can write reusable context classes which can be shared with the world!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repeating Behat Scenarios when Testing Magento with SmartStep</title>
      <link>https://edmondscommerce.github.io/behat/repeating-behat-scenarios-when-testing-magento-with-smartstep.html</link>
      <pubDate>Wed, 15 Apr 2015 12:02:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/behat/repeating-behat-scenarios-when-testing-magento-with-smartstep.html</guid>
      <description>

&lt;p&gt;When behat testing Magento I found myself repeating the same Homepage &amp;gt; Category &amp;gt; Product &amp;gt; Add-to-cart &amp;gt; Cart page scenario for a variety of tests - checking that a category page has products; checking that items are added to the cart; testing the checkout itself etc etc.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to copy-paste the whole procedure because if I changed, say the &lt;code&gt;.product-list&lt;/code&gt; class, I&amp;rsquo;d have to update each of the Scenarios. Bit of a kick in the face to &lt;a href=&#34;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The standard Behat way is to create a method in the Context class which performs the add-to-cart procedure under the Step &lt;code&gt;Given I have added to cart&lt;/code&gt; or similar, but this defeats the object of using Gherkin to write the tests.&lt;/p&gt;

&lt;p&gt;Fortunately KnpLabs have soled this problem with &lt;a href=&#34;https://github.com/KnpLabs/FriendlyContexts/blob/master/doc/feature-smartStep.md&#34; target=&#34;_blank&#34;&gt;SmartSteps&lt;/a&gt;. This allows you to create a Scanerio that you want to be repeatable by tagging it as a &lt;code&gt;@smartStep&lt;/code&gt;. Once it&amp;rsquo;s tagged, you can easily embed that scenario into a new one by having a step &lt;code&gt;Given [scenario name]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-smartsteps-to-your-behat-tests&#34;&gt;Adding SmartSteps to your behat tests&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;composer.json&lt;/code&gt;, add a new dependency
&lt;code&gt;
&amp;quot;knplabs/friendly-contexts&amp;quot;: &amp;quot;dev-master&amp;quot;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;behat.yml&lt;/code&gt;
```
default:
extensions:
    Knp\FriendlyContexts\Extension:
        smartTag: smartStep&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- Tag your scenario

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@smartStep
  Scenario: I arrive on the site and add a product to cart
    When I am on &amp;ldquo;/&amp;rdquo;
    Then I follow &amp;ldquo;My category&amp;rdquo;
    Then I follow &amp;ldquo;My product&amp;rdquo;
    Then I press &amp;ldquo;Add to Cart&amp;rdquo;
    And I should see &amp;ldquo;was added to your shopping cart&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- And then use the Scenario in any other scenarios with
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given I arrive on the site and add a product to cart
```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Behat</title>
      <link>https://edmondscommerce.github.io/behat/behat.html</link>
      <pubDate>Wed, 01 Apr 2015 12:04:12 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/behat/behat.html</guid>
      <description>&lt;p&gt;I love Behat. One of the great things about it is that it has been built to be very extensible, so if it doesn&amp;rsquo;t do exactly what you need then it&amp;rsquo;s really quite easy to to customise the way it works without having to do any hacking on the core code. This is because it makes extensive use of an Observer Pattern like Hooks system.&lt;/p&gt;

&lt;p&gt;If you want to have your Behat tests fail as soon as a scenario fails - ideal when you are running a large suite of tests and trying to fix issues - then simply add in this method into a Context class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;   &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    /** @AfterScenario */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function dieOnFailedScenario(Behat\Behat\Hook\Scope\AfterScenarioScope $scope)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (99 === $scope-&amp;gt;getTestResult()-&amp;gt;getResultCode()) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            if (isset($_SERVER[&amp;#39;BEHAT_DIE_ON_FAILURE&amp;#39;])) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                die(&amp;quot;\n\nBEHAT_DIE_ON_FAILURE is defined\n\nKilling Full Process\n\n\n\n&amp;quot;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            } else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                echo &amp;quot;\n\nTo die on failure, please run:\nexport BEHAT_DIE_ON_FAILURE=true;\n\n&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then in your terminal, simply export BEHAT_DIE_ON_FAILURE=true and then the next time you run your tests, the process will die and you can go and fix the problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easily Setup and Run Selenium for your Behat Tests</title>
      <link>https://edmondscommerce.github.io/behat/easily-setup-and-run-selenium-for-your-behat-tests.html</link>
      <pubDate>Thu, 12 Feb 2015 14:01:24 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/behat/easily-setup-and-run-selenium-for-your-behat-tests.html</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve decided on sticking with Selenium to run our Behat based testing as it allows us to do proper browser testing and it&amp;rsquo;s also actually quite nice to be able to watch the tests as they progress and easily spot anything that might be wrong.&lt;/p&gt;

&lt;p&gt;Getting Selenium running and ensuring everyone is using the same version is another challenge.&lt;/p&gt;

&lt;p&gt;To make that easier, and also to allow us to easily update as we go, we have now released a Composer package so that it can easily be added to project dependencies.&lt;/p&gt;

&lt;p&gt;For full details, we suggest you head over to the Repo and read the information there as that will be kept up to date.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/edmondscommerce/selenium-server&#34; target=&#34;_blank&#34;&gt;https://github.com/edmondscommerce/selenium-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find this on Packagist here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://packagist.org/packages/edmondscommerce/selenium-server&#34; target=&#34;_blank&#34;&gt;https://packagist.org/packages/edmondscommerce/selenium-server&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>