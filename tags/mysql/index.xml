<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/mysql/</link>
    <description>Recent content in Mysql on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Apr 2017 17:17:06 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploring Streets Of York and Participation in First Ever PHP Yorkshire conference</title>
      <link>https://edmondscommerce.github.io/exploring-streets-of-york-and-participation-in-first-ever-php-yorkshire-conference/</link>
      <pubDate>Mon, 10 Apr 2017 17:17:06 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/exploring-streets-of-york-and-participation-in-first-ever-php-yorkshire-conference/</guid>
      <description>

&lt;p&gt;When something unbelievable happens, people tend to say “you were in the right place at the right time” that’s why you’re lucky. That is how I feel what happened to me here at Edmonds Commerce Ltd.&lt;/p&gt;

&lt;p&gt;Within first few weeks since I started working on Magento projects here at Edmonds. Nolwenn came to me with a question. “Hey Tadas, development team is going to this conference ‘PHP Yorkshire’, they don’t know what to expect, but it will be fun, will you join them?”&lt;/p&gt;

&lt;p&gt;And then in my head I am like “Wow, my first weeks and I got this promising opportunity to spend the weekend knowing my colleagues better and listen to these passionate people who loves PHP”. Who could decline such offer? So off we go.&lt;/p&gt;

&lt;p&gt;Sunny Friday evening, we are all set and heading to the city of York, which distanced just a bit more than hour from our office in Shipley. Few rounds of everyone&amp;rsquo;s preferred music requests and here we are, passing the door to explore York after we have left our belongings in the place we stayed overnight.&lt;/p&gt;

&lt;h2 id=&#34;the-night-in-york-or-how-to-know-the-city-centre-within-3-pubs&#34;&gt;The night in York or how to know the city centre within 3 pubs&lt;/h2&gt;

&lt;p&gt;I am not into architecture, but York looked very appealing to me and it was my first time visiting it, definitely not last. I didn’t see any building there which would look out of sync. And the buzz of people on the Friday night was more on the calm side, just the way I like. But let’s move onto the fun stuff. So our first stop was just meters away from the place we stayed where we order some beer and appreciated the moment and the beginning of night.&lt;/p&gt;

&lt;p&gt;Then another bar/pub and another. Everyone know how it goes, don’t we? The heading of this part might be too cheesy, you definitely can’t cover all the beauty of York within the distance of 3 pubs, but yeah&amp;hellip; York is great and the beer is great too!&lt;/p&gt;

&lt;h2 id=&#34;the-big-day&#34;&gt;The Big Day&lt;/h2&gt;

&lt;p&gt;So here we are, little bit tired from the night before, but we stood tall in the morning, ready to enjoy our day. I was amazed to be honest, that we were just right on time to begin our conference in the University of York.&lt;/p&gt;

&lt;p&gt;So what was this all conference about? 1 day, 2 tracks, 13 experts. So after all, everyone was satisfied with how it ended.&lt;/p&gt;

&lt;p&gt;To be honest I enjoyed all of the talks I have participated in but the most memorable to me was about HTML5 API’s, naming things and object calisthenics.&lt;/p&gt;

&lt;p&gt;While my colleagues loved the speeches on GIT internals, handling errors gracefully, and they got answered what MySQL 8 is all about and why it is 8 and not any other number and Joseph have even won a MySQL dolphin.&lt;/p&gt;

&lt;p&gt;All in all, the weekend was enjoyable, I am glad I had a chance to be there, know my colleagues better and just be inspired by the talks and the community of PHP.&lt;/p&gt;

&lt;p&gt;- Tadas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phpstorm and Mysql Scratch Files</title>
      <link>https://edmondscommerce.github.io/phpstorm-and-mysql-scratch-files/</link>
      <pubDate>Fri, 20 Jan 2017 12:39:15 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/phpstorm-and-mysql-scratch-files/</guid>
      <description>

&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;Recently I have been writing a number of internal scripts that interface with one of our databases to check a few things.
A lot of the time we use PhpMyAdmin or the standard Mysql command line client where necessary but there is a better
and more reliable way to fire queries to the database.&lt;/p&gt;

&lt;p&gt;Enter PHP Storm.&lt;/p&gt;

&lt;h3 id=&#34;php-storm-and-mysql&#34;&gt;PHP Storm and MySQL&lt;/h3&gt;

&lt;p&gt;PHPStorm has been extended so much over the years that it can be used for fully fledged raw SQL on it&amp;rsquo;s own which can be very handy.
To start off, look in to adding your database source (we use MySql but any data source supported will work too).&lt;/p&gt;

&lt;p&gt;You can also use an SSH tunnel for your remote projects!&lt;/p&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://confluence.jetbrains.com/display/PhpStorm/Databases+and+SQL+Editor+in+PhpStorm#DatabasesandSQLEditorinPhpStorm-Settingupadatabaseconnection&#34;&gt;
Data source Guide
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have your data source set up and configured, you are now ready to start firing queries, open a new scratch file and choose &lt;code&gt;mysql&lt;/code&gt; or which ever data source type you are currently using.
You will now have full auto completion and error highlighting out of the box and a bunch of other useful features.&lt;/p&gt;

&lt;h3 id=&#34;selective-statement-execution&#34;&gt;Selective Statement Execution&lt;/h3&gt;

&lt;p&gt;One useful feature besides the code completion is the ability to only execute certain parts of large SQL statements with inner statements so to ensure the expected results are returned.
See the screen shots for an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://edmondscommerce.github.io/images/phpstorm-mysql-editor.png&#34; alt=&#34;PHP Storm Mysql Editor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When selecting the code block, hit &lt;code&gt;CTRL+Enter&lt;/code&gt; or the shortcut for completion in your settings and you can then cycle through which parts of the query to run with the arrow keys.
As you cycle different parts of the query will have the green border to indicate this.&lt;/p&gt;

&lt;p&gt;This feature was tested in PHP Storm 2017.1 (EAP) but should be present in 2016.*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mysql Password Expiry - How to Resolve and Then Disable</title>
      <link>https://edmondscommerce.github.io/mysql-password-expiry---how-to-resolve-and-then-disable/</link>
      <pubDate>Mon, 16 Jan 2017 14:17:19 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/mysql-password-expiry---how-to-resolve-and-then-disable/</guid>
      <description>&lt;p&gt;I recently had the issue that the root user for a MySQL installation had their password expire.&lt;/p&gt;

&lt;p&gt;Apparently this is a fairly new MySQL feature which is designed to improve security and assist with meeting PCI-DSS requirements. However for this development box, it is not really necessary so I would prefer to disable.&lt;/p&gt;

&lt;p&gt;The issue became apparent when trying to log into phpmyadmin and seeing the error message: &amp;ldquo;#1862 - Your password has expired. To log in you must change it using a client that supports expired passwords.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;On the command line the confusing thing is that you can log in, only when you run a query such as &lt;code&gt;show databases;&lt;/code&gt; do you then get the error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show databases;
ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So to fix this, firstly you can just reset your password back to the same one you were already using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set password = password(&#39;mySecretPass&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then to disable this you can use this query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alter user &#39;root&#39;@&#39;localhost&#39; password expire never;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using Mysql Dump to Create Fixtures with Where Conditions</title>
      <link>https://edmondscommerce.github.io/using-mysql-dump-to-create-fixtures-with-where-conditions/</link>
      <pubDate>Thu, 29 Sep 2016 11:04:50 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/using-mysql-dump-to-create-fixtures-with-where-conditions/</guid>
      <description>&lt;p&gt;When running unit tests it is generally advisable to have a test database that has a limited but known set of data.&lt;/p&gt;

&lt;p&gt;The idea is that before each test run, the test database is recreated. So that this process is not too slow we then tend to use a small subset of the real live database - perhaps 100 records or entities rather than however many are on the live site.&lt;/p&gt;

&lt;p&gt;In order to build this test database, we then use something call fixtures. This can be all kinds of things - some times the fixtures are created using PHP code. For absolute speed though, I prefer to use fixtures that are raw SQL files that can be very quickly loaded into a database.&lt;/p&gt;

&lt;p&gt;To create the fixtures, the very simplest way is to use &lt;code&gt;mysqldump&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, the issue with mysql dump in the way we normally use it is that it will dump an entire database - the opposite of what we are trying to achieve here.&lt;/p&gt;

&lt;p&gt;The trick here is to use the &lt;code&gt;--where&lt;/code&gt; option to mysqldump to limit the data that is actually dumped.&lt;/p&gt;

&lt;p&gt;Lets take a simple database with an &lt;code&gt;orders&lt;/code&gt;, &lt;code&gt;orders_products&lt;/code&gt; and an &lt;code&gt;orders_status_history table&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;First we will dump the orders into an SQL file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump database_name  orders --where=&amp;quot;1 order by orders_id desc limit 0,100&amp;quot; --no-create-info &amp;gt; /tmp/orders.sql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to calculate what the lowest order ID would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lowestOrderId=$(mysql -N database_name -e &amp;quot;select min(t.orders_id) from (select orders_id from orders order by orders_id DESC limit 0,100) as t&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can run mysqldump on the other tables and dump their data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump database_name  orders_products --where=&amp;quot;orders_id &amp;gt; $lowestOrderId&amp;quot; --no-create-info &amp;gt;&amp;gt; /tmp/orders.sql


mysqldump database_name  orders_status_history --where=&amp;quot;orders_id &amp;gt; $lowestOrderId&amp;quot; --no-create-info &amp;gt;&amp;gt; /tmp/orders.sql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And thats it, you now have an orders.sql file with the data for your 100 most recent orders in a format that can easily be imported into a test database simple with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
mysql test_db_name &amp;lt; orders.sql

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Doctrine Create New Entity From Legacy Database Shell Script</title>
      <link>https://edmondscommerce.github.io/doctrine-create-new-entity-from-legacy-database-shell-script/</link>
      <pubDate>Thu, 18 Aug 2016 17:09:53 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/doctrine-create-new-entity-from-legacy-database-shell-script/</guid>
      <description>&lt;p&gt;Here is a nice little script I have just written to help me with migration of a legacy application onto a Symfony based architecture, including Doctrine for entities.&lt;/p&gt;

&lt;p&gt;In this scenario I have created a new database and am importing tables across from the legacy database as I bring them into the application.&lt;/p&gt;

&lt;p&gt;The process is a little tricky and unfortunately I figured it out, then went on holiday and came back having totally forgotten how to do it. So I wrote a nice script to document and automate the process for me.&lt;/p&gt;

&lt;p&gt;Here is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt; dirname &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BASH_SOURCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[0]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -u
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o pipefail
&lt;span class=&#34;nv&#34;&gt;standardIFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$IFS&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;$&amp;#39;\n\t&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===========================================&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;hostname&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===========================================&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#Usage&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; &amp;lt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Usage:&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;./&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; [tableToCreateEntityFrom] {bundle - defaults to AppBundle}&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;    &amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; 1
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#Parameters&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;bundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;AppBundle&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;camelCaseEntityName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/(^|_)([a-z])/\U\2/g&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;newDb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NEW_DB_NAME_HERE

&lt;span class=&#34;nv&#34;&gt;oldDb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;OLD_DB_NAME_HERE


mysql &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt; -e &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;

    drop table &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; exists &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    create table &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt; like &lt;span class=&#34;nv&#34;&gt;$oldDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    insert into &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; * from &lt;span class=&#34;nv&#34;&gt;$oldDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt; ORDER BY
    &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;   SELECT COLUMN_NAME
        FROM information_schema.COLUMNS
        WHERE &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TABLE_SCHEMA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$oldDb&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
          AND &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TABLE_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$tableToCreateEntityFrom&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
          AND &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;COLUMN_KEY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;PRI&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; DESC limit 0,500&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;/../bin/console doctrine:mapping:import &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bundle&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; annotation --filter&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;^&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$camelCaseEntityName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\$&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;/../bin/console doctrine:generate:entities &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bundle&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$camelCaseEntityName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; --no-backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The script will take a single parameter which is the table name. If not importing to AppBundle, you can also specify a bundle name.&lt;/p&gt;

&lt;p&gt;It will then create the Upper Camel Case version of the table name (as used by Doctrine).&lt;/p&gt;

&lt;p&gt;Then it runs some SQL which will drop and recreate the table and then import the most recent 500 rows from that table as defined by the primary key.&lt;/p&gt;

&lt;p&gt;Finally, we do a couple of doctrine commands to create the annotation class and then create the getters and setters. Notice the use of regex to prevent bringing in anything other than an exact match on the table name.&lt;/p&gt;

&lt;p&gt;I think this is pretty slick and makes me love Doctrine that little bit more, hope you find it useful too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash Script to Kill Sleeping MySQL Processes</title>
      <link>https://edmondscommerce.github.io/bash/bash-script-to-kill-sleeping-mysql-processes.html</link>
      <pubDate>Mon, 08 Dec 2014 12:52:03 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/bash-script-to-kill-sleeping-mysql-processes.html</guid>
      <description>&lt;p&gt;Pretty much what is says on the tin, if for some reason you have a large amount of sleeping MySQL processes and you want to quickly clear them all out, this little BASH script will do the job.&lt;/p&gt;

&lt;p&gt;I leave it to you to decide how to handle the DBUSER and DBPASS variables&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;
mysql -u &lt;span class=&#34;nv&#34;&gt;$DBUSER&lt;/span&gt; -p&lt;span class=&#34;nv&#34;&gt;$DBPASS&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;select &lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;-- * &lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;id&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;from information_schema.processlist &lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;where command = &amp;#39;Sleep&amp;#39; &lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;and time &amp;gt; 1 &lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;and host =&amp;#39;localhost&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; id&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;kill &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    mysql -u &lt;span class=&#34;nv&#34;&gt;$DBUSER&lt;/span&gt; -p&lt;span class=&#34;nv&#34;&gt;$DBPASS&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;kill &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SELinux and connecting to Mysql databases on Red Hat based distributions</title>
      <link>https://edmondscommerce.github.io/linux/se-linux-and-connecting-to-a-mysql-database.html</link>
      <pubDate>Fri, 07 Nov 2014 10:53:06 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/se-linux-and-connecting-to-a-mysql-database.html</guid>
      <description>&lt;p&gt;SELinux can be restrictive by defult but prevent alot of security issues. One thing we found while trying it is that by default it will block network connections from being made via the httpd daemon. This is an issue if say on a development system you are running php via the apache module.&lt;/p&gt;

&lt;p&gt;To resolve this simply login via root or sudo to root privilige and run the following command:
    setsebool -P httpd_can_network_connect on
You should now be able to connect to connect to your database. This will also enable things like web api, curl calls and other php that requires network access.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL Substring not Returning Anything &#43; Solution</title>
      <link>https://edmondscommerce.github.io/mysql/mysql-substring-not-returning-anything-solution.html</link>
      <pubDate>Tue, 20 Aug 2013 10:54:20 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/mysql/mysql-substring-not-returning-anything-solution.html</guid>
      <description>&lt;p&gt;If you are puzzled why your simple usage of the MySQL SUBSTRING() function is not returning anything this could be your solution.&lt;/p&gt;

&lt;p&gt;The substring function allows you to specify a string (eg a column), the start character and the length. If you are used to languages like PHP then you are probably used to this kind of function regarding 0 as the starting character. In fact this function regards 1 as the starting character. If you specify 0 then you simply won&amp;rsquo;t get any results.&lt;/p&gt;

&lt;p&gt;This does not work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
SELECT SUBSTRING(column, 0, 10) as tenchars

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
SELECT SUBSTRING(column, 1, 10) as tenchars

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Magento Implementation of Jewellery Site (White Label)</title>
      <link>https://edmondscommerce.github.io/featured/magento-implementation-of-jewellery-site-white-label.html</link>
      <pubDate>Wed, 20 Feb 2013 20:19:01 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/featured/magento-implementation-of-jewellery-site-white-label.html</guid>
      <description>&lt;p&gt;As part of our white label service we provided the development and design implementation requirements for a large London agency to deliver a high quality Magento site on budget and time.&lt;/p&gt;

&lt;p&gt;The site required some customised functionality along with a full bespoke design implementation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://edmondscommerce.github.io/images/screenshot-thumb1.png&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Base table or view already exists: 1050 Table ‘*’ already exists&#34; After Deleting Tables</title>
      <link>https://edmondscommerce.github.io/magento/base-table-or-view-already-exists-1050-table-already-exists-after-deleting-tables.html</link>
      <pubDate>Tue, 08 Jan 2013 16:27:02 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/base-table-or-view-already-exists-1050-table-already-exists-after-deleting-tables.html</guid>
      <description>&lt;p&gt;If for example you&amp;rsquo;re removing an extension and want to clear out its information from the database, you&amp;rsquo;ll need to establish the rows and tables it&amp;rsquo;s inserted, as well as some standard Magento table entries.&lt;/p&gt;

&lt;p&gt;So you&amp;rsquo;ve removed everything, cleared your cache and now you go to the homepage to check everything is all good, and boom, PDOException:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Base table or view already exists: 1050 Table ‘*’ already exists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case it was &lt;code&gt;salesrule&lt;/code&gt;, which made me question why it was trying to create the table afresh. The reason I got this is that I&amp;rsquo;d erroneously removed salesrule_setup from core_resource, and therefore Magento was reinstalling the module. Reinstating the row, and clearing my cache solved the issue&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run Multiple MySQL Queries in a Single Function</title>
      <link>https://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function.html</link>
      <pubDate>Wed, 14 Nov 2012 12:45:09 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function.html</guid>
      <description>&lt;p&gt;If you want to be able to run multiple queries in a single function call, for example doing the classic drop table blah; create table blah; then you might like this function.&lt;/p&gt;

&lt;p&gt;The use case is for things like database migration systems which you might copy and paste chunks of SQL including multiple queries from things like phpMyAdmin&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Run multiple queries passed in as a single string&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * This is optimised for copying and pasting from phpMyAdmin&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Handy for things like database migration systems&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @param string $sql  multiple queries terminated with ; and a new line&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;function multiQuery($sql)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $sqls = preg_split(&amp;#39;%;$%m&amp;#39;, trim($sql));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    foreach ($sqls as $q) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (empty($q)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            continue;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        mysql_query($q); //suggest you replace this with your custom query function or if not throw in some extra error checking at least&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Setting up database testing in PHPUnit</title>
      <link>https://edmondscommerce.github.io/php/setting-up-database-testing-in-phpunit.html</link>
      <pubDate>Fri, 09 Nov 2012 17:34:45 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/setting-up-database-testing-in-phpunit.html</guid>
      <description>&lt;p&gt;I have recently been trying to write unit tests for a piece of code that reads and writes to a database.&lt;/p&gt;

&lt;p&gt;As I have spent far too much time trying to get this to work, this is here to act as an &lt;em&gt;aide-mémoire &lt;/em&gt;for the next time that I have to do this.&lt;/p&gt;

&lt;p&gt;This is the actual class that is used&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;require_once&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;__DIR__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/DataPump.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * These are required to ensure that the PDO object in the class is able to work correctly&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @backupGlobals disabled&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @backupStaticAttributes disabled&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DataPumpTest&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PHPUnit_Extensions_Database_TestCase&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This is the object that will be tested&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @var DataPump&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;  &lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * only instantiate pdo once for test clean-up/fixture load&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @var PDO&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pdo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @var type &lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Sets up the fixture, for example, opens a network connection.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This method is called before a test is executed.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DataPump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Tears down the fixture, for example, closes a network connection.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This method is called after a test is executed.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tearDown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;  &lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;  &lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pdo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pdo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PDO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mysql:dbname=testing_database;host=localhost&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dbUserName&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dbPassword&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createDefaultDBConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pdo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ross_testing&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDataSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createMySQLXMLDataSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__DIR__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/datapump.xml&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This is here to ensure that the database is working correctly&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testDataBaseConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;  &lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createDataSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$prod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDataSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$queryTable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createQueryTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;SELECT * FROM products&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$expectedTable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDataSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Here we check that the table in the database matches the data in the XML file&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;assertTablesEqual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$expectedTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$queryTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;nx&#34;&gt; &lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This is where you can put your actual tests&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following steps need to be taken to get everything here to work.&lt;/p&gt;

&lt;p&gt;You need to create the testing database and tables before you can do anything else. This includes the tables that you will be reading from and the tables that you will eventually write to.&lt;/p&gt;

&lt;p&gt;You then need to create an XML file for the data that you are expecting. I suggest checking that the data from the read table is included in this, so you can confirm that you are working with the correct data.&lt;/p&gt;

&lt;p&gt;You can generate the data that is already in the database using the following command
&lt;code&gt;
mysqldump &amp;ndash;xml -t -u username -p testing_database products &amp;gt; datapump.xml
&lt;/code&gt;
Which will give you a file like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;mysqldump&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;database&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;testing_database&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;table_data&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;row&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;field&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;products_id&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;1000001&lt;span class=&#34;nt&#34;&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;field&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;products_quantity&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;31&lt;span class=&#34;nt&#34;&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;field&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;products_model&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;example1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/row&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;row&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;field&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;products_id&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;1000002&lt;span class=&#34;nt&#34;&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;field&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;products_quantity&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;15&lt;span class=&#34;nt&#34;&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;field&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;products_model&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;example2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/row&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/table_data&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/database&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/mysqldump&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two variables in the assertTablesEqual methods are just strings, which means if after you have set everything up and the test is failing, it is possible to export them to check where the differences are.&lt;/p&gt;

&lt;p&gt;The big problem I had was that some export methods escaped ampersands, whilst others did not. Correcting this allowed the test to path.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Percona DB on a clean CentOS </title>
      <link>https://edmondscommerce.github.io/percona/installing-percona-db-on-a-clean-centos.html</link>
      <pubDate>Fri, 09 Nov 2012 15:22:41 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/percona/installing-percona-db-on-a-clean-centos.html</guid>
      <description>&lt;p&gt;Percona is a performance optimised fork of MySQL that has gained a lot of traction in the Magento-sphere as webmasters and sysadmins alike look to squeeze the most performance out of their hardware.&lt;/p&gt;

&lt;p&gt;If you read the &lt;a href=&#34;https://edmondscommerce.github.io/platforms/magento&#34;&gt;Magento&lt;/a&gt; performance whitepaper then you will see they mention Percona DB there.&lt;/p&gt;

&lt;p&gt;To install Percona on a standard CentOS release 6.2 (Final) server you would need to run the following commands:&lt;/p&gt;

&lt;p&gt;First set up the repo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;rpm -Uhv http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should give you output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Retrieving http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm
Preparing...                ########################################### [100%]
   1:percona-release        ########################################### [100%]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then installing should be a simple case of running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;yum install Percona-Server-client-55 Percona-Server-server-55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However I found that this generated the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Error: Percona-XtraDB-Cluster-client conflicts with Percona-Server-client-55

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is because MySQL is already installed and needs to be removed. You can do this with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;yum remove mysql*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At which point running the install should work smoothly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL 5.1 to 5.5 Migration</title>
      <link>https://edmondscommerce.github.io/mysql/mysql-5-1-to-5-5-migration.html</link>
      <pubDate>Tue, 18 Sep 2012 11:09:09 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/mysql/mysql-5-1-to-5-5-migration.html</guid>
      <description>&lt;p&gt;According to pretty much every source there&amp;rsquo;s only one sensible way to migrate from 5.0, 5.1 or 5.2 to 5.5 of mysql (or mariadb/percona for that matter), and it&amp;rsquo;s not pretty (for a server with only two active magento installations for instance, this will take about 3 hours).&lt;/p&gt;

&lt;p&gt;The answer is that you have to do an sql dump and restore.  This does take an age but does at least provide the reassurance that you are going to have nice clean databases after the upgrade.&lt;/p&gt;

&lt;p&gt;So the commands are :-&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;mysqldump --all-databases --routines --events &amp;gt; fulldump.sql
mysqldump mysql --tables user &amp;gt; users.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then upgrade mysql binaries to 5.5 and empty the database directory - such as /var/lib/mysql and start mysql with it&amp;rsquo;s script (e.g. /etc/init.d/mysql start).   Note, if you&amp;rsquo;re using a distribution that doesn&amp;rsquo;t come with start scripts, you may want to run mysql_install as root before starting mysql however you start it.&lt;/p&gt;

&lt;p&gt;Then the following will restore the databases and users :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;mysql -u root &lt;span class=&#34;c1&#34;&gt;# add -p if you set up a default password when upgrading/installing 5.5&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\r&lt;/span&gt; mysql
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; users.sql
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; fulldump.sql
FLUSH PRIVILEGES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting a Billing Address from the Magento Orders Table</title>
      <link>https://edmondscommerce.github.io/magento/getting-a-billing-address-from-the-magento-orders-table.html</link>
      <pubDate>Thu, 13 Sep 2012 10:40:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/getting-a-billing-address-from-the-magento-orders-table.html</guid>
      <description>&lt;p&gt;I recently had to generate a report listing the details of all orders from a magento store that matched certain parameters.&lt;/p&gt;

&lt;p&gt;There was a requirement that the billing address should be included in this, and I wanted to do this all in SQL if possible.&lt;/p&gt;

&lt;p&gt;The biggest problem was formatting the address as there is a value in the address table called suffix, which contains the County information, but is not a required value.&lt;/p&gt;

&lt;p&gt;As I was adding in line breaks to the select, this meant for all of the orders that did not have the value, then there would be a blank line using a standard CONCAT statement.&lt;/p&gt;

&lt;p&gt;What I found was that it is possible to add an IF statement to the CONCAT query, which gives the required result.&lt;/p&gt;

&lt;p&gt;This is done like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;-- Other Values that are needed --&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lastname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;street&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;city&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;suffix&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IS&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
                &lt;span class=&#34;n&#34;&gt;CONCAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;suffix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;postcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;quot;Billing Address&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sales_flat_order&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sfo&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sales_flat_order_address&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entity_id&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;billing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;billing&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- add your WHERE conditions --&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>