<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frameworks on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/frameworks/</link>
    <description>Recent content in Frameworks on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jul 2016 16:02:34 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/frameworks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento 2 Js Frameworks</title>
      <link>https://edmondscommerce.github.io/magento-2-js-frameworks/</link>
      <pubDate>Thu, 21 Jul 2016 16:02:34 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-2-js-frameworks/</guid>
      <description>

&lt;p&gt;There is a running joke in the Magento 1.x community where we wished we had jQuery instead of Prototype as the main JavaScript framework. Magento went with Prototype as at the time Magento 1.x was first being built, Prototype was more mature than jQuery.&lt;/p&gt;

&lt;p&gt;So with the Magento 2 overhaul we now have jQuery but it&amp;rsquo;s not the only Javascript library in Magento 2. But fear not as Magento uses it in tandem with other Libraries for good reasons.&lt;/p&gt;

&lt;h2 id=&#34;requirejs&#34;&gt;RequireJs&lt;/h2&gt;

&lt;p&gt;So this is the main one and its single use is to allow for loading in Javascript dependencies asynchronously instead of requiring everything initially through the script tags. This can be used for custom modules to load in extra javascript models and to loading in other dependencies from the Magento install.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*browser:true*/&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*global define*/&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;ko&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;s1&#34;&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;s1&#34;&gt;&amp;#39;Magento_Checkout/js/model/shipping-service&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;s1&#34;&gt;&amp;#39;My_CustomModule/js/model/foo&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ko&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shippingService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This also means that javascript libraries can be shared without the conflicting variable names, especially for jQuery.&lt;/p&gt;

&lt;h3 id=&#34;knockout&#34;&gt;Knockout&lt;/h3&gt;

&lt;p&gt;A lot of the data driven JavaScript in the cart and checkout is handled by KnockoutJS which observes view models and updates the DOM on the fly without requiring you to manipulate the DOM yourself through use of jQuery or Prototype. As mentioned this is used extensively on the single page checkout, but also for the cart mini display.&lt;/p&gt;

&lt;h3 id=&#34;angularjs&#34;&gt;AngularJS&lt;/h3&gt;

&lt;p&gt;This looks to be be used for the web based installer. However, given it is available it may be possible to integrate it in to your theme with RequireJS. Please be aware that some search bots may have difficulty crawling sites using such themes.&lt;/p&gt;

&lt;h3 id=&#34;jquery&#34;&gt;jQuery&lt;/h3&gt;

&lt;p&gt;DOM manipulation which is not reliant on underlying data models, such as banners, now uses jQuery. This brings the ability to use some nice jQuery add-ons that are out there without the conflicting javascript variable names when combined with RequireJS. It also looks to provide the functionality for AJAX requests on the front end allowing you to use &lt;a href=&#34;http://api.jquery.com/category/ajax/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;underscore&#34;&gt;Underscore&lt;/h3&gt;

&lt;p&gt;This provides some useful Javascript functions to manipulate Javascript arrays, functions, objects and collections. This library is not required for you to use but provides a great alternative to rolling your own functions for dealing with arrays.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>