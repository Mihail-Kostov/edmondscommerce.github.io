<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Edmonds Commerce Dev Blog</title>
    <link>http://edmondscommerce.github.io/tags/php/</link>
    <description>Recent content in Php on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jun 2015 09:53:52 +0000</lastBuildDate>
    <atom:link href="http://edmondscommerce.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adding Code Sniffer with Magento Standards to PHP Storm</title>
      <link>http://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</link>
      <pubDate>Wed, 24 Jun 2015 09:53:52 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</guid>
      <description>&lt;p&gt;Keeping inline with the Magento coding standards is always good practice when working but it can often be hard to
stay on top of it, this is where PHP Code Sniffer comes in.&lt;/p&gt;

&lt;p&gt;Lets get setup, install PHP Code sniffer if you haven&amp;rsquo;t already
    yum install php-pear-PHP-CodeSniffer.noarch&lt;/p&gt;

&lt;p&gt;Next, a sanity check that every thing is working
    phpcs -v
    #Output
    #Registering sniffs in the PEAR standard&amp;hellip; DONE (27 sniffs registered)
    #Creating file list&amp;hellip; DONE (0 files in queue)&lt;/p&gt;

&lt;p&gt;Now we are ready to go and get our Magento coding standards to use sniffer with, we&amp;rsquo;ll use composer for this
    composer global require &amp;ldquo;magento-ecg/coding-standard&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Installing the package globally is my preferred way of working, the rule set will be used with all my Magento projects
and if I need to update them I only need to update the global composer repository with one command rather than updating
for every single project.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to tell PHP Storm where to find our sniffer file.
In PHP Storm go to &lt;code&gt;settings-&amp;gt;Languages &amp;amp; Frameworks-&amp;gt;PHP-&amp;gt;Code Sniffer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Under the configuration select menu choose local hit the more (elipsis &amp;hellip;) button then choose to browse to your phpcs
path and browse to your installed sniffer file, in my case the file was located in &lt;code&gt;/bin/phpcs&lt;/code&gt;.
With this done, hit the validate button and you should see green.&lt;/p&gt;

&lt;p&gt;Back on the main settings menu, navigate to &lt;code&gt;editor-&amp;gt;inspections-&amp;gt;PHP&lt;/code&gt; and enable the Code Sniffer checkbox if it isn&amp;rsquo;t
already. Choose &lt;code&gt;custom&lt;/code&gt; as the coding standard and hit the ellipsis (&amp;hellip;) button to browse to your intended rule set.&lt;/p&gt;

&lt;p&gt;In our case, we installed the Magento rule set earlier to our global composer repository which is located in the
home directory. &lt;code&gt;/home/&amp;lt;USER&amp;gt;/.composer/vendor/magento-ecg/coding-standard/Ecg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re all set to go, in PHP Storm you can now choose to inspect code in various places such as individual files,
the entire project or individual directories. I prefer to stick to the directories that I can currently working with
such as the module within the namespace.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Composer Run Utility BASH Script</title>
      <link>http://edmondscommerce.github.io/composer/composer-run-utility-bash-script.html</link>
      <pubDate>Tue, 25 Nov 2014 09:18:18 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/composer/composer-run-utility-bash-script.html</guid>
      <description>&lt;p&gt;I thought I would post up this little snippet of BASH script that I tend to use with projects that use composer.&lt;/p&gt;

&lt;p&gt;It combines an install/update mechanism for composer itself and then runs through the composer install process and dumps the optimised autoloader.&lt;/p&gt;

&lt;p&gt;Hope you find it useful:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt; dirname &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BASH_SOURCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[0]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Checking for Composer&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;COMPOSER_CMD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;which composer&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$COMPOSER_CMD&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Installing Composer&amp;quot;&lt;/span&gt;
    curl -sS https://getcomposer.org/installer &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; php -- --install-dir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;bin
    &lt;span class=&#34;nv&#34;&gt;COMPOSER_CMD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;which composer&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Updating Composer&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$COMPOSER_CMD&lt;/span&gt; selfupdate
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Running Composer&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$COMPOSER_CMD&lt;/span&gt; update
&lt;span class=&#34;nv&#34;&gt;$COMPOSER_CMD&lt;/span&gt; dumpautoload -o
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Done..&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting sub domains and domain from a url</title>
      <link>http://edmondscommerce.github.io/php/getting-sub-domains-and-domain-from-a-url.html</link>
      <pubDate>Fri, 14 Nov 2014 13:34:08 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/getting-sub-domains-and-domain-from-a-url.html</guid>
      <description>&lt;p&gt;At first it seems like a simple one - just use the &lt;code&gt;parse_url&lt;/code&gt; function already built into PHP.&lt;/p&gt;

&lt;p&gt;Unfortunately though, this just gives you the host - which is usually a combination of a subdomain - such as www - and the domain itself.&lt;/p&gt;

&lt;p&gt;To resolve this I ended up writing the following code. It will gradually snip bits off the start of a host and then make a HTTP request until that request fails.&lt;/p&gt;

&lt;p&gt;Once it fails, we know that we have snipped off all of the sub domains we can and we have our final domain.&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    public function getDomain($url)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (!$this-&amp;gt;_domain) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $host = parse_url($url, PHP_URL_HOST);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $sanity = $this-&amp;gt;getHeadersForUrl($host);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            if (!$sanity) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                throw new ErrorException(&amp;quot;No headers when sanity checking full host: $host in &amp;quot; . __METHOD__);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $elems = explode(&amp;#39;.&amp;#39;, $host);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $subdomains = array();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $domain = false;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            while (!$domain) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $check = implode(&amp;#39;.&amp;#39;, $elems);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $headers = $this-&amp;gt;getHeadersForUrl($check);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                if ($headers) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                    $subdomains[] = array_shift($elems);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                } else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                    array_unshift($elems, array_pop($subdomains));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                    $domain = implode(&amp;#39;.&amp;#39;, $elems);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $this-&amp;gt;_domain = $domain;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return $this-&amp;gt;_domain;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    public function getHeadersForUrl($url, $followOnLocation = true)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $ch = curl_init();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_URL, $url);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_HEADER, true);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_NOBODY, true);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $followOnLocation);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_MAXREDIRS, 10);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        $data = curl_exec($ch);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return $data;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PHP error checking in Vim with Syntastic</title>
      <link>http://edmondscommerce.github.io/vim/php-error-checking-in-vim-with-syntastic.html</link>
      <pubDate>Thu, 16 Oct 2014 11:27:40 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/vim/php-error-checking-in-vim-with-syntastic.html</guid>
      <description>&lt;p&gt;If you are using Vim for any kind of PHP development work, then you may miss the sanity checking that is included in some IDEs.&lt;/p&gt;

&lt;p&gt;However, it possible to add this in using the &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34; target=&#34;_blank&#34;&gt;Syntastic&lt;/a&gt;
plug-in. Installation is quite simple and can be handled by any of the common plug-in managers.&lt;/p&gt;

&lt;p&gt;It should be noted that the plug-in just calls external checkers, so you will need to have these setup and configured,
but you should have this done already&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Database Migrations</title>
      <link>http://edmondscommerce.github.io/php/simple-database-migrations.html</link>
      <pubDate>Mon, 28 Apr 2014 13:22:34 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/simple-database-migrations.html</guid>
      <description>&lt;p&gt;Some times you just need something simple to manage database versions. This few lines of PHP is something I have used on various projects to assist with database versioning.&lt;/p&gt;

&lt;p&gt;It is definitely not a fully featured migrations system, there is no downgrade functionality, it is purely for versioning up a DB to the latest version.&lt;/p&gt;

&lt;p&gt;Largely how it works is up to you as it is simply a way of requiring PHP files in numerical order.&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;mysql_fetch_assoc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;db_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;select version from db_migrations order by version desc limit 0,1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$current_version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$di&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DirectoryIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__DIR__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/migrations&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$torun&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$di&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* @var $f DirectoryIterator */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isDot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;php&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pathinfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFilename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PATHINFO_EXTENSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$exp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#1 Invalid migration file &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; in &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;is_numeric&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#2 Invalid migration file &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; in &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$current_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$torun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#3 Invalid migration file &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; in &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$torun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;ksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$torun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SORT_NUMERIC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$torun&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__DIR__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/migrations/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Database Migrations - running migration &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;db_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;insert into db_migrations set version = &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Compare Text Chunks Quickly in PHPStorm</title>
      <link>http://edmondscommerce.github.io/phpstorm/compare-text-chunks-quickly-in-phpstorm.html</link>
      <pubDate>Wed, 26 Mar 2014 11:34:50 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/compare-text-chunks-quickly-in-phpstorm.html</guid>
      <description>&lt;p&gt;Some times you just need to compare a few lines from one file to a few lines from somewhere else. Full blown file diffing will give you all kinds of false positive information, actually you just want to compare a few lines.&lt;/p&gt;

&lt;p&gt;I had a look around and couldn&amp;rsquo;t see an obvious way to do it but then I saw the &amp;ldquo;Compare with Clipboard&amp;rdquo; option in the right click menu.&lt;/p&gt;

&lt;p&gt;To use this is really easy and super handy.&lt;/p&gt;

&lt;p&gt;First of all, highlight one of the chunks of text and get it into your clipboard &lt;code&gt;[ctrl]+[c]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now highlight your second chunk of text and simply select the &amp;ldquo;Compare with Clipboard&amp;rdquo; option.&lt;/p&gt;

&lt;p&gt;You will now get a standard PHPStorm diff viewer allowing you to compare the text chunks side by side.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running PHP Scripts on CLI and Faking a Web Request</title>
      <link>http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request.html</link>
      <pubDate>Fri, 14 Feb 2014 17:31:14 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request.html</guid>
      <description>&lt;p&gt;Some times you build a PHP script that is designed to run from a web request and you want to run it on the command line.
The problem is that you have used the standard PHP super globals and you would rather not refactor the script loads.&lt;/p&gt;

&lt;p&gt;Here is a nice quick solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;if(isset($argc)){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    for ($i = 1; $i &amp;lt; $argc; $i++) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    	$things = explode(&amp;quot;=&amp;quot;, $argv[$i]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (false !== stripos($things[0], &amp;#39;POST:&amp;#39;)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;             $post = str_replace(&amp;#39;POST:&amp;#39;, &amp;#39;&amp;#39;, $things[0]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;             $_POST[$post] = $things[1];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        } else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;             $_GET[$things[0]] = $things[1];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo &amp;quot;\nGET:\n&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;var_dump($_GET);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo &amp;quot;\nPOST:\n&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;var_dump($_POST);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will loop over the argc variable that is defined when running in CLI mode and will fake the &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt; variables as required.&lt;/p&gt;

&lt;p&gt;To run this with get and post variables you would do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php -f script.php getvar1=test getvar2=foo POST:postvar1=bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. It is not particularly pretty but it can be pretty handy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrapping a List in Quotes in PHPStorm</title>
      <link>http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html</link>
      <pubDate>Fri, 06 Dec 2013 11:35:58 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html</guid>
      <description>&lt;p&gt;Some times you might find your self with a list of values you want to copy and paste from somewhere into your PHP code as an array of strings.&lt;/p&gt;

&lt;p&gt;For example, take this list of carrier names that I need to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Blue Package, USPS, UPS, UPSMI, FedEx, DHL, DHL Global Mail, Fastway, UPS Mail Innovations, Lasership, Royal Mail, FedEx SmartPost, OSM, OnTrac, Streamlite, Newgistics, Canada Post, City Link, GLS, GO!, Hermes Logistik Gruppe, Parcelforce, TNT, Target, SagawaExpress, NipponExpress, YamatoTransport, Other
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I really don&amp;rsquo;t fancy wrapping each element of this list with quotes one by one, there must be a better way!&lt;/p&gt;

&lt;p&gt;There is, you can use the regex replace functionality of PHPStorm to do this for you quickly and easily.&lt;/p&gt;

&lt;p&gt;First of all paste the string into your PHPStorm editor and highlight it. Then hit &lt;code&gt;[ctrl]+[r]&lt;/code&gt; to start your find and replace.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;In Selection&amp;rdquo; tick box should be ticked already, you also need to tick the regex box.&lt;/p&gt;

&lt;p&gt;Then in the find section, use this regex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( |)([^,]+),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in your replace box, put this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\n&#39;$2&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets you nearly all the way there, you might just need to tidy up a bit you should now have something looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;Blue Package&#39;,
&#39;USPS&#39;,
&#39;UPS&#39;,
&#39;UPSMI&#39;,
&#39;FedEx&#39;,
&#39;DHL&#39;,
&#39;DHL Global Mail&#39;,
&#39;Fastway&#39;,
&#39;UPS Mail Innovations&#39;,
&#39;Lasership&#39;,
&#39;Royal Mail&#39;,
&#39;FedEx SmartPost&#39;,
&#39;OSM&#39;,
&#39;OnTrac&#39;,
&#39;Streamlite&#39;,
&#39;Newgistics&#39;,
&#39;Canada Post&#39;,
&#39;City Link&#39;,
&#39;GLS&#39;,
&#39;GO!&#39;,
&#39;Hermes Logistik Gruppe&#39;,
&#39;Parcelforce&#39;,
&#39;TNT&#39;,
&#39;Target&#39;,
&#39;SagawaExpress&#39;,
&#39;NipponExpress&#39;,
&#39;YamatoTransport&#39;, Other
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Other&lt;/code&gt; on the end has not been converted has it doesn&amp;rsquo;t have a trailing comma. You could mess about with yoru regex trying to get this to also be converted, or you could say good enough and move on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatically convert old PHP file to camelCase </title>
      <link>http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase.html</link>
      <pubDate>Thu, 17 Oct 2013 10:53:15 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently been working with an old project that uses a combination of different coding styles.&lt;/p&gt;

&lt;p&gt;One of the more trivial annoyances with this is that the variables used through the project are a combination of $camelCase and $snake_case which throws of the coding standards tools that I use.&lt;/p&gt;

&lt;p&gt;To get round this I have put a little script together that will convert $snake_case to $camelCase automatically.&lt;/p&gt;

&lt;p&gt;Obviously, you will need to check the results of this to make sure that there are not variables that should not be changed, but it has saved me a lot of time doing this manually.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve added this to my .bash_allias file, though it could easily be turned into a standalone script if required&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#Fix legacy code&lt;/span&gt;
 cammelCase&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   vim -E -s &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;-EOF&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;   :%s#\%($\%(\k\+\)\)\@&amp;lt;=_\(\k\)#\u\1#g&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;   :update&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;   :quit&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
 
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PHPStorm Regex Convert Array to Object Syntax</title>
      <link>http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax.html</link>
      <pubDate>Tue, 27 Aug 2013 14:40:35 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax.html</guid>
      <description>&lt;p&gt;If you are converting some code from using array syntax to object property syntax then you might like this little snippet of regex.&lt;/p&gt;

&lt;p&gt;This is design to paste straight into the find/replace dialogue in PHPStorm&lt;/p&gt;

&lt;p&gt;Find:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$(\w+)\[&#39;([^&#39;]+)&#39;\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\\\$$1-&amp;gt;$2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is it&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Base64 Decode if Encoded Otherwise Leave Intact</title>
      <link>http://edmondscommerce.github.io/php/php-base64-decode-if-encoded-otherwise-leave-intact.html</link>
      <pubDate>Thu, 25 Jul 2013 15:05:08 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/php-base64-decode-if-encoded-otherwise-leave-intact.html</guid>
      <description>&lt;p&gt;I had a scenario where an API I was working with would sometimes base64 encode data (instead of using CDATA which is the more usual approach).&lt;/p&gt;

&lt;p&gt;However to really make things interesting, they didn&amp;rsquo;t always do this so you couldn&amp;rsquo;t just go and decode everything.&lt;/p&gt;

&lt;p&gt;Here is the solution I came up with:&lt;/p&gt;

&lt;p&gt;First of all, take the raw response and run preg_replace_callback on it to grab all of the XML contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;preg_replace_callback(&amp;#39;%&amp;gt;([^&amp;lt;]+?)&amp;lt;%&amp;#39;, array($this, &amp;#39;_decode&amp;#39;), $response)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then the callback function is a method on the same object hence the use of array($this, &amp;lsquo;_decode&amp;rsquo;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    /**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * Decode from bas64 if it actually is base64 encoded in the first place&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * If not return the raw string&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @param $matches&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @return string&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    protected function _decode($matches)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $raw=$matches[1];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $decoded = base64_decode($raw, true);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $return=$decoded;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if(false === $decoded){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $return=$raw;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }elseif(base64_encode($decoded) != $raw){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $return=$raw;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return &amp;#39;&amp;gt;&amp;lt;![CDATA[&amp;#39; . $return . &amp;#39;]]&amp;gt;&amp;lt;&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What this method does is first of all try calling decode with the optional strict flag. This makes the function return false if it thinks it isn&amp;rsquo;t base64 encoded. It would be great if this was enough but unfortunately you need to do more.&lt;/p&gt;

&lt;p&gt;If it doesn&amp;rsquo;t return false at that stage, we do the real test which is to try encoding it back to base64 and make sure that the rencoded string matches the raw (before original decoding) string. If it was base64 encoded in the first place then this should match.&lt;/p&gt;

&lt;p&gt;By doing this we can handle any kind of mixture of base64 encoded and plain text xml string and get it ready for simpleXMl.&lt;/p&gt;

&lt;p&gt;Notice I am also wrapping the data in CDATA tags to help avoid XML issues when creating the simpleXml object.&lt;/p&gt;

&lt;p&gt;However - one last trick. The reason they were using base64 encoding is because there was some dodgy non XML friendly characters in there. The solution here (if you don&amp;rsquo;t mind compromising the data a little which I didn&amp;rsquo;t for my purposes) then you can do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;//have to utf8 encode it to fix the fact its not properly encoded at their end&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$xml = simplexml_load_string(utf8_encode($response));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s it, another crazy API defeated and bent to my will!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sylius E-Commerce based on Symfony</title>
      <link>http://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony.html</link>
      <pubDate>Tue, 23 Jul 2013 13:48:47 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony.html</guid>
      <description>&lt;p&gt;As if there weren&amp;rsquo;t enough!&lt;/p&gt;

&lt;p&gt;There is a new contender for the open source e-commerce crown, a platform called &lt;b&gt;&lt;a href=&#34;http://sylius.com/features&#34; target=&#34;_blank&#34;&gt;Sylius&lt;/a&gt;&lt;/b&gt;. The thing that makes this one especially interesting is that rather than being built from scratch it is based upon a very well established PHP framework called Symfony. Some would argue that Symfony is the &amp;ldquo;other&amp;rdquo; PHP framework alongside Zend Framework. In fact there are many frameworks however it would be fair to say that Symfony and Zend Framework are the most well established and up to date.&lt;/p&gt;

&lt;p&gt;Basing an e-commerce platform upon an existing PHP framework has many advantages including transferrable skills, established best practice structure and also easier access to a wide range of functionality via library components and extensions.&lt;/p&gt;

&lt;p&gt;There is another e-commerce platform based upon a PHP framework. It is based upon Zend Framework - you might have heard of it - Magento.&lt;/p&gt;

&lt;p&gt;It does look very much like Sylius is still quite a new offering and it can not boast the level of maturity and establishment that Magento has achieved. That said, things move quickly in this industry and who knows what will be top dog in the next five years.&lt;/p&gt;

&lt;p&gt;If you are considering Sylius for your e-commerce website and would like to find a UK Sylius developer to work with then do get in touch with Edmonds Commerce today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP SOAP Client Basic Template</title>
      <link>http://edmondscommerce.github.io/php/php-soap-client-basic-template.html</link>
      <pubDate>Mon, 08 Jul 2013 08:28:17 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/php-soap-client-basic-template.html</guid>
      <description>&lt;p&gt;Often when integrating with SOAP services I find myself doing the same old moves. I have a deep suspicion of API&amp;rsquo;s written by others. They always tend to be in ASP.net, have error message pages that have default messages and generally be really badly documented and coded. Maybe I&amp;rsquo;m just unlucky?&lt;/p&gt;

&lt;p&gt;In my experience decent API&amp;rsquo;s don&amp;rsquo;t use SOAP.&lt;/p&gt;

&lt;p&gt;Anyway if I do have to use SOAP, starting out with this class as a template to get the ball rolling with some useful debugging methods (so you can email the API owners and show them that their API doesn&amp;rsquo;t work), I&amp;rsquo;ve blogged it for my own archive and retrieval reasons but if it helps anyone else out then that is great!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * Class Template Soap Client Consuming Class&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EdmondsCommerceSoap&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;edmondscommerce&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;NotReallyMyPassw0rd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;


    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$wsdl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;connection_timeout&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$wsdl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
        &lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;trace&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//this is important if you want to be able to use the soapDebug method&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SoapClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$wsdl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setAuthHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SoapFault&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;SoapFault: &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTraceAsString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;h2&amp;gt;Debug Info:&amp;lt;/h2&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;soapDebug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    * This method is only a template, will change depending on the service you are using but its a good starting point demonstrating how to set headers&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    **/&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setAuthHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SoapClient&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$auth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;MessageId&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;password&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$auth&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SoapHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Header&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__setSoapHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *  This method gathers all debug info into a handy array ready for var_dump, log etc etc&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     **/&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;soapDebug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SoapClient&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__getLastRequestHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__getLastRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;body_formatted&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;formatXmlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__getLastRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__getLastResponseHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__getLastResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;body_formatted&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;formatXmlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__getLastResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This method is purely to assist the debug method and simply makes generated XML readable&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     **/&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;formatXmlString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$xml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;preg_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/(&amp;gt;)(&amp;lt;)(\/*)/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;$1&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;$2$3&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strtok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$xml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/.+&amp;lt;\/\w[^&amp;gt;]*&amp;gt;$/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$indent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/^&amp;lt;\/\w/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$pad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$indent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/^&amp;lt;\w[^&amp;gt;]*[^\/]&amp;gt;.*$/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$indent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$indent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str_pad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;STR_PAD_LEFT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strtok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$indent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;endwhile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PHP PDO Fetch Object and Columns with Spaces</title>
      <link>http://edmondscommerce.github.io/php/php-pdo-fetch-object-and-columns-with-spaces.html</link>
      <pubDate>Fri, 24 May 2013 17:39:35 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/php-pdo-fetch-object-and-columns-with-spaces.html</guid>
      <description>&lt;p&gt;If you use PDO and Fetch Object, it might not be clear exactly to access row properties that are based on columns that have spaces.&lt;/p&gt;

&lt;p&gt;I know I searched for things like:&lt;/p&gt;

&lt;p&gt;PDO Columns with spaces
PDO::fetchObject spaces
and PDO spaces in column names&lt;/p&gt;

&lt;p&gt;I eventually found what I was looking for in the depths of the PHP.net comments however hopefully this post will be a little bit easier to find thanks to a bit of primitive SEO up there.&lt;/p&gt;

&lt;p&gt;The solution to using columns with spaces is simply this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$sql=&amp;quot;select * from table_with_spaces_in_column_names &amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$statement = $myPDOObject-&amp;gt;prepare($sql);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$statement-&amp;gt;execute();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$row = $statement-&amp;gt;fetchObject();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$ColumnWithSpaces = $row-&amp;gt;{&amp;#39;Column With Spaces&amp;#39;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Payment has failed... Magento and SagePay CE Error &#43; Solution</title>
      <link>http://edmondscommerce.github.io/magento/payment-has-failed-magento-and-sagepay-ce-error-solution.html</link>
      <pubDate>Wed, 22 May 2013 14:58:25 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/payment-has-failed-magento-and-sagepay-ce-error-solution.html</guid>
      <description>&lt;p&gt;I recently upgraded a magento store and installed the Sage Pay Suite CE module from EbizMarks.&lt;/p&gt;

&lt;p&gt;The following error came up twice during the testing of the module, once in the frontend and once in the admin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payment has failed, please reload checkout page and try again. Your card has not been charged&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The error itself is triggered from the saveAfter method in the Ebizmarts_SagePaySuite_Model_Observer_Sales class and is called every time an order is saved.&lt;/p&gt;

&lt;p&gt;The error on the frontend was caused by a javascript error. Adding the following to the top of the sagePaySuite_Checkout.js file corrected it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sagePayIsMobile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sagePayIsMobile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/BlackBerry/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/webOS/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/Android/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/iPhone/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/iPod/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/iPad/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The error in the admin was caused by a different extension being called when the order was saved. Normally the extension ensures that the method is not called when it is not needed and this is done by checking the route and the registry. If an extension saves the order these checks are not triggered so you will need to add in your own. To do that you will need add the following code to the action that is saving the error&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;Mage::register(&amp;#39;skipSagePay&amp;#39;, TRUE);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then change the following line in the Ebizmarts/SagePaySuite/Model/Observer/Sales.php file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;if( (Mage::app()-&amp;gt;getRequest()-&amp;gt;getControllerModule() == &amp;#39;Mage_Api&amp;#39;) || Mage::registry(&amp;#39;current_shipment&amp;#39;) || Mage::registry(&amp;#39;sales_order&amp;#39;) || Mage::registry(&amp;#39;current_creditmemo&amp;#39;) || Mage::registry(&amp;#39;current_invoice&amp;#39;) || ($order-&amp;gt;getPayment()-&amp;gt;getMethod() == &amp;#39;sagepayrepeat&amp;#39;) ){&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;if( (Mage::app()-&amp;gt;getRequest()-&amp;gt;getControllerModule() == &amp;#39;Mage_Api&amp;#39;) || Mage::registry(&amp;#39;current_shipment&amp;#39;) || Mage::registry(&amp;#39;sales_order&amp;#39;) || Mage::registry(&amp;#39;current_creditmemo&amp;#39;) || Mage::registry(&amp;#39;current_invoice&amp;#39;) || ($order-&amp;gt;getPayment()-&amp;gt;getMethod() == &amp;#39;sagepayrepeat&amp;#39;) || Mage::registry(&amp;#39;skipSagePay&amp;#39;)){&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>