<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Magento on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/magento/</link>
    <description>Recent content in Magento on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Jul 2016 11:22:52 +0100</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/magento/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento 2 Dependency Injection and Swapping Dependencies with Virtual Types</title>
      <link>https://edmondscommerce.github.io/magento-2-dependency-injection-and-swapping-dependencies-with-virtual-types/</link>
      <pubDate>Tue, 19 Jul 2016 11:22:52 +0100</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-2-dependency-injection-and-swapping-dependencies-with-virtual-types/</guid>
      <description>&lt;p&gt;Recently we came across a scenario where we wanted to swap dependencies depending on the class that required them. The scenario was that we were using either the console or logging as an output
when writing a module to use an API for product data among other things.&lt;/p&gt;

&lt;p&gt;We wanted to be able to easily swap out the class that handled the output to logging or console (one for each output using an interface contract to standardise the classes)&lt;/p&gt;

&lt;p&gt;Suppose we have an output contract aptly named &lt;code&gt;OutputContract&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;interface OutputContract&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    /**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @param string $message&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function write($message);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    /**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @param string $message&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function writeln($message);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We would then have two classes that implement this contract also aptly named &lt;code&gt;Console&lt;/code&gt; and &lt;code&gt;Logger&lt;/code&gt; (these can be placed in a namespace to group them together as implementations).&lt;/p&gt;

&lt;p&gt;In Magento 2 dependency injection we can explicitly declare what dependencies a specific class will be given but we can also declare a virtual type.
In this instance we have two classes that will use the output contract, one that is used when running under cron where we want to output to a log file and the other that will use used when running
a command using &lt;code&gt;bin/magento&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is a sample di.xml that is used by a module to specify the dependencies.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;config&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xsi:noNamespaceSchemaLocation=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;urn:magento:framework:ObjectManager/etc/config.xsd&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;EdmondsCommerce\Module\Contracts\OutputContract&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;EdmondsCommerce\Module\Helper\Output\Logger&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/config&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we have specified that we want the output contract to use the logger output by default which is a sane default as everything is written to a log file to be referred to if issues arise.
When the interface is type hinted in a constructor we will get the type specified in the preference for that interface.&lt;/p&gt;

&lt;p&gt;As for swapping out the dependency we can do the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;    ...
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;virtualType&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;SimpleConsoleImport&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;EdmondsCommerce\Module\Helper\Importer&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;argument&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xsi:type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;EdmondsCommerce\Module\Helper\Output\Console&lt;span class=&#34;nt&#34;&gt;&amp;lt;/argument&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/virtualType&amp;gt;&lt;/span&gt;
    
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;EdmondsCommerce\Module\Console\Api\Products&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;argument&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;productImport&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xsi:type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;SimpleConsoleImport&lt;span class=&#34;nt&#34;&gt;&amp;lt;/argument&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here instead of using a direct implementation or interface we have specified a virtual type. The virtual type declares that there is a pseudo class named &lt;code&gt;SimpleConsoleImport&lt;/code&gt; that uses a different
implementation of the &lt;code&gt;OutputContract&lt;/code&gt; which writes to the console instead of to a log file. This class is then used by the console command and so the output is written where we want it.&lt;/p&gt;

&lt;p&gt;This is a simple demonstration of how we can swap dependencies using the virtual type system which gives a lot of power to the developer which slightly resembles the rewrite system with swapping
out classes for bespoke code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Exploit - Stealing Customer Info Including Card Details - Check your site now!</title>
      <link>https://edmondscommerce.github.io/magento/magento-exploit-stealing-customer-info-including-card-details-check-your-site-now.html</link>
      <pubDate>Tue, 30 Jun 2015 11:53:51 +0100</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-exploit-stealing-customer-info-including-card-details-check-your-site-now.html</guid>
      <description>

&lt;p&gt;We have detected malicious code running on one of our client&amp;rsquo;s Magento websites. The code in question is harvesting customer details which are then being stolen.&lt;/p&gt;

&lt;p&gt;The process is not very sophisticated though it does seem to be effective. Unfortunately investigating it further it seems that there are a number of hacked sites and there are even sensitive details including, in some cases, credit card information that is visible in Google&amp;rsquo;s own cache.&lt;/p&gt;

&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;As is common with this kind of exploit, there is a PHP file that then calls &lt;code&gt;eval&lt;/code&gt; on a base64 encoded set of code.&lt;/p&gt;

&lt;p&gt;In this case, the file was called abstractleft.php and was located in the Magento shell directory. The contents of the file begin with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?PHP&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;gzinflate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;base64_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Xxs38jiO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pyta92K1tDEnaBg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The top of the file indicates that it is a web shell.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/* WSO 2.1 (Web Shell by pgems.in) */&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The file is being used to generate a dump of data, with regular POST requests coming from the IP: &lt;code&gt;46.21.151.107&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the case of our client, the issue is being resolved quickly and only seems to have been live for a day or so, however looking through Google&amp;rsquo;s index its clear that there are other sites that have been leaking a lot of data.&lt;/p&gt;

&lt;p&gt;In the worst case, the Magento sites have been using the Saved Credit Card payment method. This means that the data scrapes have been pulling customer details and also the full card details. This is another reason why it is a &lt;em&gt;really bad idea&lt;/em&gt; to use the Saved Credit Card payment method.&lt;/p&gt;

&lt;h3 id=&#34;defense&#34;&gt;Defense&lt;/h3&gt;

&lt;p&gt;It is not clear exactly how the client server was compromised however it is important to ensure that all access credentials are updated and also firewall rules are reviewed and updated.&lt;/p&gt;

&lt;p&gt;Ideally we would like to know exactly how the attacker gained access to the server to place the exploit file. This involves examining security logs and other logs. If the attack is not too sophisticated then there is a good chance that there is a lot of debug information that should be helpful in finding out exactly how the attack has taken place.&lt;/p&gt;

&lt;p&gt;The main thing for Magento sites now though is to ensure that all security patches have been applied. If your live site has not been patched then really you must expect this kind of hack.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding Code Sniffer with Magento Standards to PHP Storm</title>
      <link>https://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</link>
      <pubDate>Wed, 24 Jun 2015 09:53:52 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</guid>
      <description>&lt;p&gt;Keeping inline with the Magento coding standards is always good practice when working but it can often be hard to
stay on top of it, this is where PHP Code Sniffer comes in.&lt;/p&gt;

&lt;p&gt;Lets get setup, install PHP Code sniffer if you haven&amp;rsquo;t already
    yum install php-pear-PHP-CodeSniffer.noarch&lt;/p&gt;

&lt;p&gt;Next, a sanity check that every thing is working
    phpcs -v
    #Output
    #Registering sniffs in the PEAR standard&amp;hellip; DONE (27 sniffs registered)
    #Creating file list&amp;hellip; DONE (0 files in queue)&lt;/p&gt;

&lt;p&gt;Now we are ready to go and get our Magento coding standards to use sniffer with, we&amp;rsquo;ll use composer for this
    composer global require &amp;ldquo;magento-ecg/coding-standard&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Installing the package globally is my preferred way of working, the rule set will be used with all my Magento projects
and if I need to update them I only need to update the global composer repository with one command rather than updating
for every single project.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to tell PHP Storm where to find our sniffer file.
In PHP Storm go to &lt;code&gt;settings-&amp;gt;Languages &amp;amp; Frameworks-&amp;gt;PHP-&amp;gt;Code Sniffer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Under the configuration select menu choose local hit the more (elipsis &amp;hellip;) button then choose to browse to your phpcs
path and browse to your installed sniffer file, in my case the file was located in &lt;code&gt;/bin/phpcs&lt;/code&gt;.
With this done, hit the validate button and you should see green.&lt;/p&gt;

&lt;p&gt;Back on the main settings menu, navigate to &lt;code&gt;editor-&amp;gt;inspections-&amp;gt;PHP&lt;/code&gt; and enable the Code Sniffer checkbox if it isn&amp;rsquo;t
already. Choose &lt;code&gt;custom&lt;/code&gt; as the coding standard and hit the ellipsis (&amp;hellip;) button to browse to your intended rule set.&lt;/p&gt;

&lt;p&gt;In our case, we installed the Magento rule set earlier to our global composer repository which is located in the
home directory. &lt;code&gt;/home/&amp;lt;USER&amp;gt;/.composer/vendor/magento-ecg/coding-standard/Ecg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re all set to go, in PHP Storm you can now choose to inspect code in various places such as individual files,
the entire project or individual directories. I prefer to stick to the directories that I can currently working with
such as the module within the namespace.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Magento 1.9.1&#39;s Colour Swatches in your custom theme</title>
      <link>https://edmondscommerce.github.io/magento/using-magento-1-dot-9-1-s-colour-swatches-in-your-theme.html</link>
      <pubDate>Thu, 18 Jun 2015 18:56:49 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/using-magento-1-dot-9-1-s-colour-swatches-in-your-theme.html</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve upgraded to Magento 1.9.1 you might have noticed new functionality in the Admin to add colour swatches to your attributes. These work well but for reasons only known to Magento, these require you to be using the new rwd theme, or a derivitive of it. There&amp;rsquo;s no reference to it in base/default so if your theme isn&amp;rsquo;t a derivitive of rwd you&amp;rsquo;ll need to copy the code across.&lt;/p&gt;

&lt;p&gt;If you look in the rwd/default theme, you&amp;rsquo;ll notice there are folders for configurableswatches in layout, template and skin. These are the ones you&amp;rsquo;ll need to copy across. But there&amp;rsquo;s also a bit of customisation needed.&lt;/p&gt;

&lt;h3 id=&#34;step-1-copy-over-the-colourswatches-files-and-folders&#34;&gt;Step 1: Copy over the colourswatches files and folders&lt;/h3&gt;

&lt;p&gt;Copy these files from the rwd theme to the same places in your custom theme&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app/design/frontend/rwd/default/&lt;/code&gt;&lt;strong&gt;&lt;code&gt;layout/configurableswatches.xml&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/design/frontend/rwd/default/&lt;/code&gt;&lt;strong&gt;&lt;code&gt;template/configurableswatches/&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skin/frontend/rwd/default/&lt;/code&gt;&lt;strong&gt;&lt;code&gt;js/configurableswatches/&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-2-update-your-theme-s-layout&#34;&gt;Step 2: Update your theme&amp;rsquo;s layout&lt;/h3&gt;

&lt;p&gt;The layout file &lt;code&gt;configurableswatches.xml&lt;/code&gt; expects certain blocks to be present, which are only set in rwd&amp;rsquo;s &lt;code&gt;catalog.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the following lines to your theme&amp;rsquo;s &lt;code&gt;catalog.xml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;PRODUCT_TYPE_configurable&amp;gt;
        ...
         &amp;lt;reference name=&amp;quot;product.info.options.wrapper&amp;quot;&amp;gt;
             &amp;lt;block type=&amp;quot;catalog/product_view_type_configurable&amp;quot; name=&amp;quot;product.info.options.configurable&amp;quot; as=&amp;quot;options_configurable&amp;quot; before=&amp;quot;-&amp;quot; template=&amp;quot;catalog/product/view/type/options/configurable.phtml&amp;quot;&amp;gt;
    +             &amp;lt;block type=&amp;quot;core/text_list&amp;quot; name=&amp;quot;product.info.options.configurable.renderers&amp;quot; as=&amp;quot;attr_renderers&amp;quot; /&amp;gt;
    +             &amp;lt;block type=&amp;quot;core/text_list&amp;quot; name=&amp;quot;product.info.options.configurable.after&amp;quot; as=&amp;quot;after&amp;quot; /&amp;gt;
             &amp;lt;/block&amp;gt;
         &amp;lt;/reference&amp;gt;
     &amp;lt;/PRODUCT_TYPE_configurable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-add-your-images&#34;&gt;Step 3: Add your images&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s two ways you can set the swatch images:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Globally at &lt;code&gt;media/wysiwyg/swatches&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On the attribute at &amp;gt; Catalog &amp;gt; Attributes &amp;gt; Manage Attributes &amp;gt; [your attribute] &amp;gt; Manage Label/Options (don&amp;rsquo;t forget to save the attribute after it&amp;rsquo;s uploaded)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-4-enable-the-swatches&#34;&gt;Step 4: Enable the swatches&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to enable the use of swatches at System Configuration &amp;gt; Catalog &amp;gt; Configurable Swatches.&lt;/p&gt;

&lt;p&gt;In General Settings, set Enabled to Yes and select your attribures in &amp;ldquo;Product Attributes to Show as Swatches in Product Detail&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;step-5-apply-css&#34;&gt;Step 5: Apply CSS&lt;/h3&gt;

&lt;p&gt;As with everything else the style information is only in rwd&amp;rsquo;s stylesheets. You&amp;rsquo;ll likely need to make some small modifications to make them look acceptable. As a baseline this should suffice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.product-options .swatch-attr .configurable-swatch-list li {
    display: inline-block;
    border:1px solid #CACACA;
    padding: 1px;
}
.product-options .swatch-attr .configurable-swatch-list li.selected {
    border-color:#0095D3;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Repeating Behat Scenarios when Testing Magento with SmartStep</title>
      <link>https://edmondscommerce.github.io/behat/repeating-behat-scenarios-when-testing-magento-with-smartstep.html</link>
      <pubDate>Wed, 15 Apr 2015 12:02:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/behat/repeating-behat-scenarios-when-testing-magento-with-smartstep.html</guid>
      <description>

&lt;p&gt;When behat testing Magento I found myself repeating the same Homepage &amp;gt; Category &amp;gt; Product &amp;gt; Add-to-cart &amp;gt; Cart page scenario for a variety of tests - checking that a category page has products; checking that items are added to the cart; testing the checkout itself etc etc.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to copy-paste the whole procedure because if I changed, say the &lt;code&gt;.product-list&lt;/code&gt; class, I&amp;rsquo;d have to update each of the Scenarios. Bit of a kick in the face to &lt;a href=&#34;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The standard Behat way is to create a method in the Context class which performs the add-to-cart procedure under the Step &lt;code&gt;Given I have added to cart&lt;/code&gt; or similar, but this defeats the object of using Gherkin to write the tests.&lt;/p&gt;

&lt;p&gt;Fortunately KnpLabs have soled this problem with &lt;a href=&#34;https://github.com/KnpLabs/FriendlyContexts/blob/master/doc/feature-smartStep.md&#34; target=&#34;_blank&#34;&gt;SmartSteps&lt;/a&gt;. This allows you to create a Scanerio that you want to be repeatable by tagging it as a &lt;code&gt;@smartStep&lt;/code&gt;. Once it&amp;rsquo;s tagged, you can easily embed that scenario into a new one by having a step &lt;code&gt;Given [scenario name]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-smartsteps-to-your-behat-tests&#34;&gt;Adding SmartSteps to your behat tests&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;composer.json&lt;/code&gt;, add a new dependency
&lt;code&gt;
&amp;quot;knplabs/friendly-contexts&amp;quot;: &amp;quot;dev-master&amp;quot;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;behat.yml&lt;/code&gt;
```
default:
extensions:
    Knp\FriendlyContexts\Extension:
        smartTag: smartStep&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- Tag your scenario

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@smartStep
  Scenario: I arrive on the site and add a product to cart
    When I am on &amp;ldquo;/&amp;rdquo;
    Then I follow &amp;ldquo;My category&amp;rdquo;
    Then I follow &amp;ldquo;My product&amp;rdquo;
    Then I press &amp;ldquo;Add to Cart&amp;rdquo;
    And I should see &amp;ldquo;was added to your shopping cart&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- And then use the Scenario in any other scenarios with
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given I arrive on the site and add a product to cart
```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SUPEE-5344 - a New Patch for Magento Community 1.6, 1.7, 1.8 and 1.9; Enterprise 1.11, 1.12, 1.13 and 1.14</title>
      <link>https://edmondscommerce.github.io/magento/supee-5344-a-new-patch-for-magento-community-1-dot-6-1-dot-7-1-dot-8-and-1-dot-9-enterprise-1-dot-11-1-dot-12-1-dot-13-and-1-dot-14.html</link>
      <pubDate>Wed, 11 Feb 2015 15:53:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/supee-5344-a-new-patch-for-magento-community-1-dot-6-1-dot-7-1-dot-8-and-1-dot-9-enterprise-1-dot-11-1-dot-12-1-dot-13-and-1-dot-14.html</guid>
      <description>

&lt;p&gt;Magento has become aware of a vulnerability requiring patching as soon as possible. The vulnerability allows an attacker to send a specially crafted request to a Magento store and allow it to run Magento code as though it were on the live server. Magento aren&amp;rsquo;t aware of this having been used in the wild, but now that the vulnerability is public, attackers may use it against existing stores.&lt;/p&gt;

&lt;p&gt;This vulnerability affects all versions of Magento, and Magento have released patches for versions Community Edition 1.6 to 1.9, and Enterprise 1.11 to 1.14.&lt;/p&gt;

&lt;p&gt;The fix is to apply some stricter IP address checks to requests.&lt;/p&gt;

&lt;h3 id=&#34;patching-your-magento-store&#34;&gt;Patching your Magento store&lt;/h3&gt;

&lt;p&gt;To get the patch:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: at time of writing, the Downloads of the CE edition seems to under heavy load and is currently presenting a white page instead of the shell file&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Community Edition&lt;/strong&gt; users should go to the &lt;a href=&#34;http://www.magentocommerce.com/download&#34; target=&#34;_blank&#34;&gt;Magento downloads page&lt;/a&gt; and scroll to the &amp;ldquo;Magento Community Edition Patches&amp;rdquo; section. From there, select your version of Magento and click Download&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enterprise Edition&lt;/strong&gt; users should log into their Magento account Magento Support Portal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;ll be presented with a shell file which will make the necessary changes to your store. Upload this patch to your server in the Magento root and run it against your store.&lt;/p&gt;

&lt;p&gt;The patch changes core files, and it&amp;rsquo;s always recommended to test changes on a development copy before the live site, especially if you have modifications to your core code. Also keep in mind that any upgrades pre-1.9.0.1 will remove these changes, and the patch will have to be re-run.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd /your/magento/root/&lt;/code&gt; - Navigate to the root of Magento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./sh PATCH_SUPEE-5344_CE_1.8.0.0_v1.sh&lt;/code&gt; - Run the patches&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm PATCH_SUPEE-5344_CE_1.8.0.0_v1.sh&lt;/code&gt; - Delete the patch file, so that it can&amp;rsquo;t be re-run by the public&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm -rf var/cache/*&lt;/code&gt; - Clear Magento&amp;rsquo;s cache&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reload a page and the patch will have taken effect.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SUPEE-3941 - A new patch for Magento Community 1.6, 1.7, 1.8 and 1.9; Enterprise 1.11, 1.12, 1.13 and 1.14</title>
      <link>https://edmondscommerce.github.io/magento/supee-3941-a-new-patch-for-magento-community-1-dot-6-1-dot-7-1-dot-8-and-1-dot-9-enterprise-1-dot-11-1-dot-12-1-dot-13-and-1-dot-14.html</link>
      <pubDate>Wed, 11 Feb 2015 10:54:06 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/supee-3941-a-new-patch-for-magento-community-1-dot-6-1-dot-7-1-dot-8-and-1-dot-9-enterprise-1-dot-11-1-dot-12-1-dot-13-and-1-dot-14.html</guid>
      <description>&lt;p&gt;This post was published with the incorrect vulnerability code; &lt;a href=&#34;https://edmondscommerce.github.io/magento/supee-5344-a-new-patch-for-magento-community-1-dot-6-1-dot-7-1-dot-8-and-1-dot-9-enterprise-1-dot-11-1-dot-12-1-dot-13-and-1-dot-14.html&#34;&gt;this article has been moved to this post&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intermittent PayPal IPN failure in Magento</title>
      <link>https://edmondscommerce.github.io/magento/intermittent-paypal-ipn-failure-in-magento.html</link>
      <pubDate>Wed, 15 Oct 2014 09:53:44 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/intermittent-paypal-ipn-failure-in-magento.html</guid>
      <description>

&lt;p&gt;On one or two store we had an issue with intermittent IPN failures. Some paypal orders would be stuck on the &amp;lsquo;Pending&amp;rsquo; status even if there was a sucessful paypal payment. In the exception logs there would be the following exception being thrown &amp;lsquo;PayPal IPN postback failure. See paypal_unknown_ipn.log for details.&amp;rsquo; on line 156 of app/code/core/Mage/Paypal/Model/Ipn.php.&lt;/p&gt;

&lt;h3 id=&#34;what-the-issue-turned-out-to-be&#34;&gt;What the issue turned out to be&lt;/h3&gt;

&lt;p&gt;The issue turned out to be curl adding in extra error. On occasions curl will send the following header &amp;lsquo;Expect: 100&amp;rsquo;. The idea behind that is that rather than curl just send the data. It will send a inital request just to check if the web server will accept the data. Curl will usually fall on this bahaviour if the request is above a certain size.&lt;/p&gt;

&lt;p&gt;It turns out that the magento implementation assumes that the response will be consitant. But with the ocasional &amp;lsquo;Expect&amp;rsquo; header bing in the request this is not always the case.&lt;/p&gt;

&lt;p&gt;In the _postBack method in the IPN class where it makes the curl post back is recived there is the following code near to the end of the method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $response = preg_split(&amp;#39;/^\r?$/m&amp;#39;, $response, 2);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $response = trim($response[1]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code assumes the line position of where the &amp;lsquo;VERIFIED&amp;rsquo; line would occur. To resolve the header issue the following code should be used instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $response = preg_split(&amp;#39;/^\r?$/m&amp;#39;, $response);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $response = trim(end($response));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the &amp;lsquo;VERIFIED&amp;rsquo; line will always be the last line in the response. Regardless of any extra headers being added. This should resolve the issue but of corse remeber to use the local method and copy the class to the local folder with the correct path before doing the modification.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento 1.9 &amp;amp; 1.14 released</title>
      <link>https://edmondscommerce.github.io/magento/magento-1-dot-9-and-1-dot-14-released.html</link>
      <pubDate>Wed, 14 May 2014 11:12:02 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-1-dot-9-and-1-dot-14-released.html</guid>
      <description>&lt;p&gt;Magento has released the latest version of both CE and EE.&lt;/p&gt;

&lt;p&gt;The big changes that are included are as follows&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive design included as default&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both editions now come with a responsive theme. This introduces jQuery, SASS, and Compass into native Magento and should allow for easier customisation in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bill Me Later&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The PayPal integration has been upgraded to include the &lt;a href=&#34;https://www.paypal.com/webapps/mpp/promotional-financing&#34; target=&#34;_blank&#34;&gt;Bill Me Later&lt;/a&gt; financing option. This allows customer to pay for products over six months whilst the merchant gets paid straight away.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other security fix and performance fixes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The full list of changes can be seen &lt;a href=&#34;http://www.magentocommerce.com/knowledge-base/entry/new-features-ce19-ee114&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding out the biggest folders in a Magento or other website root</title>
      <link>https://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root.html</link>
      <pubDate>Tue, 04 Mar 2014 16:10:19 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root.html</guid>
      <description>&lt;p&gt;Often pulling down a Magento or other site you&amp;rsquo;ll find a load of files that have been dumped in the web root. Downloading these is often pointless and takes extra time, so you&amp;rsquo;ll want to exclude them from an rsync (using the &lt;code&gt;--exclude &#39;path&#39;&lt;/code&gt; paramter).&lt;/p&gt;

&lt;p&gt;A simple bash command for this is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;du -m --max-depth&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --exclude media &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This invokes &lt;code&gt;du&lt;/code&gt; to show each direct subfolder&amp;rsquo;s contents&amp;rsquo; size, and pipes it through to &lt;code&gt;sort&lt;/code&gt; to rank them in increasing size. The sizes are in MB. See &lt;a href=&#34;http://explainshell.com/explain?cmd=du+-m+--max-depth%3D1+--exclude+media+|+sort+-n&#34; target=&#34;_blank&#34;&gt;a more broken down explanation here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redirect to previous page in Magento after logout</title>
      <link>https://edmondscommerce.github.io/magento/redirect-to-previous-page-in-magento-after-logout.html</link>
      <pubDate>Tue, 25 Feb 2014 15:58:02 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/redirect-to-previous-page-in-magento-after-logout.html</guid>
      <description>&lt;p&gt;By default Magento sends a user to a logoutSuccess page after they choose to log out. This is &amp;lsquo;hard-baked&amp;rsquo; into the Customer controller&amp;rsquo;s logout action in the line &lt;code&gt;$this-&amp;gt;_redirect(&#39;*/*/logoutSuccess&#39;);&lt;/code&gt;. You can choose to set the Javascript redirect in the template &lt;code&gt;customer/logout.phtml&lt;/code&gt;, but a better idea is to bypass the logout success page entirely.&lt;/p&gt;

&lt;p&gt;The way to do this is to override the &lt;code&gt;logoutAction()&lt;/code&gt; method in the &lt;code&gt;customerController&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.magentocommerce.com/wiki/5_-_modules_and_development/0_-_module_development_in_magento/how_to_overload_a_controller&#34; target=&#34;_blank&#34;&gt;Rewrite the customer controller as documented here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Override the &lt;code&gt;logoutAction()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Set the redirect as below&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;require_once&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Mage/Customer/controllers/AccountController.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;


    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EdmondsCommerce_LogoutRedirect_AccountController&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage_Customer_AccountController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;logoutAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSingleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;core/session&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLastUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_getSession&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;logout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setBeforeAuthUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_redirectUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cPanel Download Site Files and Database</title>
      <link>https://edmondscommerce.github.io/cpanel/cpanel-download-site-files-and-database.html</link>
      <pubDate>Mon, 10 Feb 2014 18:03:36 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/cpanel/cpanel-download-site-files-and-database.html</guid>
      <description>

&lt;p&gt;Often a client won&amp;rsquo;t have access to SSH, or won&amp;rsquo;t be able to provide you with some of the more specifics such as FTP, PHPMyAdmin etc. All they know to give you is access to their cPanel. Through this there&amp;rsquo;s various tools at your disposal.&lt;/p&gt;

&lt;h2 id=&#34;try-ssh&#34;&gt;Try SSH&lt;/h2&gt;

&lt;p&gt;Your cPanel login is actually a Linux user login, which cPanel&amp;rsquo;s FTP hooks into. The first step is to navigate in your cPanel to FTP Accounts and click Configure FTP client on a user. These are SFTP details and can very often provide you with SSH shell access, unless the host has disabled this.&lt;/p&gt;

&lt;p&gt;Simply try &lt;code&gt;ssh user@host -p 1234&lt;/code&gt;, where the user, host and password are your cPanel login, and the port displayed on the FTP Accounts page.&lt;/p&gt;

&lt;p&gt;From here you&amp;rsquo;re free to use &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;mysqldump&lt;/code&gt; etc to acquire the files and database.&lt;/p&gt;

&lt;h2 id=&#34;if-ssh-isn-t-enabled&#34;&gt;If SSH isn&amp;rsquo;t enabled&lt;/h2&gt;

&lt;p&gt;Sometimes the host disables SSH access, only allowing its use for SFTP. There are still many ways to acquire the site&amp;rsquo;s files and database:&lt;/p&gt;

&lt;h3 id=&#34;getting-hold-of-the-files&#34;&gt;Getting hold of the files&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Plain old FTP&lt;/strong&gt; - You can just use an FTP client such as Filezilla to access and download the site&amp;rsquo;s files using FTP or SFTP. This is the simplest way, but can take a long time because of the amount of files involved&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File Manager Web UI&lt;/strong&gt; - compressing the site&amp;rsquo;s files obviously shrinks the download size, but also vastly reduces the amount of connections you need to make, leading to a faster download speed.

&lt;ol&gt;
&lt;li&gt;Navigate to the File Manager section (remember to tick &amp;ldquo;Show hidden files&amp;rdquo; to pick up .htaccess files)&lt;/li&gt;
&lt;li&gt;Browse to the web root folder, select all the files and folders you want using Ctrl+Click. Remember to exclude unnecessary large files such as sql dumps, media folders and the var folder&lt;/li&gt;
&lt;li&gt;Click Compress from the toolbar&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-hold-of-the-database&#34;&gt;Getting hold of the database&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHPMyAdmin&lt;/strong&gt; - PHPMyAdmin offers an array of options for dumping your database. You should start by checking the database&amp;rsquo;s size and considering excluding the dump of tables such as &lt;code&gt;log_url&lt;/code&gt;, &lt;code&gt;log_url_info&lt;/code&gt;, &lt;code&gt;log_visitor&lt;/code&gt;, &lt;code&gt;log_visitor_info&lt;/code&gt;, &lt;code&gt;report_viewed_product_index&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the PHPMyAdmin area of cPanel and locate the database in use (check your &lt;code&gt;app/etc/local.xml&lt;/code&gt; if you&amp;rsquo;re not sure which&lt;/li&gt;
&lt;li&gt;Click the Export tab&lt;/li&gt;
&lt;li&gt;Select Custom: here&amp;rsquo;s where you can selectively export information&lt;/li&gt;
&lt;li&gt;Tick &amp;lsquo;Disable foreign key checks&amp;rsquo; and set &amp;lsquo;Dump table&amp;rsquo; to &amp;lsquo;structure&amp;rsquo;. This will have PHPMyAdmin set up only the tables&amp;rsquo; columns but no data (we&amp;rsquo;ll get to that)&lt;/li&gt;
&lt;li&gt;Click Go&lt;/li&gt;
&lt;li&gt;Once this is complete, navigate back to the Export page and click Custom again.&lt;/li&gt;
&lt;li&gt;Deselect (ctrl+click) any tables which are unnecessary&lt;/li&gt;
&lt;li&gt;Tick &amp;lsquo;Disable foreign key checks&amp;rsquo; and set &amp;lsquo;Dump table&amp;rsquo; this time to &amp;lsquo;data&amp;rsquo;&lt;/li&gt;
&lt;li&gt;This will provide you with two files representing the database. Import first the Structure one, and then the Data one (or concatenate the two together)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Magento 1.8 released</title>
      <link>https://edmondscommerce.github.io/magento/magento-1-8-released.html</link>
      <pubDate>Mon, 30 Sep 2013 10:01:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-1-8-released.html</guid>
      <description>&lt;p&gt;Today I got a notification through that Magento 1.8 had finally been released.&lt;/p&gt;

&lt;p&gt;This has been in beta since alpha since April, and contains server fixes that a lot of people have been waiting for.&lt;/p&gt;

&lt;p&gt;The most important one for UK vendors is that the rounding issue in tax calculations has been fixed.&lt;/p&gt;

&lt;p&gt;There are also improvements to caching and database performance. The full release notes can be seen &lt;a href=&#34;http://www.magentocommerce.com/knowledge-base/entry/ce-18-later-release-notes&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are issues that have affected merchants since that change in the VAT rate, so we would recommend upgrading for everyone at this time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disable JavaScript alerts for a page</title>
      <link>https://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page.html</link>
      <pubDate>Wed, 28 Aug 2013 09:21:30 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page.html</guid>
      <description>&lt;p&gt;If you encounter a webpage that is generating a lot of alerts, the following bookmark will prevent them from stealing focus but still allow you to see what is being said.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;javascript&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sylius E-Commerce based on Symfony</title>
      <link>https://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony.html</link>
      <pubDate>Tue, 23 Jul 2013 13:48:47 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony.html</guid>
      <description>&lt;p&gt;As if there weren&amp;rsquo;t enough!&lt;/p&gt;

&lt;p&gt;There is a new contender for the open source e-commerce crown, a platform called &lt;b&gt;&lt;a href=&#34;http://sylius.com/features&#34; target=&#34;_blank&#34;&gt;Sylius&lt;/a&gt;&lt;/b&gt;. The thing that makes this one especially interesting is that rather than being built from scratch it is based upon a very well established PHP framework called Symfony. Some would argue that Symfony is the &amp;ldquo;other&amp;rdquo; PHP framework alongside Zend Framework. In fact there are many frameworks however it would be fair to say that Symfony and Zend Framework are the most well established and up to date.&lt;/p&gt;

&lt;p&gt;Basing an e-commerce platform upon an existing PHP framework has many advantages including transferrable skills, established best practice structure and also easier access to a wide range of functionality via library components and extensions.&lt;/p&gt;

&lt;p&gt;There is another e-commerce platform based upon a PHP framework. It is based upon Zend Framework - you might have heard of it - Magento.&lt;/p&gt;

&lt;p&gt;It does look very much like Sylius is still quite a new offering and it can not boast the level of maturity and establishment that Magento has achieved. That said, things move quickly in this industry and who knows what will be top dog in the next five years.&lt;/p&gt;

&lt;p&gt;If you are considering Sylius for your e-commerce website and would like to find a UK Sylius developer to work with then do get in touch with Edmonds Commerce today.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>