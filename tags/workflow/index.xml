<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workflow on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/workflow/</link>
    <description>Recent content in Workflow on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2017 12:39:15 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/workflow/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Phpstorm and Mysql Scratch Files</title>
      <link>https://edmondscommerce.github.io/phpstorm-and-mysql-scratch-files/</link>
      <pubDate>Fri, 20 Jan 2017 12:39:15 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/phpstorm-and-mysql-scratch-files/</guid>
      <description>

&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;Recently I have been writing a number of internal scripts that interface with one of our databases to check a few things.
A lot of the time we use PhpMyAdmin or the standard Mysql command line client where necessary but there is a better
and more reliable way to fire queries to the database.&lt;/p&gt;

&lt;p&gt;Enter PHP Storm.&lt;/p&gt;

&lt;h3 id=&#34;php-storm-and-mysql&#34;&gt;PHP Storm and MySQL&lt;/h3&gt;

&lt;p&gt;PHPStorm has been extended so much over the years that it can be used for fully fledged raw SQL on it&amp;rsquo;s own which can be very handy.
To start off, look in to adding your database source (we use MySql but any data source supported will work too).&lt;/p&gt;

&lt;p&gt;You can also use an SSH tunnel for your remote projects!&lt;/p&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://confluence.jetbrains.com/display/PhpStorm/Databases+and+SQL+Editor+in+PhpStorm#DatabasesandSQLEditorinPhpStorm-Settingupadatabaseconnection&#34;&gt;
Data source Guide
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have your data source set up and configured, you are now ready to start firing queries, open a new scratch file and choose &lt;code&gt;mysql&lt;/code&gt; or which ever data source type you are currently using.
You will now have full auto completion and error highlighting out of the box and a bunch of other useful features.&lt;/p&gt;

&lt;h3 id=&#34;selective-statement-execution&#34;&gt;Selective Statement Execution&lt;/h3&gt;

&lt;p&gt;One useful feature besides the code completion is the ability to only execute certain parts of large SQL statements with inner statements so to ensure the expected results are returned.
See the screen shots for an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://edmondscommerce.github.io/images/phpstorm-mysql-editor.png&#34; alt=&#34;PHP Storm Mysql Editor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When selecting the code block, hit &lt;code&gt;CTRL+Enter&lt;/code&gt; or the shortcut for completion in your settings and you can then cycle through which parts of the query to run with the arrow keys.
As you cycle different parts of the query will have the green border to indicate this.&lt;/p&gt;

&lt;p&gt;This feature was tested in PHP Storm 2017.1 (EAP) but should be present in 2016.*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding Code Sniffer with Magento Standards to PHP Storm</title>
      <link>https://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</link>
      <pubDate>Wed, 24 Jun 2015 09:53:52 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</guid>
      <description>&lt;p&gt;Keeping inline with the Magento coding standards is always good practice when working but it can often be hard to
stay on top of it, this is where PHP Code Sniffer comes in.&lt;/p&gt;

&lt;p&gt;Lets get setup, install PHP Code sniffer if you haven&amp;rsquo;t already
    yum install php-pear-PHP-CodeSniffer.noarch&lt;/p&gt;

&lt;p&gt;Next, a sanity check that every thing is working
    phpcs -v
    #Output
    #Registering sniffs in the PEAR standard&amp;hellip; DONE (27 sniffs registered)
    #Creating file list&amp;hellip; DONE (0 files in queue)&lt;/p&gt;

&lt;p&gt;Now we are ready to go and get our Magento coding standards to use sniffer with, we&amp;rsquo;ll use composer for this
    composer global require &amp;ldquo;magento-ecg/coding-standard&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Installing the package globally is my preferred way of working, the rule set will be used with all my Magento projects
and if I need to update them I only need to update the global composer repository with one command rather than updating
for every single project.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to tell PHP Storm where to find our sniffer file.
In PHP Storm go to &lt;code&gt;settings-&amp;gt;Languages &amp;amp; Frameworks-&amp;gt;PHP-&amp;gt;Code Sniffer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Under the configuration select menu choose local hit the more (elipsis &amp;hellip;) button then choose to browse to your phpcs
path and browse to your installed sniffer file, in my case the file was located in &lt;code&gt;/bin/phpcs&lt;/code&gt;.
With this done, hit the validate button and you should see green.&lt;/p&gt;

&lt;p&gt;Back on the main settings menu, navigate to &lt;code&gt;editor-&amp;gt;inspections-&amp;gt;PHP&lt;/code&gt; and enable the Code Sniffer checkbox if it isn&amp;rsquo;t
already. Choose &lt;code&gt;custom&lt;/code&gt; as the coding standard and hit the ellipsis (&amp;hellip;) button to browse to your intended rule set.&lt;/p&gt;

&lt;p&gt;In our case, we installed the Magento rule set earlier to our global composer repository which is located in the
home directory. &lt;code&gt;/home/&amp;lt;USER&amp;gt;/.composer/vendor/magento-ecg/coding-standard/Ecg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re all set to go, in PHP Storm you can now choose to inspect code in various places such as individual files,
the entire project or individual directories. I prefer to stick to the directories that I can currently working with
such as the module within the namespace.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>