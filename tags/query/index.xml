<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Query on Edmonds Commerce Dev Blog</title>
    <link>http://edmondscommerce.github.io/tags/query/</link>
    <description>Recent content in Query on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Aug 2013 10:54:20 +0000</lastBuildDate>
    <atom:link href="http://edmondscommerce.github.io/tags/query/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL Substring not Returning Anything &#43; Solution</title>
      <link>http://edmondscommerce.github.io/mysql/mysql-substring-not-returning-anything-solution.html</link>
      <pubDate>Tue, 20 Aug 2013 10:54:20 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/mysql/mysql-substring-not-returning-anything-solution.html</guid>
      <description>&lt;p&gt;If you are puzzled why your simple usage of the MySQL SUBSTRING() function is not returning anything this could be your solution.&lt;/p&gt;

&lt;p&gt;The substring function allows you to specify a string (eg a column), the start character and the length. If you are used to languages like PHP then you are probably used to this kind of function regarding 0 as the starting character. In fact this function regards 1 as the starting character. If you specify 0 then you simply won&amp;rsquo;t get any results.&lt;/p&gt;

&lt;p&gt;This does not work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
SELECT SUBSTRING(column, 0, 10) as tenchars

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
SELECT SUBSTRING(column, 1, 10) as tenchars

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Run Multiple MySQL Queries in a Single Function</title>
      <link>http://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function.html</link>
      <pubDate>Wed, 14 Nov 2012 12:45:09 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function.html</guid>
      <description>&lt;p&gt;If you want to be able to run multiple queries in a single function call, for example doing the classic drop table blah; create table blah; then you might like this function.&lt;/p&gt;

&lt;p&gt;The use case is for things like database migration systems which you might copy and paste chunks of SQL including multiple queries from things like phpMyAdmin&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Run multiple queries passed in as a single string&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * This is optimised for copying and pasting from phpMyAdmin&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Handy for things like database migration systems&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @param string $sql  multiple queries terminated with ; and a new line&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;function multiQuery($sql)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $sqls = preg_split(&amp;#39;%;$%m&amp;#39;, trim($sql));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    foreach ($sqls as $q) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (empty($q)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            continue;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        mysql_query($q); //suggest you replace this with your custom query function or if not throw in some extra error checking at least&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Magento Profiler Improved - Aoe_Profiler by Fabrizio Branca</title>
      <link>http://edmondscommerce.github.io/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca.html</link>
      <pubDate>Fri, 17 Aug 2012 15:31:32 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca.html</guid>
      <description>&lt;p&gt;The Magento profiler is useful when you are trying to discover what potential bottlenecks are in place in a specific Magento implementation that are slowing down the performance of the site. Often when doing this kind of analysis you might find that a particular block or extension is responsible for more than 70% of the total page load time. At this point you would choose to either optimise, cache or disable the block altogether to remove this performance bottleneck and improve page speed significantly.&lt;/p&gt;

&lt;p&gt;If you have ever tried to use Magento&amp;rsquo;s built in profiler you will no doubt agree with Fabrizio&amp;rsquo;s comments that, when you have it working, the output is hard to read and not really very useful in terms of seeing what is actually going on.&lt;/p&gt;

&lt;p&gt;To aid with this process and give us a nice colourful and friendly user interface to the Magento profiler, Fabrizio has built a Magento module that extends the default profiler and makes it a much more useful tool.&lt;/p&gt;

&lt;p&gt;You can download the extension from &lt;a href=&#34;https://github.com/fbrnc/Aoe_Profiler&#34; title=&#34;Magento Aoe Profiler on Git Hub&#34; target=&#34;_blank&#34;&gt;git hub here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read the full blog story &lt;a href=&#34;http://www.fabrizio-branca.de/magento-profiler.html&#34; title=&#34;Fabrizio Branch blog&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like some help optimising the performance of your Magento store, feel free to get in touch with Edmonds Commerce today and we can assist in getting the very best performance from your Magento web site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wondering what you&#39;re waiting for? Mytop tells all</title>
      <link>http://edmondscommerce.github.io/mysql/wondering-what-youre-waiting-for-mytop-tells-all.html</link>
      <pubDate>Tue, 14 Aug 2012 16:03:11 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/mysql/wondering-what-youre-waiting-for-mytop-tells-all.html</guid>
      <description>&lt;p&gt;Mytop is a handy utility which shows what queries are currently being executed on your MySQL server - useful for those times when you&amp;rsquo;re not quite sure if it&amp;rsquo;s still on the job&lt;/p&gt;

&lt;p&gt;Running mytop is easy, just run it from the command line and it&amp;rsquo;ll give you a top-like list of any queries currently being executed on the server
You need to tell my top how it should connect to your database. You &lt;em&gt;can&lt;/em&gt; specify everything as parameters on the command, such as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ mytop -u&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;myuser -p&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mypassword --db&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;mydatabase -P&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3306
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But chances are you&amp;rsquo;re not changing your database server &lt;em&gt;that&lt;/em&gt; often.&lt;/p&gt;

&lt;h3&gt;Setting the default parameters for mytop&lt;/h3&gt;

&lt;p&gt;If you want to save yourself the effort of repeatedly typing the same details over and over, just tell mytop what you want it to choose if you don&amp;rsquo;t tell it any parameters&lt;/p&gt;

&lt;p&gt;All you need to do is let mytop know how to connect to your MySQL database in the form of a config file called .mytop in your home folder, with the following contents (replace as necessary):
&lt;blockquote&gt;
&lt;code&gt;
     user=myuser
         pass=
         host=my.host.name
         db=
         delay=5
         port=3306
         socket=
         batchmode=0
         header=1
         color=1
         idle=1
&lt;/code&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;You can add as many or as few of these as you like for easy configuration, like specifying the db flag if you&amp;rsquo;re primarily accessing only one database. I like to leave the password field blank, and use the &amp;ndash;prompt flag to avoid any awkward leaks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Controller Action Return Json (for AJAX, API etc)</title>
      <link>http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc.html</link>
      <pubDate>Wed, 15 Feb 2012 14:15:01 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc.html</guid>
      <description>&lt;p&gt;If you have a controller action that is designed to be accessed by AJAX requests or perhaps as part of a custom API system then you might like this snippet.&lt;/p&gt;

&lt;p&gt;If you are working with the above scenario you likely would like to return pure JSON without any HTML etc. Also serving up the correct content type headers is going to be helpful, its not HTML, its JSON.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    public function searchAction(){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $query = $this-&amp;gt;getRequest()-&amp;gt;getParam(&amp;#39;query&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $json = Mage::getModel(&amp;#39;mymodule/mymodel&amp;#39;)-&amp;gt;getSearchJson($query);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $this-&amp;gt;getResponse()-&amp;gt;setHeader(&amp;#39;Content-type&amp;#39;, &amp;#39;application/json&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $this-&amp;gt;getResponse()-&amp;gt;setBody($json);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>