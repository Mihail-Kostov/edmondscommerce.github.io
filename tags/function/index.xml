<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Function on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/function/</link>
    <description>Recent content in Function on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Mar 2013 15:29:34 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/function/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Restrict Access Using .htaccess File Rules in PHP</title>
      <link>https://edmondscommerce.github.io/php/restrict-access-using-htaccess-file-rules-in-php.html</link>
      <pubDate>Mon, 11 Mar 2013 15:29:34 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/restrict-access-using-htaccess-file-rules-in-php.html</guid>
      <description>&lt;p&gt;The function below is one that we have used a few times to allow certain &amp;ldquo;admin only&amp;rdquo; assets to be accessed or visible on the front end of a website.&lt;/p&gt;

&lt;p&gt;The theory is that the htaccess file in the admin folder will be kept up to date and can therefore be used as the authoritative list of IP addresses that are allowed to access admin assets.&lt;/p&gt;

&lt;p&gt;This function is simple enough and should be useful anywhere that you use htaccess to protect a certain folder and would like to implement the same white list rules in other places without having to maintain a duplicate list of authorised IP addresses.&lt;/p&gt;

&lt;p&gt;The function also uses &lt;a href=&#34;http://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static&#34; title=&#34;PHP.net Static Variables&#34; target=&#34;_blank&#34;&gt;static variables&lt;/a&gt; - a lesser known bit of PHP functionality which can be a nice easy performance optimisation when working with procedural PHP code. If a function will be called many times and will always return the same result in a single request, you can actually cache that result to a static variable and serve that on any subsequent requests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;function isAllowedIp() {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    static $pass = null;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if ($pass !== null) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return $pass;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $pass=false;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $customer_ip = $_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;];    &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $htaccess = file_get_contents(&amp;#39;admin/.htaccess&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    preg_match_all(&amp;#39;%allow from ([0-9.]+)%&amp;#39;, $htaccess, $matches);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    foreach ($matches[1] as $ip) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if ($ip == $customer_ip) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $pass = true; //this is stored statically for perfomance reasons&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            return true;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return false;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bash Terminal Rename Programmatically</title>
      <link>https://edmondscommerce.github.io/bash/bash-terminal-rename-programmatically.html</link>
      <pubDate>Wed, 16 Jan 2013 12:56:15 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/bash-terminal-rename-programmatically.html</guid>
      <description>&lt;p&gt;If you have a load of terminals open you might find it handy to be able to rename the window title on the fly.&lt;/p&gt;

&lt;p&gt;You can do this easily by copying this code into your ~/.bashrc file (or even pasting it into your terminal if you like)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; nameTerminal&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TERM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;xterm&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ansiNrTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0
    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TERM&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;rxvt&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ansiNrTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;61
    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TERM&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;konsole&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ansiNrTab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ansiNrWindow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0
        &lt;span class=&#34;c1&#34;&gt;# Change tab title&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ansiNrTab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s1&#34;&gt;$&amp;#39;\e&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;]&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ansiNrTab&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;$&amp;#39;\a&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# If terminal support separate window title, change window title as well&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ansiNrWindow&lt;/span&gt; -a &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s1&#34;&gt;$&amp;#39;\e&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;]&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ansiNrWindow&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;$&amp;#39;\a&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have pasted this into your ~/.bashrc file you need to launch a new terminal or run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From this point the function is now ready to use and you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;nameTerminal &lt;span class=&#34;s2&#34;&gt;&amp;quot;My Custom Terminal Window Title&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can easily choose the terminal you want based upon the window title.&lt;/p&gt;

&lt;p&gt;Of course this then opens the door to automatically changing the window title based on all kinds of events that you might like, isn&amp;rsquo;t bash scripting fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tip: Parse XML Values in bash e.g. Magento local.xml</title>
      <link>https://edmondscommerce.github.io/bash/tip-parse-xml-values-in-bash-e-g-magento-local-xml.html</link>
      <pubDate>Thu, 23 Aug 2012 11:37:58 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/tip-parse-xml-values-in-bash-e-g-magento-local-xml.html</guid>
      <description>&lt;p&gt;Not the most elegant way to do this, and probably could do with some extra tweaks but it works for our purposes, so presented here in case it fits yours :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# xml_value path/to/file node_key&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; xml_value&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    grep &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;.*&amp;lt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;s/&amp;lt;\!\[CDATA\[//&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;s/\]\]&amp;gt;//&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;s/^.*&amp;lt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;lt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -f2 -d&lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -f1 -d&lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It also strips out the CDATA tags, which we needed to pull the database details from Magento&amp;rsquo;s local.xml&lt;/p&gt;

&lt;p&gt;To use this to get, for example, the database host, you would use the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DB_HOST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;xml_value app/etc/local.xml host&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use this&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Realpath for None Existant Paths</title>
      <link>https://edmondscommerce.github.io/php/php-realpath-for-none-existant-paths.html</link>
      <pubDate>Wed, 08 Aug 2012 13:43:30 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/php-realpath-for-none-existant-paths.html</guid>
      <description>&lt;p&gt;If you want the functionality of realpath, to take a path containing relative elements such as /../ then this little function is exactly what you are looking for.&lt;/p&gt;

&lt;p&gt;PHP&amp;rsquo;s built in realpath function will return false if the file or folder does not exist. Unfortunately when using complex paths then this can make debugging things a little complicated.&lt;/p&gt;

&lt;p&gt;To resolve this simply use this function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;function normalizePath($path) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return array_reduce(explode(&amp;#39;/&amp;#39;, $path), create_function(&amp;#39;$a, $b&amp;#39;, &amp;#39;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;			if($a === 0)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;				$a = &amp;quot;/&amp;quot;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;			if($b === &amp;quot;&amp;quot; || $b === &amp;quot;.&amp;quot;)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;				return $a;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;			if($b === &amp;quot;..&amp;quot;)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;				return dirname($a);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;			return preg_replace(&amp;quot;/\/+/&amp;quot;, &amp;quot;/&amp;quot;, &amp;quot;$a/$b&amp;quot;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;		&amp;#39;), 0);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$path = dirname(__FILE__) . &amp;#39;/../../../folder/&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$path = normalizePath($path);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo $path; // /var/www/vhosts/domain.com/folder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Magento Create Category Method</title>
      <link>https://edmondscommerce.github.io/magento/magento-create-category-method.html</link>
      <pubDate>Fri, 02 Mar 2012 18:30:04 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-create-category-method.html</guid>
      <description>&lt;p&gt;Ideal to drop into a helper, this is a simplified create category method.&lt;/p&gt;

&lt;p&gt;You need to specify the name, store_id and parent category id and can optionally set to active, anchor and change the display mode if you wish.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;public function createCategory($name, $store_id, $parent_id, $active = 0, $anchor = 0, $display_mode=&amp;#39;PRODUCTS&amp;#39;) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $parent = Mage::getModel(&amp;#39;catalog/category&amp;#39;)-&amp;gt;load($parent_id);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if($parent-&amp;gt;getId() != $parent_id){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            Mage::helper(&amp;#39;exception&amp;#39;)-&amp;gt;except(&amp;#39;Failed to load parent category&amp;#39;, &amp;#39;Fatal&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $category = Mage::getModel(&amp;#39;catalog/category&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        /* @var $category Mage_Catalog_Model_Category */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $category&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setStoreId($store_id)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setPath($parent-&amp;gt;getPath())&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setName($name)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setUrlKey($name)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setIsActive($active)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setIsAnchor($anchor)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setDisplayMode($display_mode)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;setAttributeSetId($category-&amp;gt;getDefaultAttributeSetId())&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        ;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $category-&amp;gt;save();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return $category;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Writing Robust Bash Shell Scripts</title>
      <link>https://edmondscommerce.github.io/bash/writing-robust-bash-shell-scripts.html</link>
      <pubDate>Sun, 15 Jan 2012 19:28:02 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/writing-robust-bash-shell-scripts.html</guid>
      <description>&lt;p&gt;Found this great article on writing bash scripts defensively. Glad to say most of the advice we are already following with our bash scripts however there are a couple of new things I intend to roll in on Monday.&lt;/p&gt;

&lt;p&gt;Recommended reading for anyone scripting in Bash.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.davidpashley.com/articles/writing-robust-shell-scripts.html&#34;&gt;http://www.davidpashley.com/articles/writing-robust-shell-scripts.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Very High Speed Batch Update Multiple Rows of a Table in Single Query</title>
      <link>https://edmondscommerce.github.io/mysql/very-high-speed-batch-update-multiple-rows-of-a-table-in-single-query.html</link>
      <pubDate>Thu, 13 Oct 2011 14:00:26 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/mysql/very-high-speed-batch-update-multiple-rows-of-a-table-in-single-query.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you need to update a large number of rows on a single table then your first reaction may be to write a loop that updates one row at a time.&lt;/p&gt;

&lt;p&gt;Of course if the table is large then this can result in a very large number of SQL queries.&lt;/p&gt;

&lt;p&gt;Taking a bit of inspiration from &lt;a href=&#34;http://www.kavoir.com/2009/05/mysql-update-multiple-rows-with-one-single-query.html&#34;&gt;this post&lt;/a&gt; I have put together this simple PHP function that will allow you to update as many rows as you want.&lt;/p&gt;

&lt;p&gt;The trade off is basically memory usage as you build up a big array of row update information preparing for the batch. For this reason you may want to tune the number of rows you update per query.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;function bulkUpdateSingleColumn($table, $id_column, $update_column, array &amp;amp;$idstovals){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $sql = &amp;quot;update $table set $update_column = CASE $id_column &amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        foreach($idstovals as $id=&amp;gt;$val){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $sql .= &amp;quot; WHEN &amp;#39;$id&amp;#39; THEN &amp;#39;$val&amp;#39; \n&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $sql .= &amp;quot; END &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        WHERE $id_column in (&amp;quot; . implode(&amp;#39;,&amp;#39;, array_keys($idstovals)) . &amp;quot;)&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;//debugging info&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        echo &amp;#39;&amp;lt;small&amp;gt;&amp;#39;.$sql.&amp;#39;&amp;lt;/small&amp;gt;&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $idstovals=array();        &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        db_query($sql);       &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        done();        &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Generic XML to CSV Converter</title>
      <link>https://edmondscommerce.github.io/php/generic-xml-to-csv-converter.html</link>
      <pubDate>Wed, 12 Oct 2011 11:02:59 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/generic-xml-to-csv-converter.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
Some times you might have a legacy system that is built around csv or similar and you need to import an XML data source into this system.&lt;/p&gt;

&lt;p&gt;Of course one possibility is to build full XML handling capabilities into the system. Perhaps a more sane solution is to simply convert the XML to CSV so that the legacy system does not have to be touched.&lt;/p&gt;

&lt;p&gt;This little snippet will generally take an XML file and create a CSV file that should be useable. Of course its impossible to guarantee this for every XML file as its such a widely varied format, however in general this should work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$xml = simplexml_load_file(&amp;#39;feed.xml&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$outstream = fopen(&amp;#39;feed.csv&amp;#39;,&amp;#39;w&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$header=false;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($xml as $k=&amp;gt;$details){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if(!$header){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        fputcsv($outstream,array_keys(get_object_vars($details)));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $header=true;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    fputcsv($outstream,get_object_vars($details));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;fclose($outstream);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>