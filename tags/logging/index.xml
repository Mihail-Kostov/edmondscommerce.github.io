<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logging on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/logging/</link>
    <description>Recent content in Logging on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Oct 2016 11:30:16 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/logging/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento Api Logging</title>
      <link>https://edmondscommerce.github.io/magento-api-logging/</link>
      <pubDate>Fri, 28 Oct 2016 11:30:16 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-api-logging/</guid>
      <description>&lt;p&gt;I recently had the need to debug the Magento API and instantly took to Google to see what solutions
already existed. I found a few solutions on
&lt;a href=&#34;http://stackoverflow.com/questions/12084772/magento-api-logs&#34; target=&#34;_blank&#34;&gt;stackoverflow&lt;/a&gt; but these all involved
either changing core files, adding code to index.php or setting up a proxy.&lt;/p&gt;

&lt;p&gt;After looking into this further I realised all the API calls come through a set of controllers in
Mage_Api. In order to log all API calls I simply needed to rewrite the controllers, add my logging
code and then call the original controller. I&amp;rsquo;ve created a module that does just this and added it to
GitHub &lt;a href=&#34;https://github.com/edmondscommerce/Magento-API-Logger&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP API Development Logging and Debugging</title>
      <link>https://edmondscommerce.github.io/php/4145.html</link>
      <pubDate>Thu, 14 Mar 2013 14:53:48 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/4145.html</guid>
      <description>&lt;p&gt;If you are ever working with API integrations, either in or out bound, then it might be useful to set up a simple dumb logging system to assist you with developing and debugging things.&lt;/p&gt;

&lt;p&gt;Here is a really simple snippet to help you along with that.&lt;/p&gt;

&lt;p&gt;It literally takes exactly what it has received and logs it with no messing about. Brilliant!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;raw_input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;php://input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;_POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;_GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;file_put_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;inboundXML.log&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;var_export&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Formatting the output from tail</title>
      <link>https://edmondscommerce.github.io/linux/formatting-the-output-from-tail.html</link>
      <pubDate>Wed, 11 Jan 2012 16:27:41 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/formatting-the-output-from-tail.html</guid>
      <description>&lt;p&gt;If you need to monitor a log file in real time, then using a combination of tail and grep will allow you to watch the important parts of the file. However if the log file spans more than one line then it can quickly become difficult to read.&lt;/p&gt;

&lt;p&gt;By using sed you are able to format the text so it is easier to read like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
tail -f /path/to/file | sed -u G | grep -A 1 searchTerm
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Enable Exception Logging</title>
      <link>https://edmondscommerce.github.io/magento/magento-enable-exception-logging.html</link>
      <pubDate>Mon, 15 Nov 2010 14:55:19 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-enable-exception-logging.html</guid>
      <description>&lt;p&gt;Magento has some great exception logging functionality which is invaluable when trying to figure out why things aren&amp;rsquo;t working.&lt;/p&gt;

&lt;p&gt;However, like a lot of settings in Magento, its tucked away in the configuration and its not always easy to remember how to enable it.&lt;/p&gt;

&lt;p&gt;So here it is:&lt;/p&gt;

&lt;p&gt;System-&amp;gt;Configuration-&amp;gt;Developer-&amp;gt;Log Settings&lt;/p&gt;

&lt;p&gt;Once its enabled, the log files will be created in /var/logs/&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>