<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dump on Edmonds Commerce Dev Blog</title>
    <link>http://example.com/tags/dump/</link>
    <description>Recent content in Dump on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Feb 2011 13:17:04 +0000</lastBuildDate>
    <atom:link href="http://example.com/tags/dump/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento Detailed Exception Dump - Version 3</title>
      <link>http://example.com/magento/magento-detailed-exception-dump-version-3.html</link>
      <pubDate>Tue, 08 Feb 2011 13:17:04 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-detailed-exception-dump-version-3.html</guid>
      <description>&lt;p&gt;Continuing with trying to improve the developer experience with Magento a key element has been my quest for a detailed exception dump that can also handle the various object recursion issues in Magento that can cause all kinds of issues when developing.&lt;/p&gt;

&lt;p&gt;Here is my most up to date version of the detailedExceptionDump method.&lt;/p&gt;

&lt;p&gt;Its designed to go into a customised version of Mage that you should ONLY use on development environemnts. I will leave the particular usage of this method to you, though it would make sense to also modify the printException method as a starting point.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://snipt.net/embed/a72f23e55dd732511c71a0d72260ab8b&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Magento View SQL For Collection</title>
      <link>http://example.com/magento/magento-view-sql-for-collection.html</link>
      <pubDate>Thu, 21 Oct 2010 10:46:19 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-view-sql-for-collection.html</guid>
      <description>&lt;p&gt;If you are working with collections and would like to verify that the actual SQL being used is what you expect it to be then this little tip might prove really handy.&lt;/p&gt;

&lt;p&gt;For any collection you can call the method getSelect(). This retrieves the actual Select object that handles the query.&lt;/p&gt;

&lt;p&gt;If you cast this select object to a string, you get the raw SQL query, so for example the following is pretty handy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;die(var_dump((string)$collection-&amp;gt;getSelect()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This way you can tweak your collection filters etc and check that its doing what you expect it to be doing&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento DB Dump - Just Use the Admin Backup - Not phpMyAdmin</title>
      <link>http://example.com/magento/magento-db-dump-just-use-the-admin-backup-not-phpmyadmin.html</link>
      <pubDate>Wed, 08 Apr 2009 12:32:12 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-db-dump-just-use-the-admin-backup-not-phpmyadmin.html</guid>
      <description>&lt;p&gt;This is as much a note to self as anything else. If you are migrating a Magento store or creating a copy of a store - if you use phpMyAdmin to create the database dump things can all go wrong.&lt;/p&gt;

&lt;p&gt;Instead save yourself the hassle and just use the admin backups functionality. You can then import this using phpMyAdmin without any problems&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>