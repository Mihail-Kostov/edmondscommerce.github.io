<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Images on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/images/</link>
    <description>Recent content in Images on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Aug 2017 10:43:25 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/images/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento Image Optimisation</title>
      <link>https://edmondscommerce.github.io/magento-image-optimisation/</link>
      <pubDate>Fri, 18 Aug 2017 10:43:25 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-image-optimisation/</guid>
      <description>

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;One of our clients recently needed a simple solution for automatically optimising their
&lt;code&gt;media/&lt;/code&gt; and &lt;code&gt;skin/&lt;/code&gt; images. After trying a reputable module we decided it would be
simpler and give us more control if we completed this using &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;cron&lt;/code&gt;, &lt;code&gt;jpegoptim&lt;/code&gt;
and &lt;code&gt;optipng&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/edmondscommerce/405f1e4a684c3b1d0fd75cd690709b01.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Set the path to your &lt;code&gt;media/&lt;/code&gt; and &lt;code&gt;skin/&lt;/code&gt; directories. This is relative to the scripts
location.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;jpegoptim&lt;/code&gt; and &lt;code&gt;optipng&lt;/code&gt;. These will likely be available in your package manager
if you use Linux.&lt;/li&gt;
&lt;li&gt;Backup your current &lt;code&gt;media/&lt;/code&gt; and &lt;code&gt;skin/&lt;/code&gt; directories.&lt;/li&gt;
&lt;li&gt;Set arguments for &lt;code&gt;jpegoptim&lt;/code&gt; and &lt;code&gt;optipng&lt;/code&gt; in the &lt;code&gt;optimiseJpeg()&lt;/code&gt; and &lt;code&gt;optimisePng()&lt;/code&gt;
functions respectively. In the end we were able to get the results we needed using only lossless
compression. This is what the script is currently configured for.&lt;/li&gt;
&lt;li&gt;Make a first pass through all the images so that existing images are compressed. This
can be done by running the script with a large period. I used &lt;code&gt;5256000&lt;/code&gt; for a period
of 10 years.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;bash img_optimiser.bash &lt;span class=&#34;m&#34;&gt;5256000&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&amp;gt;&amp;gt; img_optimiser.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Setup &lt;code&gt;cron&lt;/code&gt; to run the script regularly and optimise any new images as they&amp;rsquo;re
added. You&amp;rsquo;ll need to set the period (in minutes) to match the period of your &lt;code&gt;cron&lt;/code&gt;
job. I&amp;rsquo;m running the script every hour with a period of 60.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; * * * * bash /path/to/img_optimiser.bash &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; 2&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &amp;gt;&amp;gt; /path/to/img_optimiser.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; allows you to log &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; into one file from cron.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Live Images on Staging Without Absolute URLs (but a bit of JS)</title>
      <link>https://edmondscommerce.github.io/javascript/using-live-images-on-staging-without-absolute-urls-but-a-bit-of-js.html</link>
      <pubDate>Tue, 27 Mar 2012 11:05:49 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/javascript/using-live-images-on-staging-without-absolute-urls-but-a-bit-of-js.html</guid>
      <description>&lt;p&gt;If you have a staging copy of your site anywhere then you might not bother copying over your entire catalogue of product images etc.&lt;/p&gt;

&lt;p&gt;You might decide to drop in absolute URLs for those images so that they are pulled from live. However you really don&amp;rsquo;t want absolute URLs in your code and you certainly don&amp;rsquo;t want that to go live because it just adds unnecessary bloat.&lt;/p&gt;

&lt;p&gt;A nice trick you can do here is make a change to your staging site as follows. Of course ensure this change doesn&amp;rsquo;t go live, but it should be just one file so that&amp;rsquo;s easy to handle.&lt;/p&gt;

&lt;p&gt;(Note this assumes you already have jQuery available on your page)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ready&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;new_src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://www.LIVEDOMAIN.co.uk/&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;new_src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;    
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don&amp;rsquo;t forget to change LIVEDOMAIN to be your real live domain&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Dataflow Images Not Working &#43; Solution</title>
      <link>https://edmondscommerce.github.io/magento/magento-dataflow-images-not-working-solution.html</link>
      <pubDate>Thu, 17 Feb 2011 16:03:49 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-dataflow-images-not-working-solution.html</guid>
      <description>&lt;p&gt;If you are struggling to understand why Magento is not finding images that are definitely there, the problem may well be that you are not prefixing your image with a slash, i.e for a new image we would put:&lt;/p&gt;

&lt;p&gt;/image.jpg&lt;/p&gt;

&lt;p&gt;and the image would be in&lt;/p&gt;

&lt;p&gt;media/import/image.jpg&lt;/p&gt;

&lt;p&gt;Unfortunately whoever wrote the Dataflow product importer though it would be a good idea to silently capture all exceptions on image imports which removes any useful error messages that might occur (such as no image at media/importimage.jpg)&lt;/p&gt;

&lt;p&gt;If you would prefer to fix this, you can override Mage_Catalog_Model_Convert_Adapter_Product&lt;/p&gt;

&lt;p&gt;Copy the saveRow() method into your overriding class and then change this bit&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;foreach ($imageData as $file =&amp;gt; $fields) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            try {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $filepath = Mage::getBaseDir(&amp;#39;media&amp;#39;) . DS . &amp;#39;import&amp;#39; . trim($file);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $product-&amp;gt;addImageToMediaGallery($filepath, $fields);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            } catch (Exception $e) {}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To something like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;foreach ($imageData as $file =&amp;gt; $fields) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            //try {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $filepath = Mage::getBaseDir(&amp;#39;media&amp;#39;) . DS . &amp;#39;import&amp;#39; . trim($file);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $product-&amp;gt;addImageToMediaGallery($filepath, $fields);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;           //} catch (Exception $e) {}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>