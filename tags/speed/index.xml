<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Speed on Edmonds Commerce Dev Blog</title>
    <link>http://example.com/tags/speed/</link>
    <description>Recent content in Speed on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Dec 2012 12:21:44 +0000</lastBuildDate>
    <atom:link href="http://example.com/tags/speed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento Block Caching Cache Key Helper Method - Generate Safe Unique Cache Keys</title>
      <link>http://example.com/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys.html</link>
      <pubDate>Tue, 04 Dec 2012 12:21:44 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys.html</guid>
      <description>&lt;p&gt;If you do any work at all on Magento performance optimisation with a view to making pages load faster then you must have come across block caching. To understand block caching you need to first of all understand that a Magento page is actually made up of a lot of nested chunks called blocks.&lt;/p&gt;

&lt;p&gt;Blocks can have their HTML generated dynamically every time though it is also possible to make Magento cache the block HTML output so that it loads a LOT faster, especially with heavy and slow blocks such as best sellers etc.&lt;/p&gt;

&lt;p&gt;When setting up block caching, you need to specify a cache key. If your cache key is not unique enough then there is a risk that you will display the wrong cache for a particular scenario.&lt;/p&gt;

&lt;p&gt;For this reason I created a block caching helper with this method that can generate a very unique cache key based on the current block usage.
/app/code/local/EdmondsCommerce/Helper/Data.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * Generate a nice unique block cache key&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @param Mage_Core_Block_Abstract $block&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @return string&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function ecCacheKey(Mage_Core_Block_Abstract $block){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $class = get_class($block);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $template = $block-&amp;gt;getTemplateFile();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $md5 = md5(var_export($block-&amp;gt;getData(), true));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $params = trim(implode(&amp;quot;,&amp;quot;, $block-&amp;gt;getRequest()-&amp;gt;getParams()), &amp;#39;,&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $category=($block-&amp;gt;getCurrentCategory())?$block-&amp;gt;getCurrentCategory()-&amp;gt;getName():&amp;#39;no-category&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $store_id = Mage::app()-&amp;gt;getStore()-&amp;gt;getId();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return &amp;#39;edmondscommerce-&amp;#39;. $params . &amp;#39;-&amp;#39;. $category . &amp;#39;-&amp;#39; . $store_id . &amp;#39;-&amp;#39; . $class.&amp;#39;-&amp;#39;.$template.&amp;#39;-&amp;#39;.$md5;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You would use this in the following way:&lt;/p&gt;

&lt;p&gt;In a block class, set up the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    public function _construct(){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        parent::_construct();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $this-&amp;gt;addData(array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            &amp;#39;cache_lifetime&amp;#39; =&amp;gt; 999999999,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            &amp;#39;cache_tags&amp;#39; =&amp;gt; array(Mage_Catalog_Model_Product::CACHE_TAG, Mage_Catalog_Model_Category::CACHE_TAG),&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            &amp;#39;cache_key&amp;#39; =&amp;gt; Mage::helper(&amp;#39;blockcaching&amp;#39;)-&amp;gt;ecCacheKey($this)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        ));&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Magento Profiler Improved - Aoe_Profiler by Fabrizio Branca</title>
      <link>http://example.com/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca.html</link>
      <pubDate>Fri, 17 Aug 2012 15:31:32 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca.html</guid>
      <description>&lt;p&gt;The Magento profiler is useful when you are trying to discover what potential bottlenecks are in place in a specific Magento implementation that are slowing down the performance of the site. Often when doing this kind of analysis you might find that a particular block or extension is responsible for more than 70% of the total page load time. At this point you would choose to either optimise, cache or disable the block altogether to remove this performance bottleneck and improve page speed significantly.&lt;/p&gt;

&lt;p&gt;If you have ever tried to use Magento&amp;rsquo;s built in profiler you will no doubt agree with Fabrizio&amp;rsquo;s comments that, when you have it working, the output is hard to read and not really very useful in terms of seeing what is actually going on.&lt;/p&gt;

&lt;p&gt;To aid with this process and give us a nice colourful and friendly user interface to the Magento profiler, Fabrizio has built a Magento module that extends the default profiler and makes it a much more useful tool.&lt;/p&gt;

&lt;p&gt;You can download the extension from &lt;a href=&#34;https://github.com/fbrnc/Aoe_Profiler&#34; title=&#34;Magento Aoe Profiler on Git Hub&#34; target=&#34;_blank&#34;&gt;git hub here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read the full blog story &lt;a href=&#34;http://www.fabrizio-branca.de/magento-profiler.html&#34; title=&#34;Fabrizio Branch blog&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like some help optimising the performance of your Magento store, feel free to get in touch with Edmonds Commerce today and we can assist in getting the very best performance from your Magento web site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento admin backend slow (quick speed tip)</title>
      <link>http://example.com/magento/magento-admin-backend-slow-quick-speed-tip.html</link>
      <pubDate>Mon, 14 Nov 2011 12:48:00 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-admin-backend-slow-quick-speed-tip.html</guid>
      <description>&lt;p&gt;One of the things that can catch you out if you have a paranoid server admin is that various magento extensions will contact external servers (such as SagePay or Mailchimp).&lt;/p&gt;

&lt;p&gt;If the server admin has blocked outbound web traffic (to avoid DDoS attacks and other malicious traffic), these extensions will slow you down at every step.&lt;/p&gt;

&lt;p&gt;Simple answer, if you&amp;rsquo;re running magento, ensure you have outbound traffic enabled.  Also, don&amp;rsquo;t assume that just because you can use lynx, apt-get et al at the command prompt that you can as the web server user.  IPTables and pf both have checks for outbound user, so be sure to test as www-user or apache.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Hosting Optimisation Tips</title>
      <link>http://example.com/magento/magento-hosting-optimisation-tips.html</link>
      <pubDate>Mon, 19 Sep 2011 17:23:44 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-hosting-optimisation-tips.html</guid>
      <description>&lt;p&gt;If you are looking to gain the most out of your Magento hosting and to optimise your Magento hosting stack, here are a few top tips that you can try.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1. Ensure Caching is Enabled&lt;/b&gt;
It may sound obvious, but if you do not have caching enabled then the performance of your Magento store is going to suffer massively.&lt;/p&gt;

&lt;p&gt;Generally whilst developing, caching will need to be at least partially disabled to ensure that changes are reflected. Unfortunately some times when a site goes live, enabling caching is a forgotten step.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2. Upgrade your Magento&lt;/b&gt;
More recent versions of Magento offer much better performance than earlier versions. If you are running a Magento version older than 1.4 then you should definitely look to upgrade as soon as possible as there are vast improvements to be made in terms of performance.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;3. Disable or Improve Bad Extensions&lt;/b&gt;
Some custom modules or forum inspired template hacks can be functionally fine but absolutely terrible in terms of performance. Fancy a best sellers list? Lets calculate the top ten products on every single page load and display the results in the right hand column!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;4. Use Block Caching&lt;/b&gt;
In order to deal with the above scenario, it is fairly easy to use block caching - something built into Magento as standard - to cache the html output of a block and serve from the cache rather than doing lots of heavy processing on an unnecessarily regular basis.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;5. Move Hosts&lt;/b&gt;
Some times you just have to accept  that your hardware or hosting is no up to scratch. A well optimised LAMP stack can out perform an unoptimised standard stack by a surprising degree. Combine that with some choice extensions such as opcode caching etc and the performance difference can be really quite significant - and without any hardware upgrades. If you are running a VPS or dedicated server then it is possible to optimise the stack yourselves, or hire an agency like us to help you with this. Alternatively you can try to move hosts to a more specialist Magento hosting company that will provide this service as standard.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Optimised Hosting</title>
      <link>http://example.com/magento/magento-optimised-hosting.html</link>
      <pubDate>Thu, 15 Sep 2011 07:17:03 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-optimised-hosting.html</guid>
      <description>&lt;p&gt;Edmonds Commerce have been with Magento since the beginning. If you would like us to optimise your VPS or dedicated server for Magento then please &lt;a href=&#34;http://example.com/contact-us/&#34;&gt;get in touch today&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back then the speed of Magento was one of its main drawbacks. Since that time, the code has improved a lot and things have generally got a lot better but one thing that has become clear over the years is that Magento really does require a well optimised hosting platform to perform the best. Conversely, hosting Magento on a badly configured or none optimised hosting stack will have a really detrimental effect on the performance of the store.&lt;/p&gt;

&lt;p&gt;If you are using shared hosting then you are a bit stuck. Magento optimised shared hosting is available and there are some good companies out there that we would be happy to recommend for you. If your current store is not performing well though and you are on shared hosting then the likelihood is that the only solution is to either upgrade to some kind of dedicated or virtual private server, commonly shortened to VPS.&lt;/p&gt;

&lt;p&gt;A VPS or VDS as they are some times called is what is known as a virtual machine. It is a full instance of an operating system (Linux) running on hardware that is actually running multiple virtual machines from one real server. In some respects this is like shared hosting, however the difference is that on a VPS you have a fully dedicated, private and customisable operating system that can be configured and optimised as required.&lt;/p&gt;

&lt;p&gt;Of course if you have a real dedicated server then you have the same benefits of a VPS and also enjoy dedicated hardware.&lt;/p&gt;

&lt;p&gt;Either way, as soon as you have a dedicated operating system you are free to configure your database, web server and PHP however you wish. Generally though this is too technical for most people. This is where we come in.&lt;/p&gt;

&lt;p&gt;We are happy to provide for you a full VPS or dedicated server Magento optimisation service. Our Magento hosting optimisation service will ensure you are getting the best out of your current hosting package. It means that you are not required to move hosts if you are generally happy them, but you can be assured that you are running on a highly optimised Magento stack.&lt;/p&gt;

&lt;p&gt;If that sounds interesting and you would like to discuss this in more detail, simply &lt;a href=&#34;http://example.com/contact-us/&#34;&gt;get in touch today&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Block Caching - Get More Performance Easily in Magento</title>
      <link>http://example.com/magento/magento-block-caching-get-more-performance-easily-in-magento.html</link>
      <pubDate>Tue, 23 Nov 2010 14:22:22 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-block-caching-get-more-performance-easily-in-magento.html</guid>
      <description>&lt;p&gt;If you dig a little deeper into Magento you will notice that there is a fully featured caching system lurking in there. However, as standard, it is quite under utilized.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure that the primary reason for this is that caching dynamic systems can cause admin user confusion and generally make things trickier. However all the tools are there waiting to be used if you want to push things a bit further.&lt;/p&gt;

&lt;p&gt;Pretty much any Magento block can be cached - its great for things like a &amp;ldquo;best sellers&amp;rdquo; block or anything else that requires some processing and doesn&amp;rsquo;t really need to be up to the minute accurate for every page request.&lt;/p&gt;

&lt;p&gt;To use block caching for a particular block, you just need to set three properties or methods. Note Magento&amp;rsquo;s use of Magic methods allows us to mix and match properties and methods easily!&lt;/p&gt;

&lt;p&gt;Check this out:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://snipt.net/embed/6188b31b89656245850183eaed4094ab&#34;&gt;&lt;/script&gt;

&lt;p&gt;We get asked a lot about optimising Magento performance and the first bit of advice is always to upgrade to the latest version. After that there are all kinds of things that can be done and implementing block caching like this is just one of them.&lt;/p&gt;

&lt;p&gt;If you want to discuss optimising your Magento store for more speed and performance without necessarily having to upgrade your hosting environment, get in touch with Edmonds Commerce today!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slow Truncating InnoDB Tables that have Foreign Keys set on them</title>
      <link>http://example.com/mysql/slow-truncating-innodb-tables-that-have-foreign-keys-set-on-them.html</link>
      <pubDate>Tue, 10 Aug 2010 17:12:34 +0000</pubDate>
      
      <guid>http://example.com/mysql/slow-truncating-innodb-tables-that-have-foreign-keys-set-on-them.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
One of the advantages of using InnoDB as your storage engine in MySQL is that you can create a database structure that will automatically keep itself clean and tidy, by having deletes cascade through your tables as soon as you delete the main entity.&lt;/p&gt;

&lt;p&gt;However, if you need to empty a large table, you will find that this process is really slow.&lt;/p&gt;

&lt;p&gt;The solution is to first of all truncate all of the tables that have foreign key relations set on the main table and then only empty the main table once those child tables are emptied.&lt;/p&gt;

&lt;p&gt;Yes this defeats the object a bit, but if you want speed, this is the solution. It is incredibly fast in comparison, and the end result is the same.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speeding Up osCommerce</title>
      <link>http://example.com/oscommerce/speeding-up-oscommerce.html</link>
      <pubDate>Wed, 06 Feb 2008 17:14:24 +0000</pubDate>
      
      <guid>http://example.com/oscommerce/speeding-up-oscommerce.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
osCommerce is a great ecommerce package which is hugely popular due to its full feature set, massive options for customisation and a huge support base. However if you want to run a large catalogue, or have plenty of visitors then speed can become an issue. There are  a &lt;a href=&#34;http://www.oscommerceblog.com/index.php/2007/01/08/oscommerce-performance-and-speed-issues-resolution/&#34; target=&#34;_blank&#34;&gt;number of things&lt;/a&gt; you should look at to increase the overall speed of your osCommerce store&lt;/p&gt;

&lt;p&gt;The problem is in the way that osCommerce has evolved, and also in the way that they have tried to make the code base as portable as possible. This means that as standard, the software may be doing quite a few processes that are not really necessary for your store.&lt;/p&gt;

&lt;p&gt;One of the biggest culprits of page load time problems, especially on sites with large catalogues is the split_page_results class.  In standard trim, the class performs the most complex query of your catalogue page twice - once to find the number of rows and a second time to actually grab the results. On a small site you may not notice this, but on a larger site this query can represent a large portion of the total page load time.&lt;/p&gt;

&lt;p&gt;The answer is to modify the class so that it uses the SQL_CALC_FOUND_ROWS functionality to simultaneously perform the query and calculate the total number of rows. Then to get this number of rows, you only have to select FOUND_ROWS() instead of performing the whole query again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$count_query = str_replace(&amp;#39;select&amp;#39;, &amp;#39;select SQL_CALC_FOUND_ROWS &amp;#39;, $this-&amp;gt;sql_query);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if(!isset($this-&amp;gt;current_page_number)){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$this-&amp;gt;current_page_number = 1;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$current_limit = &amp;quot; limit &amp;quot; . ((($this-&amp;gt;current_page_number -1) * $this-&amp;gt;number_of_rows_per_page)) .&amp;#39;, &amp;#39; . $this-&amp;gt;number_of_rows_per_page;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$this-&amp;gt;sql_query = $count_query . $current_limit;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$this-&amp;gt;sql_query = tep_db_query($this-&amp;gt;sql_query);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$count = tep_db_query(&amp;quot;select FOUND_ROWS()&amp;quot;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$this-&amp;gt;number_of_rows = mysql_result($count, 0);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>