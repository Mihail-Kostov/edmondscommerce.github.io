<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Auth on Edmonds Commerce Dev Blog</title>
    <link>http://example.com/tags/auth/</link>
    <description>Recent content in Auth on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Feb 2012 12:43:44 +0000</lastBuildDate>
    <atom:link href="http://example.com/tags/auth/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Zend Framework Rest HTTP Basic Authentication</title>
      <link>http://example.com/zend-framework/zend-framework-rest-http-basic-authentication.html</link>
      <pubDate>Tue, 21 Feb 2012 12:43:44 +0000</pubDate>
      
      <guid>http://example.com/zend-framework/zend-framework-rest-http-basic-authentication.html</guid>
      <description>&lt;p&gt;I have recently been working on a Magento project that required a custom API integration with Zen Desk.&lt;/p&gt;

&lt;p&gt;Magento is based on Zend Framework which is nice because it means we can use the Zend_Rest_Client object to handle the API integration which provides a nice layer of abstraction and sorts out a lot of the heavy lifting required.&lt;/p&gt;

&lt;p&gt;However I came across a terminal issue trying to get it working properly with HTTP Basic Authentication which the Zen Desk API uses.&lt;/p&gt;

&lt;p&gt;I found some instructions which recommended creating a Zend_Uri_Http object and then setting the username and password against this. However as Zen Desk uses the email address as the username component, this failed completely.&lt;/p&gt;

&lt;p&gt;In the end the solution I found was to grab the static HTTP client object that the REST client is built upon and call the public setAuth method on this. This way the Authorisation header is correctly created, encoded and appended to the headers.&lt;/p&gt;

&lt;p&gt;Logically it feels like a dirty way to do things, grabbing the HTTP client statically to do this, but it works and I can&amp;rsquo;t see how else you would do it.&lt;/p&gt;

&lt;p&gt;For info here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @return Zend_Rest_Client &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    protected function getClient() {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (null === $this-&amp;gt;_client) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $url = $this-&amp;gt;getApiUrl();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $uri = Zend_Uri_Http::fromString($url);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $this-&amp;gt;_client = new Zend_Rest_Client($uri);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            Zend_Service_Abstract::getHttpClient()-&amp;gt;setAuth($this-&amp;gt;getUsername(),$this-&amp;gt;getPassword());&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return $this-&amp;gt;_client;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Yii Setting up Authorisation - the Missing Manual</title>
      <link>http://example.com/php/yii-setting-up-authorisation-the-missing-manual.html</link>
      <pubDate>Wed, 01 Feb 2012 17:25:50 +0000</pubDate>
      
      <guid>http://example.com/php/yii-setting-up-authorisation-the-missing-manual.html</guid>
      <description>&lt;p&gt;Reading the generally very clear and concise Yii documentation you can quickly get started with the framework.&lt;/p&gt;

&lt;p&gt;However one issue that I struggled to be clear on is setting up the database driven authorisation system.&lt;/p&gt;

&lt;p&gt;I recommend reading &lt;a href=&#34;http://danaluther.blogspot.com/2010/03/yii-authentication-via-database.html&#34;&gt;this blog post&lt;/a&gt; which finally helped me to understand wth I was supposed to do. The official documentation is &lt;a href=&#34;http://www.yiiframework.com/doc/guide/1.1/en/topics.auth#defining-authorization-hierarchy&#34;&gt;here&lt;/a&gt; which you should also read.&lt;/p&gt;

&lt;p&gt;There are a few key points that are not really clear but are important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. You need to create the tables.
&lt;/strong&gt;
There is a file: yii/framework/web/auth/schema-mysql.sql&lt;/p&gt;

&lt;p&gt;You need to run this on your database to build the necessary tables#&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Creating the rules - use the Yii Shell
&lt;/strong&gt;
You will see examples of PHP code that defines rules etc. You may wonder where the hell you are supposed to put this code and also is it really a good idea to run this kind of code on every page load, seems odd.&lt;/p&gt;

&lt;p&gt;Well the answer is you are only meant to run it once and you can either make a PHP script that runs it or even nicer is to use the Yii interactive shell and paste the lines in one at a time to execute them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using the Yii Shell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to your web root on the command line (I&amp;rsquo;m using Linux, good luck if you aren&amp;rsquo;t)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
cd ~/Projects/yii-projects/public

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the yiic tool from the web root with the shell flag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
protected/yiic shell

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now have an interactive PHP shell with the Yii framework available. You can create models, crud etc as you might have done in Gii, but you can also run PHP code directly, including working with Yii objects - such as the authManager&lt;/p&gt;

&lt;p&gt;Try this:&lt;/p&gt;

&lt;p&gt;Paste this line into your Yii shell and hit return&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$auth=Yii:app()-&amp;gt;authManager;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then this line and hit return&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var_dump($auth);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a var dump of the CDbAuthManager object&lt;/p&gt;

&lt;p&gt;Now when you see examples such as this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$auth=Yii::app()-&amp;gt;authManager;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$auth-&amp;gt;createOperation(&amp;#39;createPost&amp;#39;,&amp;#39;create a post&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$auth-&amp;gt;createOperation(&amp;#39;readPost&amp;#39;,&amp;#39;read a post&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$auth-&amp;gt;createOperation(&amp;#39;updatePost&amp;#39;,&amp;#39;update a post&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$auth-&amp;gt;createOperation(&amp;#39;deletePost&amp;#39;,&amp;#39;delete a post&amp;#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You realise that this is something you can do ONCE to set up these roles, and a great way to do that is via the Yii Shell.&lt;/p&gt;

&lt;p&gt;Have fun ;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>