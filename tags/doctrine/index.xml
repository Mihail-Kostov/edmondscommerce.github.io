<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Doctrine on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/doctrine/</link>
    <description>Recent content in Doctrine on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Sep 2017 09:10:44 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/doctrine/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Doctrine Orm - An Introduction and Then a New Idea</title>
      <link>https://edmondscommerce.github.io/doctrine-orm---an-introduction-and-then-a-new-idea/</link>
      <pubDate>Thu, 14 Sep 2017 09:10:44 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/doctrine-orm---an-introduction-and-then-a-new-idea/</guid>
      <description>

&lt;h2 id=&#34;what-is-doctrine-orm&#34;&gt;What is Doctrine ORM&lt;/h2&gt;

&lt;p&gt;Doctrine is one of the most popular ORM systems for PHP. It is written as a fully standalone library though is most famously used as the ORM that is bundled with a standard Symfony project.&lt;/p&gt;

&lt;p&gt;Read the docs here&lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/getting-started.html#what-is-doctrine&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doctrine ORM is only one of the &lt;a href=&#34;http://www.doctrine-project.org/projects.html&#34; target=&#34;_blank&#34;&gt;projects&lt;/a&gt; projects that Doctrine has built, however it does build upon all of the other projects.&lt;/p&gt;

&lt;h2 id=&#34;what-is-an-orm&#34;&gt;What is an ORM&lt;/h2&gt;

&lt;p&gt;An ORM, or Object Relational Mapper, attempts to allow developers write code and work with objects and then have the persistance and relation of those objects handled behind the scenes, thereby allowing the developer to focus on the domain issues and not in hand crafting a large amount of SQL schema and query logic.&lt;/p&gt;

&lt;p&gt;This becomes especially useful as a project progresses and things are added or refactored. The ORM can ultimately allow the developer to focus on the code and then the schema and query logic can be updated as you go, generally with something called database migrations. The benefit of not having to manually refactor large amounts of SQL logic is definitely not to be sniffed at.&lt;/p&gt;

&lt;p&gt;Generally when working with Doctrine entities, the code is very much plain vanilla PHP. I prefer to keep the Doctrine entities as basic as possible, purely focussed on data access &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_access_object&#34; target=&#34;_blank&#34;&gt;data access&lt;/a&gt;, with any extra logic then being handled in other classes. Again this aids with refactoring and comprehension and sticks more closely to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34; target=&#34;_blank&#34;&gt;single responsibility principle&lt;/a&gt; single responsibility principle.&lt;/p&gt;

&lt;h2 id=&#34;doctrine-metadata&#34;&gt;Doctrine Metadata&lt;/h2&gt;

&lt;p&gt;The crux of Doctrine&amp;rsquo;s work hinges around the management and utlisation of meta data which describes exactly how entities are structured and related to each other and how they should be stored and represented in the database.&lt;/p&gt;

&lt;p&gt;There are three main ways people tend to manage this meta data, XML, Yaml and PHP Annotations. They all have their pros and cons, though I think it would be fair to say that the PHP Annotations approach is probably the most popular.&lt;/p&gt;

&lt;p&gt;You can read all about the &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/metadata-drivers.html#core-metadata-drivers&#34; target=&#34;_blank&#34;&gt;meta data drivers on Doctrines documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;new-idea&#34;&gt;New Idea&lt;/h2&gt;

&lt;p&gt;In addition to the traditional three drivers of XML, Yaml and PHP Annotations there is a &lt;a href=&#34;https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.php&#34; target=&#34;_blank&#34;&gt;Static PHP Driver&lt;/a&gt; which is documented &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/php-mapping.html#static-function&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this is a perfect compromise, it keeps things in pure PHP but also in the Entity classes.&lt;/p&gt;

&lt;p&gt;To explore this idea I have developed a small repo that utilises this driver and present a possible way it can be used to power a highly trait driven way of composing Doctrine entities.&lt;/p&gt;

&lt;p&gt;Rather than repeat myself, I&amp;rsquo;ll simply link you through to the project &lt;a href=&#34;https://github.com/edmondscommerce/doctrine-static-meta&#34; target=&#34;_blank&#34;&gt;Doctrine Static Meta&lt;/a&gt;, also available on &lt;a href=&#34;https://packagist.org/packages/edmondscommerce/doctrine-static-meta&#34; target=&#34;_blank&#34;&gt;packagist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Doctrine Create New Entity From Legacy Database Shell Script</title>
      <link>https://edmondscommerce.github.io/doctrine-create-new-entity-from-legacy-database-shell-script/</link>
      <pubDate>Thu, 18 Aug 2016 17:09:53 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/doctrine-create-new-entity-from-legacy-database-shell-script/</guid>
      <description>&lt;p&gt;Here is a nice little script I have just written to help me with migration of a legacy application onto a Symfony based architecture, including Doctrine for entities.&lt;/p&gt;

&lt;p&gt;In this scenario I have created a new database and am importing tables across from the legacy database as I bring them into the application.&lt;/p&gt;

&lt;p&gt;The process is a little tricky and unfortunately I figured it out, then went on holiday and came back having totally forgotten how to do it. So I wrote a nice script to document and automate the process for me.&lt;/p&gt;

&lt;p&gt;Here is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt; dirname &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BASH_SOURCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[0]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -u
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o pipefail
&lt;span class=&#34;nv&#34;&gt;standardIFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$IFS&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;$&amp;#39;\n\t&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===========================================&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;hostname&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===========================================&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#Usage&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; &amp;lt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Usage:&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;./&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; [tableToCreateEntityFrom] {bundle - defaults to AppBundle}&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;    &amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; 1
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#Parameters&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;bundle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;AppBundle&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;camelCaseEntityName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/(^|_)([a-z])/\U\2/g&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;newDb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;NEW_DB_NAME_HERE

&lt;span class=&#34;nv&#34;&gt;oldDb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;OLD_DB_NAME_HERE


mysql &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt; -e &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;

    drop table &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; exists &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    create table &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt; like &lt;span class=&#34;nv&#34;&gt;$oldDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    insert into &lt;span class=&#34;nv&#34;&gt;$newDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; * from &lt;span class=&#34;nv&#34;&gt;$oldDb&lt;/span&gt;.&lt;span class=&#34;nv&#34;&gt;$tableToCreateEntityFrom&lt;/span&gt; ORDER BY
    &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;   SELECT COLUMN_NAME
        FROM information_schema.COLUMNS
        WHERE &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TABLE_SCHEMA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$oldDb&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
          AND &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TABLE_NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$tableToCreateEntityFrom&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
          AND &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;COLUMN_KEY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;PRI&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; DESC limit 0,500&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;/../bin/console doctrine:mapping:import &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bundle&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; annotation --filter&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;^&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$camelCaseEntityName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\$&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;/../bin/console doctrine:generate:entities &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$bundle&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$camelCaseEntityName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; --no-backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The script will take a single parameter which is the table name. If not importing to AppBundle, you can also specify a bundle name.&lt;/p&gt;

&lt;p&gt;It will then create the Upper Camel Case version of the table name (as used by Doctrine).&lt;/p&gt;

&lt;p&gt;Then it runs some SQL which will drop and recreate the table and then import the most recent 500 rows from that table as defined by the primary key.&lt;/p&gt;

&lt;p&gt;Finally, we do a couple of doctrine commands to create the annotation class and then create the getters and setters. Notice the use of regex to prevent bringing in anything other than an exact match on the table name.&lt;/p&gt;

&lt;p&gt;I think this is pretty slick and makes me love Doctrine that little bit more, hope you find it useful too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Symfony2 Twig  &#39;DateTime could not be converted to string&#39;</title>
      <link>https://edmondscommerce.github.io/symfony2/symfony2-twig-datetime-could-not-be-converted-to-string.html</link>
      <pubDate>Mon, 09 Dec 2013 18:43:03 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/symfony2/symfony2-twig-datetime-could-not-be-converted-to-string.html</guid>
      <description>&lt;p&gt;I just hit an interesting issue with a nice and easy solution once you understand what is going on.
On a current project I making heavy use of the &lt;a href=&#34;https://github.com/sensiolabs/SensioGeneratorBundle&#34; target=&#34;_blank&#34;&gt;SensioGeneratorBundle&lt;/a&gt; to generate CRUD etc. So far its working really nicely.&lt;/p&gt;

&lt;p&gt;However I started to see an issue with one of my entities that Twig was not handling a DateTime column properly but others were being handled fine.&lt;/p&gt;

&lt;p&gt;Looking through the Twig template I noticed this:&lt;/p&gt;

&lt;p&gt;{% codeblock lang:html+jinja]
{% raw]
  {%- for field, metadata in fields]
            {%- if loop.first and (&amp;lsquo;show&amp;rsquo; in actions)]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            &amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;{{ &amp;quot;{{ path(&#39;&amp;quot; ~ route_name_prefix ~ &amp;quot;_show&#39;, { &#39;id&#39;: entity.id }) }}&amp;quot; }}&amp;quot;&amp;gt;{{ &#39;{{ entity.&#39; ~ field|replace({&#39;_&#39;: &#39;&#39;}) ~ &#39; }}&#39; }}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;

        {%- elseif metadata.type in [&#39;date&#39;, &#39;datetime&#39;]]

            &amp;lt;td&amp;gt;{{ &#39;{% if entity.&#39; ~ field|replace({&#39;_&#39;: &#39;&#39;}) ~ &#39;]{{ entity.&#39; ~ field|replace({&#39;_&#39;: &#39;&#39;}) ~ &#39;|date(\&#39;Y-m-d H:i:s\&#39;) }}{% endif]&#39; }}&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw]
{% endcodeblock]&lt;/p&gt;

&lt;p&gt;What this means is that the first entity will never have the DateTime handling. Of course you probably don&amp;rsquo;t want a DateTime to be the first entity so I think this is reasonable.&lt;/p&gt;

&lt;p&gt;To fix this, all you need to do is make sure that your Doctrine class does not declare the first property as a DateTime.&lt;/p&gt;

&lt;p&gt;If you have a primary key or unique reference property then try to get this as the first declared property in your Doctrine entity class and then rebuild the CRUD and the problem goes away.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>