<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/linux/</link>
    <description>Recent content in Linux on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jul 2016 13:01:02 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ssh Copy Id As Another User in Bash</title>
      <link>https://edmondscommerce.github.io/ssh-copy-id-as-another-user-in-bash/</link>
      <pubDate>Wed, 27 Jul 2016 13:01:02 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/ssh-copy-id-as-another-user-in-bash/</guid>
      <description>&lt;p&gt;Here is a nice BASH one liner that will allow you as (presumably root) copy another users SSH keys up to a server.&lt;/p&gt;

&lt;p&gt;This is ideal for setting up multiple users on a machine as the root user in bulk as part of a batch process.&lt;/p&gt;

&lt;p&gt;Ideally you will have already added the server to your ssh_config file so that ports, users etc do not need to be specified and also you have run &lt;code&gt;ssh-copy-id serverName&lt;/code&gt; as root so that you no longer have to set any passwords.&lt;/p&gt;

&lt;p&gt;Then for each user, simply run this command, replacing the placeholders as you see fit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cat /home/__USER__/.ssh/id_rsa.pub &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ssh __SERVER__ &lt;span class=&#34;s2&#34;&gt;&amp;quot;tee -a ~/.ssh/authorized_keys&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I tried a few techniques before settling on this one as by far the cleanest and easiest. Original credit goes to this &lt;a href=&#34;http://superuser.com/a/978182/573510&#34; target=&#34;_blank&#34;&gt;answer on superuser.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing Logrotate Rotating Its Own Files</title>
      <link>https://edmondscommerce.github.io/fixing-logrotate-rotating-its-own-files/</link>
      <pubDate>Tue, 26 Jul 2016 17:50:25 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/fixing-logrotate-rotating-its-own-files/</guid>
      <description>&lt;p&gt;From time to time I come across a server that has had logRotate setup in such a way that it is rotating its own files creating hundreds of copies and increasing disk usage rather than controlling it&lt;/p&gt;

&lt;p&gt;This is caused by a misconfiguration of the logrotate config file. The file that is causing the problems can normally be found be running the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;user@host$ grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; /etc/logrotate.d/*
/etc/logrotate.d/misconfiguredFile:/path/to/logs/* &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which should display all of the paths that include a wild card that are being checked and rotated. The problem happens when the file path end s with a wildcard, as on the next run the newly rotated files will be checked and rotated again.&lt;/p&gt;

&lt;p&gt;The simple way to fix this is to either specify which files need to be rotated exactly, or add the expected suffix to the path (i.e. /path/to/dir/*log).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running out of disk space but df shows you have lots of space left</title>
      <link>https://edmondscommerce.github.io/linux/vps/server/running-out-of-disk-space-but-df-shows-you-have-lots-of-space-left.html</link>
      <pubDate>Thu, 07 May 2015 10:32:04 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/vps/server/running-out-of-disk-space-but-df-shows-you-have-lots-of-space-left.html</guid>
      <description>&lt;p&gt;Had a strange occurency this morning with an server reporting it had no disk space when disk usage according to df was at 50%. After some head scratching I decided to read the man page for the df command and came across the -i flag. According the man page this lists inode information instead of block usage. After running it I got the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;Filesystem      Inodes   IUsed  IFree IUse% Mounted on
/dev/xvda1     &lt;span class=&#34;m&#34;&gt;2621440&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2621440&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  100% /
udev            &lt;span class=&#34;m&#34;&gt;124879&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;398&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;124481&lt;/span&gt;    1% /dev
tmpfs           &lt;span class=&#34;m&#34;&gt;126892&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;288&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;126604&lt;/span&gt;    1% /run
none            &lt;span class=&#34;m&#34;&gt;126892&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;126888&lt;/span&gt;    1% /run/lock
none            &lt;span class=&#34;m&#34;&gt;126892&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;126891&lt;/span&gt;    1% /run/shm
none            &lt;span class=&#34;m&#34;&gt;126892&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;126891&lt;/span&gt;    1% /run/user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So it turned out that the system had reached its max inodes so the next line of investigation was to find any excess of files in an directory. Which was sone by using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in /var/*&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; find &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will list the total number of files in a given directory. You can change the path to work your way down the directory tree finding directories with lots of files. In the end we found excess of old logs which I was able to remove.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blocking Direct IP Access in Apache</title>
      <link>https://edmondscommerce.github.io/apache/blocking-direct-ip-access-in-apache.html</link>
      <pubDate>Wed, 03 Dec 2014 15:08:37 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/apache/blocking-direct-ip-access-in-apache.html</guid>
      <description>&lt;p&gt;If you are using Name based virtual hosts, you may want to simply block any bots etc that try to access your server by direct IP address. It&amp;rsquo;s unlikely a real user would try to hit your server by using the actual IP address.&lt;/p&gt;

&lt;p&gt;To do this, you can use this Virtual Host config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName 123.123.123.123
    Redirect 403 /
    ErrorDocument 403 &amp;quot;No&amp;quot;
    DocumentRoot /dev/null/
    UseCanonicalName Off
    UserDir disabled
&amp;lt;/VirtualHost&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, please change the IP to the real server IP address(es)&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it, anyone trying to hit the server by IP address will get a simple 403 error.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile NGINX with PageSpeed and ModSecurity on CentOS</title>
      <link>https://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos.html</link>
      <pubDate>Tue, 11 Nov 2014 14:06:37 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos.html</guid>
      <description>&lt;p&gt;ModSecurity is a brilliant addition to web servers to block any nefarious requests before they hit your application.
This improves security and reduces load if your server comes under attack as the requests are killed very quickly.&lt;/p&gt;

&lt;p&gt;PageSpeed is a module provided by Google to automatically improve the performance of your web pages in the browser. In a stroke it can offer a much more responsive front end with just a few configuration options.&lt;/p&gt;

&lt;p&gt;Nginx is a very fast and lightweight web server ideal for using with back end servers such as PHP-FPM.&lt;/p&gt;

&lt;p&gt;Here is a script that will download and compile Nginx with the two modules and also apply the correct ModSecurity configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Please run as root&amp;quot;&lt;/span&gt;
yum install gcc-c++ pcre-dev pcre-devel zlib-devel make unzip

&lt;span class=&#34;nv&#34;&gt;NPS_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.9.32.2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;NGINX_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.7.7&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;MODSEC_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.8.0

&lt;span class=&#34;nv&#34;&gt;NGINX_EXTRA_MODULES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot; --with-http_realip_module --with-http_ssl_module &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;NGINX_ADD_MODULES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;WORKING_DIRECTORY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/opt/nginx_with_pagespeed_and_mod_security

mkdir -p &lt;span class=&#34;nv&#34;&gt;$WORKING_DIRECTORY&lt;/span&gt;


&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===============================================================================&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Mod Security&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Installing dependencies, grabbing the repo, checking out the tag for our version and building it&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;------------&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$WORKING_DIRECTORY&lt;/span&gt;
yum install libtool httpd-devel libxml2 libxml2-devel
git clone https://github.com/SpiderLabs/ModSecurity.git
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ModSecurity
git checkout tags/v&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;MODSEC_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
./autogen.sh
./configure --enable-standalone-module --disable-mlogc
make
make install
&lt;span class=&#34;nv&#34;&gt;NGINX_ADD_MODULES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NGINX_ADD_MODULES&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --add-module=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$WORKING_DIRECTORY&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/ModSecurity/nginx/modsecurity &amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Mod Security Config and Rules&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;-----------------------------&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;For nginx, we have to get all the config and cat it all into one single config file&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
wget https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended
cat modsecurity.conf-recommended  &amp;gt; /etc/nginx/modsecurity.conf
wget https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master -O owasp-modsecurity-crs.tar.gz
tar -xvzf owasp-modsecurity-crs.tar.gz
&lt;span class=&#34;nv&#34;&gt;CRS_DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;find . -type d -name SpiderLabs-owasp-modsecurity-crs*&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
cat &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CRS_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/modsecurity_crs_10_setup.conf.example &amp;gt;&amp;gt; /etc/nginx/modsecurity.conf
cat &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CRS_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/base_rules/modsecurity_*.conf &amp;gt;&amp;gt; /etc/nginx/modsecurity.conf
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; f in &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;find &lt;span class=&#34;nv&#34;&gt;$CRS_DIR&lt;/span&gt; -type f -name *.data&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;basename &lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;cp &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; /etc/nginx/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
cp ModSecurity/unicode.mapping /etc/nginx/unicode.mapping

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===============================================================================&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Page Speed&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;----------&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Downlading the pagespeed version and building this&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$WORKING_DIRECTORY&lt;/span&gt;
wget https://github.com/pagespeed/ngx_pagespeed/archive/release-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NPS_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-beta.zip
unzip release-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NPS_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-beta.zip
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ngx_pagespeed-release-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NPS_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-beta/
wget https://dl.google.com/dl/page-speed/psol/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NPS_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.tar.gz
tar -xzvf &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NPS_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.tar.gz  &lt;span class=&#34;c1&#34;&gt;# extracts to psol/&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;NGINX_ADD_MODULES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NGINX_ADD_MODULES&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; --add-module=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$WORKING_DIRECTORY&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/ngx_pagespeed-release-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NPS_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-beta &amp;quot;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===============================================================================&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Nginx&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;-----&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;Finally, compiling Nginx with our extra modules and the added modules and installing it&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$WORKING_DIRECTORY&lt;/span&gt;
wget http://nginx.org/download/nginx-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NGINX_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.tar.gz
tar -xvzf nginx-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NGINX_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.tar.gz
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; nginx-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NGINX_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/
./configure &lt;span class=&#34;nv&#34;&gt;$NGINX_ADD_MODULES&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$NGINX_EXTRA_MODULES&lt;/span&gt;
make
sudo make install

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===============================================================================&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;COMPLETED INSTALL - CHECKING&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;checking the nginx version now, should be &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NGINX_VERSION&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; and you should see our modules&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
nginx -V

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;And now doing a config test&amp;quot;&lt;/span&gt;
/etc/init.d/nginx configtest


&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;===============================================================================&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;SCRIPT COMPLETED&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;However, you are not there yet&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;You need to go and look at the /etc/nginx/modsecurity.conf file and change settings there as appropriate&lt;/span&gt;

&lt;span class=&#34;s2&#34;&gt;Also you need to modify your nginx vhost config - see:&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Configuration_Steps&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SELinux and connecting to Mysql databases on Red Hat based distributions</title>
      <link>https://edmondscommerce.github.io/linux/se-linux-and-connecting-to-a-mysql-database.html</link>
      <pubDate>Fri, 07 Nov 2014 10:53:06 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/se-linux-and-connecting-to-a-mysql-database.html</guid>
      <description>&lt;p&gt;SELinux can be restrictive by defult but prevent alot of security issues. One thing we found while trying it is that by default it will block network connections from being made via the httpd daemon. This is an issue if say on a development system you are running php via the apache module.&lt;/p&gt;

&lt;p&gt;To resolve this simply login via root or sudo to root privilige and run the following command:
    setsebool -P httpd_can_network_connect on
You should now be able to connect to connect to your database. This will also enable things like web api, curl calls and other php that requires network access.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nice Gnome Shell Theme - Elegance Colours</title>
      <link>https://edmondscommerce.github.io/linux/nice-gnome-shell-theme-elegance-colours.html</link>
      <pubDate>Thu, 02 Oct 2014 09:11:11 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/nice-gnome-shell-theme-elegance-colours.html</guid>
      <description>

&lt;p&gt;One of the nice features of Gnome Shell is that, with the help of the &lt;a href=&#34;https://extensions.gnome.org/extension/19/user-themes/&#34; target=&#34;_blank&#34;&gt;User Theme&lt;/a&gt; extension, you can really customise
your desktop experience to be something personalised.&lt;/p&gt;

&lt;p&gt;For me, the first thing is to set my desktop background to be a nice picture - something with wide open spaces, mountains and lots of sky.&lt;/p&gt;

&lt;p&gt;The next thing though is to set up a user theme. I like transparency and themes that allow my well chosen background image to shine through.&lt;/p&gt;

&lt;p&gt;For this reason I chose the &lt;a href=&#34;https://github.com/satya164/elegance-colors&#34; target=&#34;_blank&#34;&gt;Elegance Colors&lt;/a&gt; theme as it has a &amp;ldquo;clear&amp;rdquo; preset which also includes functionality to set the colour scheme based
on the background image which is pretty slick I think.&lt;/p&gt;

&lt;p&gt;For installation instructions, please see the &lt;a href=&#34;https://github.com/satya164/elegance-colors/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;README on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;quick-fedora-instructions-are-here&#34;&gt;Quick Fedora instructions are here:&lt;/h2&gt;

&lt;h3 id=&#34;create-repo&#34;&gt;Create Repo&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo sh -c &lt;span class=&#34;s2&#34;&gt;&amp;quot; echo &amp;#39;[home_satya164_elegance-colors]&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;name=Elegance Colors Gnome Shell theme (Fedora_20)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;type=rpm-md&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;baseurl=http://download.opensuse.org/repositories/home:/satya164:/elegance-colors/Fedora_20/&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;gpgcheck=1&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;gpgkey=http://download.opensuse.org/repositories/home:/satya164:/elegance-colors/Fedora_20/repodata/repomd.xml.key&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;enabled=1&amp;#39; &amp;gt; /etc/yum.repos.d/elegance-colors.repo&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;install-theme&#34;&gt;Install Theme&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo yum install gnome-shell-theme-elegance-colors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;run-the-setup&#34;&gt;Run the Setup&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;elegance-colors
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;switch-to-the-theme&#34;&gt;Switch to the Theme&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;gsettings &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; org.gnome.shell.extensions.user-theme name &lt;span class=&#34;s1&#34;&gt;&amp;#39;elegance-colors&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;now-run-the-gui-and-set-it-up&#34;&gt;Now run the GUI and set it up&lt;/h3&gt;

&lt;p&gt;For this you can hit simply search for &amp;lsquo;Elegance Colors&amp;rsquo; from the dash to load the GUI.&lt;/p&gt;

&lt;p&gt;In the GUI you have presets and if you want transparency just choose the clear one. After that of course you can customise as you see fit&lt;/p&gt;

&lt;h2 id=&#34;fonts&#34;&gt;Fonts&lt;/h2&gt;

&lt;p&gt;To make the most of Fedora, its well worth following &lt;a href=&#34;http://worldofgnome.org/how-to-greatly-improve-font-rendering-under-fedora-20/&#34; target=&#34;_blank&#34;&gt;these instructions&lt;/a&gt; to improve font rendering.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>URGENT update BASH - big security issue</title>
      <link>https://edmondscommerce.github.io/security/urgent-update-bash-big-security-issue.html</link>
      <pubDate>Thu, 25 Sep 2014 15:18:14 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/urgent-update-bash-big-security-issue.html</guid>
      <description>

&lt;p&gt;Shell Shock is a BASH exploit that can allow the running of arbitrary commands on Linux servers.&lt;/p&gt;

&lt;p&gt;This is a newly discovered bug and affects a very large number of servers.&lt;/p&gt;

&lt;p&gt;There is a patch, you should ensure that your server&amp;rsquo;s BASH version is updated ASAP.&lt;/p&gt;

&lt;h3 id=&#34;centos-redhat-etc&#34;&gt;Centos, Redhat etc&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;yum clean all; yum -y update bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu-debian-etc&#34;&gt;Ubuntu, Debian etc&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;apt-get install --only-upgrade bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check if you are vulnerable, you can run this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env X=&amp;quot;() { :;} ; echo VULNERABLE&amp;quot; /bin/sh -c &amp;quot;echo completed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see VULNERABLE then you need to update BASH.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fedora Live USB Key Creation</title>
      <link>https://edmondscommerce.github.io/fedora/fedora-live-usb-key-creation.html</link>
      <pubDate>Wed, 10 Sep 2014 17:38:09 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/fedora/fedora-live-usb-key-creation.html</guid>
      <description>&lt;p&gt;I have had continual problems getting most of my USB keys to work as liveusb drives.&lt;/p&gt;

&lt;p&gt;This is pretty awkward however it looks like I have now found a solution that works. Instead of using the official Fedora live USB creator, we are going to use something called livecd-iso-to-disk&lt;/p&gt;

&lt;p&gt;First of all install it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y install livecd-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then this is your command to create the liveusb. Note you need to set the sdX to whichever your USB key is using, and of course make sure the path to the iso file is correct&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo livecd-iso-to-disk --format --msdos --reset-mbr --overlay-size-mb &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; --home-size-mb &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; ~/Downloads/Fedora-Live-Desktop-x86_64-20-1.iso /dev/sdc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s it&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prevent Ctrl&#43;S Freezing Your Terminal</title>
      <link>https://edmondscommerce.github.io/linux/prevent-ctrl-plus-s-freezing-your-terminal.html</link>
      <pubDate>Wed, 11 Jun 2014 10:30:25 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/prevent-ctrl-plus-s-freezing-your-terminal.html</guid>
      <description>&lt;p&gt;As someone who types a lot of text everyday and am generally quite keen not to lose my work, I tend to hit the key combination [Ctrl]+[S] quite a lot.
In fact its almost become muscle memory that every sentence or two I will hit that combination.&lt;/p&gt;

&lt;p&gt;When working on a terminal, this can have the unfortunate outcome that the terminal freezes up. For more time than I would like to admit, I thought that this was a Linux bug
And found myself frequently restarting terminal sessions that had locked up.&lt;/p&gt;

&lt;p&gt;Then I discovered that you can unlock this when it freezes by hitting [Ctrl]+[Q]. However this is a bit of a pain.&lt;/p&gt;

&lt;p&gt;I have now discovered a way of turning off this behaviour completely which is a real relief. Simply add the following to your .bashrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Prevent Ctrl+S Freezing Terminal
stty -ixon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Credit goes to this Stackoverflow post:
&lt;a href=&#34;http://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal&#34; target=&#34;_blank&#34;&gt;http://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Apache JMeter For Load Testing</title>
      <link>https://edmondscommerce.github.io/load-testing/using-apache-jmeter-for-load-testing.html</link>
      <pubDate>Tue, 27 May 2014 13:01:39 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/load-testing/using-apache-jmeter-for-load-testing.html</guid>
      <description>&lt;p&gt;Load testing is something that you really need a decent solution for. A simple tool such as Apache Bench (ab) is overly simplistic for todays web applications.&lt;/p&gt;

&lt;p&gt;After some research I decided to use Apache Jmeter as the tool of choice. It is written in Java so easy enough to run on any platform.
It features a GUI which is ideal for creating your tests, then a command line version which is what you should use to run your tests.&lt;/p&gt;

&lt;p&gt;For my purposes I wanted to feed in a large list of URLs, for that I followed these instructions:
&lt;a href=&#34;http://asciiville.com/musings/coder/how-to-feed-jmeter-from-csv&#34; target=&#34;_blank&#34;&gt;http://asciiville.com/musings/coder/how-to-feed-jmeter-from-csv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows you to create a csv file with your choice of URLs. It was actually quite hard to find a decent and succint guide to getting this set up but thankfully that page fitted my requirements.&lt;/p&gt;

&lt;p&gt;Once I started to run the test I quickly realised that my system was grinding to a halt with out of memory errors. A bit more searching yielded this page which advises on how to properly run Jmeter including the fact that you really should run it on the command line for proper testing.
&lt;a href=&#34;http://blazemeter.com/blog/jmeter-performance-and-tuning-tips&#34; target=&#34;_blank&#34;&gt;http://blazemeter.com/blog/jmeter-performance-and-tuning-tips&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GoAccess - Nice CLI Access Log Parsing Tool (and how to install on CentOS)</title>
      <link>https://edmondscommerce.github.io/sysadmin/goaccess-nice-cli-access-log-parsing-tool-and-how-to-install-on-centos.html</link>
      <pubDate>Thu, 24 Apr 2014 12:40:27 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/sysadmin/goaccess-nice-cli-access-log-parsing-tool-and-how-to-install-on-centos.html</guid>
      <description>&lt;p&gt;Log files are probably the single most useful item on a web server when it comes to debugging. They are packed full of all the information you need to understand what is
happening on the server and detect any potential issues.&lt;/p&gt;

&lt;p&gt;Reading log files by hand is basically imposssible for any meaningful overall monitoring. You can of course do some grepping and other bash tools to gain more insights but some times it&amp;rsquo;s nice to just have a simple tool.&lt;/p&gt;

&lt;p&gt;I am a big fan of tools like top, mytop, apachetop and ngxtop. GoAccess is a little bit different though, mainly it just seems a lot more fully featured.&lt;/p&gt;

&lt;p&gt;Best thing to do is to try it. Here is how to install it on CentoOS&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;yum install ncurses-devel glib2-devel geoip-devel
mkdir -p ~/goaccess
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/goaccess
wget http://downloads.sourceforge.net/project/goaccess/0.7.1/goaccess-0.7.1.tar.gz
tar -xzvf goaccess-0.7.1.tar.gz
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; goaccess-0.7.1/
./configure --enable-geoip --enable-utf8
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can read more about GoAccess here:
&lt;a href=&#34;http://goaccess.prosoftcorp.com/&#34; target=&#34;_blank&#34;&gt;http://goaccess.prosoftcorp.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash Delete Everything But - Handy Function for your bashrc File</title>
      <link>https://edmondscommerce.github.io/bash/bash-delete-everything-but-handy-function-for-your-bashrc-file.html</link>
      <pubDate>Fri, 11 Apr 2014 11:23:16 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/bash-delete-everything-but-handy-function-for-your-bashrc-file.html</guid>
      <description>&lt;p&gt;For me the use case was a cache directory that I wanted to clear out everything apart from one particular file that was expensive
to create and didn&amp;rsquo;t need to be cleared for my purposes&lt;/p&gt;

&lt;p&gt;I decided to add this to my ~/.bashrc file for ease of use in future.&lt;/p&gt;

&lt;p&gt;Here is the function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Remove Everything But&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; rmbut&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;BUT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    ls &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v *&lt;span class=&#34;nv&#34;&gt;$BUT&lt;/span&gt;* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; f&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; rm -rf &lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use the function, simply &lt;code&gt;cd&lt;/code&gt; to the directory you want to clear out and then call &lt;code&gt;rmbut MyFileIWantToKeep&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Pipe Viewer for an Easy CLI Progress Bar</title>
      <link>https://edmondscommerce.github.io/linux/using-pipe-viewer-for-an-easy-cli-progress-bar.html</link>
      <pubDate>Mon, 17 Mar 2014 14:58:14 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/using-pipe-viewer-for-an-easy-cli-progress-bar.html</guid>
      <description>&lt;p&gt;If you have a large database file to import or any other longer running process that involves piping data from one place to another then this little utility should definitely be in your arsenal.&lt;/p&gt;

&lt;p&gt;Simply enough you use this to give you a progress indication when you are piping large amounts of data.&lt;/p&gt;

&lt;p&gt;To use this on a mysql import (which is where I am most likely to use this) you would do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;pv ./dumpfile.sql &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; mysql -u&lt;span class=&#34;nv&#34;&gt;$USER&lt;/span&gt; -p&lt;span class=&#34;nv&#34;&gt;$PASS&lt;/span&gt; dbname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will then give you a simple progress bar and very usefully, an ETA that indicates how much time is left For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 308MB 0:07:57 [ 216kB/s] [===============&amp;gt;                                          ] 10% ETA 1:08:32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install the utility you should first of all just try &lt;code&gt;yum install pv&lt;/code&gt;. If that doesn&amp;rsquo;t work then you can read more about installing for your distribution here:
&lt;a href=&#34;http://www.ivarch.com/programs/pv.shtml&#34; target=&#34;_blank&#34;&gt;http://www.ivarch.com/programs/pv.shtml&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding out the biggest folders in a Magento or other website root</title>
      <link>https://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root.html</link>
      <pubDate>Tue, 04 Mar 2014 16:10:19 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root.html</guid>
      <description>&lt;p&gt;Often pulling down a Magento or other site you&amp;rsquo;ll find a load of files that have been dumped in the web root. Downloading these is often pointless and takes extra time, so you&amp;rsquo;ll want to exclude them from an rsync (using the &lt;code&gt;--exclude &#39;path&#39;&lt;/code&gt; paramter).&lt;/p&gt;

&lt;p&gt;A simple bash command for this is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;du -m --max-depth&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --exclude media &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This invokes &lt;code&gt;du&lt;/code&gt; to show each direct subfolder&amp;rsquo;s contents&amp;rsquo; size, and pipes it through to &lt;code&gt;sort&lt;/code&gt; to rank them in increasing size. The sizes are in MB. See &lt;a href=&#34;http://explainshell.com/explain?cmd=du+-m+--max-depth%3D1+--exclude+media+|+sort+-n&#34; target=&#34;_blank&#34;&gt;a more broken down explanation here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>