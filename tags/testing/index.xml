<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/testing/</link>
    <description>Recent content in Testing on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Sep 2016 11:04:50 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Mysql Dump to Create Fixtures with Where Conditions</title>
      <link>https://edmondscommerce.github.io/using-mysql-dump-to-create-fixtures-with-where-conditions/</link>
      <pubDate>Thu, 29 Sep 2016 11:04:50 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/using-mysql-dump-to-create-fixtures-with-where-conditions/</guid>
      <description>&lt;p&gt;When running unit tests it is generally advisable to have a test database that has a limited but known set of data.&lt;/p&gt;

&lt;p&gt;The idea is that before each test run, the test database is recreated. So that this process is not too slow we then tend to use a small subset of the real live database - perhaps 100 records or entities rather than however many are on the live site.&lt;/p&gt;

&lt;p&gt;In order to build this test database, we then use something call fixtures. This can be all kinds of things - some times the fixtures are created using PHP code. For absolute speed though, I prefer to use fixtures that are raw SQL files that can be very quickly loaded into a database.&lt;/p&gt;

&lt;p&gt;To create the fixtures, the very simplest way is to use &lt;code&gt;mysqldump&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, the issue with mysql dump in the way we normally use it is that it will dump an entire database - the opposite of what we are trying to achieve here.&lt;/p&gt;

&lt;p&gt;The trick here is to use the &lt;code&gt;--where&lt;/code&gt; option to mysqldump to limit the data that is actually dumped.&lt;/p&gt;

&lt;p&gt;Lets take a simple database with an &lt;code&gt;orders&lt;/code&gt;, &lt;code&gt;orders_products&lt;/code&gt; and an &lt;code&gt;orders_status_history table&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;First we will dump the orders into an SQL file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump database_name  orders --where=&amp;quot;1 order by orders_id desc limit 0,100&amp;quot; --no-create-info &amp;gt; /tmp/orders.sql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to calculate what the lowest order ID would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lowestOrderId=$(mysql -N database_name -e &amp;quot;select min(t.orders_id) from (select orders_id from orders order by orders_id DESC limit 0,100) as t&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can run mysqldump on the other tables and dump their data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump database_name  orders_products --where=&amp;quot;orders_id &amp;gt; $lowestOrderId&amp;quot; --no-create-info &amp;gt;&amp;gt; /tmp/orders.sql


mysqldump database_name  orders_status_history --where=&amp;quot;orders_id &amp;gt; $lowestOrderId&amp;quot; --no-create-info &amp;gt;&amp;gt; /tmp/orders.sql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And thats it, you now have an orders.sql file with the data for your 100 most recent orders in a format that can easily be imported into a test database simple with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
mysql test_db_name &amp;lt; orders.sql

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Repeating Behat Scenarios when Testing Magento with SmartStep</title>
      <link>https://edmondscommerce.github.io/behat/repeating-behat-scenarios-when-testing-magento-with-smartstep.html</link>
      <pubDate>Wed, 15 Apr 2015 12:02:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/behat/repeating-behat-scenarios-when-testing-magento-with-smartstep.html</guid>
      <description>

&lt;p&gt;When behat testing Magento I found myself repeating the same Homepage &amp;gt; Category &amp;gt; Product &amp;gt; Add-to-cart &amp;gt; Cart page scenario for a variety of tests - checking that a category page has products; checking that items are added to the cart; testing the checkout itself etc etc.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to copy-paste the whole procedure because if I changed, say the &lt;code&gt;.product-list&lt;/code&gt; class, I&amp;rsquo;d have to update each of the Scenarios. Bit of a kick in the face to &lt;a href=&#34;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The standard Behat way is to create a method in the Context class which performs the add-to-cart procedure under the Step &lt;code&gt;Given I have added to cart&lt;/code&gt; or similar, but this defeats the object of using Gherkin to write the tests.&lt;/p&gt;

&lt;p&gt;Fortunately KnpLabs have soled this problem with &lt;a href=&#34;https://github.com/KnpLabs/FriendlyContexts/blob/master/doc/feature-smartStep.md&#34; target=&#34;_blank&#34;&gt;SmartSteps&lt;/a&gt;. This allows you to create a Scanerio that you want to be repeatable by tagging it as a &lt;code&gt;@smartStep&lt;/code&gt;. Once it&amp;rsquo;s tagged, you can easily embed that scenario into a new one by having a step &lt;code&gt;Given [scenario name]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-smartsteps-to-your-behat-tests&#34;&gt;Adding SmartSteps to your behat tests&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;composer.json&lt;/code&gt;, add a new dependency
&lt;code&gt;
&amp;quot;knplabs/friendly-contexts&amp;quot;: &amp;quot;dev-master&amp;quot;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;behat.yml&lt;/code&gt;
```
default:
extensions:
    Knp\FriendlyContexts\Extension:
        smartTag: smartStep&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- Tag your scenario

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@smartStep
  Scenario: I arrive on the site and add a product to cart
    When I am on &amp;ldquo;/&amp;rdquo;
    Then I follow &amp;ldquo;My category&amp;rdquo;
    Then I follow &amp;ldquo;My product&amp;rdquo;
    Then I press &amp;ldquo;Add to Cart&amp;rdquo;
    And I should see &amp;ldquo;was added to your shopping cart&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- And then use the Scenario in any other scenarios with
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given I arrive on the site and add a product to cart
```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Behat</title>
      <link>https://edmondscommerce.github.io/behat/behat.html</link>
      <pubDate>Wed, 01 Apr 2015 12:04:12 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/behat/behat.html</guid>
      <description>&lt;p&gt;I love Behat. One of the great things about it is that it has been built to be very extensible, so if it doesn&amp;rsquo;t do exactly what you need then it&amp;rsquo;s really quite easy to to customise the way it works without having to do any hacking on the core code. This is because it makes extensive use of an Observer Pattern like Hooks system.&lt;/p&gt;

&lt;p&gt;If you want to have your Behat tests fail as soon as a scenario fails - ideal when you are running a large suite of tests and trying to fix issues - then simply add in this method into a Context class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;   &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    /** @AfterScenario */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function dieOnFailedScenario(Behat\Behat\Hook\Scope\AfterScenarioScope $scope)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (99 === $scope-&amp;gt;getTestResult()-&amp;gt;getResultCode()) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            if (isset($_SERVER[&amp;#39;BEHAT_DIE_ON_FAILURE&amp;#39;])) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                die(&amp;quot;\n\nBEHAT_DIE_ON_FAILURE is defined\n\nKilling Full Process\n\n\n\n&amp;quot;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            } else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                echo &amp;quot;\n\nTo die on failure, please run:\nexport BEHAT_DIE_ON_FAILURE=true;\n\n&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then in your terminal, simply export BEHAT_DIE_ON_FAILURE=true and then the next time you run your tests, the process will die and you can go and fix the problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Apache JMeter For Load Testing</title>
      <link>https://edmondscommerce.github.io/load-testing/using-apache-jmeter-for-load-testing.html</link>
      <pubDate>Tue, 27 May 2014 13:01:39 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/load-testing/using-apache-jmeter-for-load-testing.html</guid>
      <description>&lt;p&gt;Load testing is something that you really need a decent solution for. A simple tool such as Apache Bench (ab) is overly simplistic for todays web applications.&lt;/p&gt;

&lt;p&gt;After some research I decided to use Apache Jmeter as the tool of choice. It is written in Java so easy enough to run on any platform.
It features a GUI which is ideal for creating your tests, then a command line version which is what you should use to run your tests.&lt;/p&gt;

&lt;p&gt;For my purposes I wanted to feed in a large list of URLs, for that I followed these instructions:
&lt;a href=&#34;http://asciiville.com/musings/coder/how-to-feed-jmeter-from-csv&#34; target=&#34;_blank&#34;&gt;http://asciiville.com/musings/coder/how-to-feed-jmeter-from-csv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows you to create a csv file with your choice of URLs. It was actually quite hard to find a decent and succint guide to getting this set up but thankfully that page fitted my requirements.&lt;/p&gt;

&lt;p&gt;Once I started to run the test I quickly realised that my system was grinding to a halt with out of memory errors. A bit more searching yielded this page which advises on how to properly run Jmeter including the fact that you really should run it on the command line for proper testing.
&lt;a href=&#34;http://blazemeter.com/blog/jmeter-performance-and-tuning-tips&#34; target=&#34;_blank&#34;&gt;http://blazemeter.com/blog/jmeter-performance-and-tuning-tips&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chrome Auto Populate Form Fields - Form Fuzzer</title>
      <link>https://edmondscommerce.github.io/chrome/chrome-auto-populate-form-fields-form-fuzzer.html</link>
      <pubDate>Thu, 13 Sep 2012 10:42:59 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/chrome/chrome-auto-populate-form-fields-form-fuzzer.html</guid>
      <description>&lt;p&gt;If you ever used Webmaster Tools in Firefox but have now switched to using Chrom(e|ium) instead then you probably miss the form filler - especially if you ever need to test checkouts or other form intensive web site user stories.&lt;/p&gt;

&lt;p&gt;A nice little extension that I just discovered takes care of this, &lt;a href=&#34;https://chrome.google.com/webstore/detail/cbpplldpcdcfejdaldmnfhlodoadjhii&#34; target=&#34;_blank&#34;&gt;Chrome Form Fuzzer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can configure it for simple form filling or with a little creative configuration it could easily be used for security testing and more in depth testing to ensure that input is being sanitised and filtered properly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VirtualBox Images For Download of Various Linux and Other Open Source Systems</title>
      <link>https://edmondscommerce.github.io/virtualbox/virtualbox-images-for-download-of-various-linux-and-other-open-source-systems.html</link>
      <pubDate>Thu, 23 Feb 2012 12:42:17 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/virtualbox/virtualbox-images-for-download-of-various-linux-and-other-open-source-systems.html</guid>
      <description>&lt;p&gt;Virtualbox is an amazing tool for testing and developing on various systems.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s even easier as there is a nicely organised repository of clean VirtualBox images you can download and get running with in a matter of minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://virtualboxes.org/&#34;&gt;http://virtualboxes.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to use them for some &lt;a href=&#34;http://www.edmondscommerce.co.uk&#34;&gt;Magento&lt;/a&gt; performance optimisation testing on various platforms as we perfect our &lt;a href=&#34;http://www.edmondscommerce.co.uk/magento/magento-optimised-hosting/&#34;&gt;Magento Server Optimisation&lt;/a&gt; skills and try to benchmark some new ideas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPUnit, LAMP, Magento and Netbeans</title>
      <link>https://edmondscommerce.github.io/netbeans/phpunit-lamp-magento-and-netbeans.html</link>
      <pubDate>Tue, 10 Jan 2012 13:11:10 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/netbeans/phpunit-lamp-magento-and-netbeans.html</guid>
      <description>&lt;p&gt;When using PHPUnit with xampp the first the to do is install PHPUnit through pear. You usually need to update pear first, after that you should be able to follow the instructions &lt;a href=&#34;http://pear.phpunit.de/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting PHPUnit working with Magento is fairly straight forward. It&amp;rsquo;s just a case of including Mage.php and then calling Mage::app(); in the setup method of your test class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;require_once&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;../app/Mage.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TemplateTest&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PHPUnit_Framework_TestCase&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testExample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$helper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$helper&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage_Core_Helper_Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Magento isn&amp;#39;t running!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you use NetBeans as your IDE you&amp;rsquo;ll be glad to know that it has support for running your tests directly without having to use a terminal. This does require a bit of configuration. You need to tell NetBeans where the PHPUnit script is under Tools &amp;gt; Options &amp;gt; PHP &amp;gt; Unit Testing. If you are using it with XAMPP it will be located at /opt/lampp/bin/phpunit. To begin running the tests you then go Run &amp;gt; Test Project and NetBeans will ask you where your tests are. After that you will get a &amp;ldquo;Test File&amp;rdquo; source folder in the Projects pane. You can now right click each test file and choose &amp;ldquo;Run file&amp;rdquo; and netbeans will run it. If you have xdebug setup the debug option also works nicely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Selenium Web Application Testing Platform</title>
      <link>https://edmondscommerce.github.io/php/selenium-web-application-testing-platform.html</link>
      <pubDate>Thu, 29 Jan 2009 12:51:15 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/selenium-web-application-testing-platform.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
As internet applications get more and more complex and start to become more like desktop applications and less like electronic brochures, they can become more and more complex to test to ensure that everything is working properly.&lt;/p&gt;

&lt;p&gt;There are numerous strategies to cope with this including the development of &amp;ldquo;test based&amp;rdquo; development, where tests are written at the same time, or even before, the actual code of the site is. This way, any changes to the codebase can quickly be checked for bugs by running the test suite.&lt;/p&gt;

&lt;p&gt;One interesting addition to this philosophy is &lt;a href=&#34;http://seleniumhq.org/&#34; rel=&#34;nofollow&#34;&gt;selenium&lt;/a&gt; which takes this idea a bit further and actually automates browser based testing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>