<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/test/</link>
    <description>Recent content in Test on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Dec 2013 20:43:49 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Faker Symfony2 Integration</title>
      <link>https://edmondscommerce.github.io/symfony2/faker-symfony2-integration.html</link>
      <pubDate>Mon, 02 Dec 2013 20:43:49 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/symfony2/faker-symfony2-integration.html</guid>
      <description>&lt;p&gt;Generating test data is a crucial part of properly testing your code. If you have to hard code your test data or fixtures then you might be tempted to use only a small number of test entities.&lt;/p&gt;

&lt;p&gt;To help with this you can use the brilliant &lt;a href=&#34;https://github.com/fzaninotto/Faker&#34; target=&#34;_blank&#34;&gt;Faker&lt;/a&gt; library to generate your test data. The Faker library is designed purely to generate test data and has a range of providers for all kinds of data.&lt;/p&gt;

&lt;p&gt;As if that wasn&amp;rsquo;t good enough, you can leverage all the power of this library in your Symfony2 development by simply installing this Symfony2 bundle, &lt;a href=&#34;https://github.com/willdurand/BazingaFakerBundle/blob/master/Resources/doc/index.md&#34; target=&#34;_blank&#34;&gt;BazingaFakerBundle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Installation is a breeze with Composer and then simply reference your entities in the configuration and run the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/console faker:populate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate your entities programmatically rather than as a command line action (perhaps as part of a unit or functional test) you can use this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;//Faker load test data&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$populator = $this-&amp;gt;getContainer()-&amp;gt;get(&amp;#39;faker.populator&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$insertedPks = $populator-&amp;gt;execute();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach ($insertedPks as $class =&amp;gt; $pks) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $reflClass = new \ReflectionClass($class);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $shortClassName = $reflClass-&amp;gt;getShortName();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    printf(&amp;quot;\nFaker: Inserted %s new %s objects\n&amp;quot;, count($pks), $shortClassName);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Chrome Auto Populate Form Fields - Form Fuzzer</title>
      <link>https://edmondscommerce.github.io/chrome/chrome-auto-populate-form-fields-form-fuzzer.html</link>
      <pubDate>Thu, 13 Sep 2012 10:42:59 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/chrome/chrome-auto-populate-form-fields-form-fuzzer.html</guid>
      <description>&lt;p&gt;If you ever used Webmaster Tools in Firefox but have now switched to using Chrom(e|ium) instead then you probably miss the form filler - especially if you ever need to test checkouts or other form intensive web site user stories.&lt;/p&gt;

&lt;p&gt;A nice little extension that I just discovered takes care of this, &lt;a href=&#34;https://chrome.google.com/webstore/detail/cbpplldpcdcfejdaldmnfhlodoadjhii&#34; target=&#34;_blank&#34;&gt;Chrome Form Fuzzer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can configure it for simple form filling or with a little creative configuration it could easily be used for security testing and more in depth testing to ensure that input is being sanitised and filtered properly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Automated Testing for Quality Assurance</title>
      <link>https://edmondscommerce.github.io/magento/magento-automated-testing-for-quality-assurance.html</link>
      <pubDate>Thu, 01 Mar 2012 08:39:04 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-automated-testing-for-quality-assurance.html</guid>
      <description>&lt;p&gt;Widely regarded as best practice, the use of automated tests to ensure the correct functioning of your web application is a really powerful and useful practice.&lt;/p&gt;

&lt;p&gt;For Magento it has historically been something that you would need to create yourself.&lt;/p&gt;

&lt;p&gt;Now Magento have released a comprehensive package of 1000 tests that you can download as a package.&lt;/p&gt;

&lt;p&gt;Based on Selenium the package will allow you to to test your store and will also assist with the creation of your own custom tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.magentocommerce.com/blog/comments/automate-your-testing-with-the-magento-test-automation-framework/&#34;&gt;http://www.magentocommerce.com/blog/comments/automate-your-testing-with-the-magento-test-automation-framework/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another great development for Magento.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Basics, some thing that is false and true at the same time!</title>
      <link>https://edmondscommerce.github.io/php/php-basics-some-thing-that-is-false-and-true-at-the-same-time.html</link>
      <pubDate>Tue, 14 Feb 2012 15:16:55 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/php-basics-some-thing-that-is-false-and-true-at-the-same-time.html</guid>
      <description>&lt;p&gt;What can be true and false at the same time?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$a = &amp;quot;a&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$b = 0;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;if($a == true &amp;amp;&amp;amp; $b == false &amp;amp;&amp;amp; $a == $b) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;	echo &amp;quot;Passed&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is because PHP tries to convert &amp;ldquo;a&amp;rdquo; to a numeric, as there is no numeric value it gets changed to zero. So 0 == 0 is true. At the same time the string &amp;ldquo;a&amp;rdquo; converted to boolean evaluates to true. 0 evaluates to false. While there isn&amp;rsquo;t an actual value that is both true and false that the same type, depending on the context a value may evaluate to true or false depending on what it is been compared to. To avoid problems like this, you should use triple equals (===) unless you know other wise.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Question: How to Create Bootable Linux USB Key/Drives Easily from Linux</title>
      <link>https://edmondscommerce.github.io/linux/question-how-to-create-bootable-linux-usb-keydrives-easily-from-linux.html</link>
      <pubDate>Tue, 13 Dec 2011 21:49:35 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/question-how-to-create-bootable-linux-usb-keydrives-easily-from-linux.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
Answer to this quite clear and simple question is:&lt;/p&gt;

&lt;p&gt;unetbootin&lt;/p&gt;

&lt;p&gt;Not the easiest to find but definitely one of the easiest solutions.&lt;/p&gt;

&lt;p&gt;If you search for USB bootable drive generators mostly you will find windows apps.&lt;/p&gt;

&lt;p&gt;Not too useful if you are already on Linux and simply want to try the latest version or perhaps an alternative distro on something that is going to give more useful performance than the traditional live CD.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://unetbootin.sourceforge.net/&#34;&gt;uNetbootin&lt;/a&gt; is a nice solid cross platform USB bootable Linux generator that will even handle the download of ISOs for you if required.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple way to check Magento email setup</title>
      <link>https://edmondscommerce.github.io/magento/simple-way-to-check-magento-email-setup.html</link>
      <pubDate>Tue, 13 Dec 2011 15:58:30 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/simple-way-to-check-magento-email-setup.html</guid>
      <description>&lt;p&gt;So, you&amp;rsquo;ve just moved a magento setup from one host to another, and you want to check if the email setup is correct, how do you do it?&lt;/p&gt;

&lt;p&gt;The simple easy way to do this is to have a test front-end user (which you probably already have) and send a password change email to the user.&lt;/p&gt;

&lt;p&gt;A simple trick but a good timesaver.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SagePay Test Card Details</title>
      <link>https://edmondscommerce.github.io/ecommerce/sagepay-test-card-details.html</link>
      <pubDate>Mon, 01 Nov 2010 12:10:22 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/ecommerce/sagepay-test-card-details.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you are testing out your SagePay integration, you need to be able to input some test card details that the test.sagepay.com system will accept.&lt;/p&gt;

&lt;p&gt;Here they are:&lt;/p&gt;

&lt;p&gt;or testing transactions on the Protx test server, use the following card numbers.&lt;/p&gt;

&lt;p&gt;NB: there are NO dummy cards to use on the Live server. Actual Live bank cards must be used.&lt;/p&gt;

&lt;table class=&#34;ProtocolTables&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34; border=&#34;1&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;protxNames&#34; align=&#34;middle&#34; height=&#34;27&#34;&gt;Card Type&lt;/td&gt;&lt;td class=&#34;protxNames&#34; align=&#34;middle&#34; height=&#34;27&#34;&gt;Protx Card Name&lt;/td&gt;&lt;td class=&#34;protxNames&#34; align=&#34;middle&#34; height=&#34;27&#34;&gt;Card Number&lt;/td&gt;&lt;td class=&#34;protxNames&#34; align=&#34;middle&#34; height=&#34;27&#34;&gt;Issue Number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;Visa&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;VISA&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;4929000000006&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;Visa Delta&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;DELTA&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;4462000000000003&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;Visa Electron UK Debit&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;UKE&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;4917300000000008&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;Mastercard&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;MC&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;5404000000000001&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;UK Maestro&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;MAESTRO&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;5641820000000005&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;01&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;International Maestro&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;MAESTRO&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;300000000000000004&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;Solo&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;SOLO&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;6334900000000005&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;American Express&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;AMEX&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;374200000000004&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;Japan Credit Bureau (JCB)&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;JCB&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;3569990000000009&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;Diners Club&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;DC&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;36000000000008&lt;/td&gt;&lt;td align=&#34;middle&#34; height=&#34;27&#34;&gt;n/a&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;You&amp;rsquo;ll also need to supply an Expiry Date in the future and the following values for CV2, Billing Address Numbers and Billing Post Code Numbers. These are the only values which will return as Matched. Any other values will return a Not Matched.&lt;/p&gt;

&lt;p&gt;CV2: 123
Billing Address: 88
Billing PostCode: 412&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento XAMPP Portable Demo - Easily Try Out Magento on Windows</title>
      <link>https://edmondscommerce.github.io/magento/magento-xampp-portable-demo-easily-try-out-magento-on-windows.html</link>
      <pubDate>Wed, 28 Oct 2009 15:59:53 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-xampp-portable-demo-easily-try-out-magento-on-windows.html</guid>
      <description>&lt;p&gt;I have put together an XAMPP based portable Magento demo site. You can easily download it to your windows PC, drop the xampp folder into the root of your C: drive, launch the XAMPP control panel to start Apache and MySQL and then you are away.&lt;/p&gt;

&lt;p&gt;You can get the files on GitHub here:
&lt;a href=&#34;http://github.com/edmondscommerce/XAMPP-Magento-Demo-Site&#34;&gt;http://github.com/edmondscommerce/XAMPP-Magento-Demo-Site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please read the README which is displayed at the bottom of the GitHub page for up to date instructions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>