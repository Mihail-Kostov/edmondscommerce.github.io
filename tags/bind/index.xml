<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bind on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/bind/</link>
    <description>Recent content in Bind on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Apr 2013 19:02:26 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/bind/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gnome 3 Bind Mouse Keys to Alt Tab and Overview</title>
      <link>https://edmondscommerce.github.io/magento/gnome-3-bind-mouse-keys-to-alt-tab-and-overview.html</link>
      <pubDate>Wed, 03 Apr 2013 19:02:26 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/gnome-3-bind-mouse-keys-to-alt-tab-and-overview.html</guid>
      <description>&lt;p&gt;If you have switched to Gnome Shell or Gnome 3 then you are no doubt making a lot of use of the overview and alt tab functionality to switch between your windows.&lt;/p&gt;

&lt;p&gt;To make this easier (if you have a mouse with extra buttons) you can map your extra buttons to do these actions with a few simple tools.&lt;/p&gt;

&lt;p&gt;Firstly you need to install xbindkeys and xdotool&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install xbindkeys xdotool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you need to know your mouse buttons, try running this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;xev &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep button
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will give you a window you can click on with your mouse and it will tell you which button you clicked.&lt;/p&gt;

&lt;p&gt;Then finally you need to edit your xbindkeys configuration. This is my xbindkeys config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#gnome shell button 8 to alt tab
&amp;amp;quot;xdotool keydown alt key Tab; sleep 2; xdotool keyup alt&amp;amp;quot;
release + b:8

#gnome shell button 9 to overview
&amp;amp;quot;xdotool key Super_L&amp;amp;quot;
release + b:9

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JQuery Keeping Click Handler when Updating Content - Live Binding</title>
      <link>https://edmondscommerce.github.io/jquery/jquery-keeping-click-handler-when-updating-content-live-binding.html</link>
      <pubDate>Wed, 31 Aug 2011 15:02:23 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/jquery/jquery-keeping-click-handler-when-updating-content-live-binding.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you are using jQuery and attaching click handlers etc to elements as part of your document ready block, you may find you are losing those handlers if you update the page with Javascript after load.&lt;/p&gt;

&lt;p&gt;For example if you have some kind of slide show which involves redrawing the contents of a div, you might find that the click handlers you had attached to the links of class &amp;lsquo;slideshow-link&amp;rsquo; stop working.&lt;/p&gt;

&lt;p&gt;Of course you can reattach handlers manually after dropping in your new HTML but that&amp;rsquo;s pretty messy.&lt;/p&gt;

&lt;p&gt;A much nicer solution is this:&lt;/p&gt;

&lt;p&gt;Instead of using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.slideshow-link&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.slideshow-link&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;live&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Live method will keep the attachment to elements matching the selector now and in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://api.jquery.com/live/&#34;&gt;http://api.jquery.com/live/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gotta love jQuery ;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>