<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slash on Edmonds Commerce Dev Blog</title>
    <link>http://example.com/tags/slash/</link>
    <description>Recent content in Slash on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Feb 2012 16:58:38 +0000</lastBuildDate>
    <atom:link href="http://example.com/tags/slash/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Remove Double Slashes from URL without Breaking It</title>
      <link>http://example.com/php/remove-double-slashes-from-url-without-breaking-it.html</link>
      <pubDate>Fri, 24 Feb 2012 16:58:38 +0000</pubDate>
      
      <guid>http://example.com/php/remove-double-slashes-from-url-without-breaking-it.html</guid>
      <description>&lt;p&gt;If you need to clean up a URL and remove any double (or more) slashes that might have crept in, but need to keep the :// bit intact you might like this little function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    protected function removeDoubleSlash($in) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return preg_replace(&amp;#39;%([^:])(&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Handy :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Dataflow Images Not Working &#43; Solution</title>
      <link>http://example.com/magento/magento-dataflow-images-not-working-solution.html</link>
      <pubDate>Thu, 17 Feb 2011 16:03:49 +0000</pubDate>
      
      <guid>http://example.com/magento/magento-dataflow-images-not-working-solution.html</guid>
      <description>&lt;p&gt;If you are struggling to understand why Magento is not finding images that are definitely there, the problem may well be that you are not prefixing your image with a slash, i.e for a new image we would put:&lt;/p&gt;

&lt;p&gt;/image.jpg&lt;/p&gt;

&lt;p&gt;and the image would be in&lt;/p&gt;

&lt;p&gt;media/import/image.jpg&lt;/p&gt;

&lt;p&gt;Unfortunately whoever wrote the Dataflow product importer though it would be a good idea to silently capture all exceptions on image imports which removes any useful error messages that might occur (such as no image at media/importimage.jpg)&lt;/p&gt;

&lt;p&gt;If you would prefer to fix this, you can override Mage_Catalog_Model_Convert_Adapter_Product&lt;/p&gt;

&lt;p&gt;Copy the saveRow() method into your overriding class and then change this bit&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;foreach ($imageData as $file =&amp;gt; $fields) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            try {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $filepath = Mage::getBaseDir(&amp;#39;media&amp;#39;) . DS . &amp;#39;import&amp;#39; . trim($file);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $product-&amp;gt;addImageToMediaGallery($filepath, $fields);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            } catch (Exception $e) {}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To something like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;foreach ($imageData as $file =&amp;gt; $fields) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            //try {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $filepath = Mage::getBaseDir(&amp;#39;media&amp;#39;) . DS . &amp;#39;import&amp;#39; . trim($file);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $product-&amp;gt;addImageToMediaGallery($filepath, $fields);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;           //} catch (Exception $e) {}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>