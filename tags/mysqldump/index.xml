<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysqldump on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/mysqldump/</link>
    <description>Recent content in Mysqldump on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Nov 2011 18:30:05 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/mysqldump/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>mysql_dump not restored correctly 1064: USING BTREE &#43; fix</title>
      <link>https://edmondscommerce.github.io/mysql/mysql_dump-not-restored-correctly-1064-using-btree-fix.html</link>
      <pubDate>Thu, 10 Nov 2011 18:30:05 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/mysql/mysql_dump-not-restored-correctly-1064-using-btree-fix.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
When migrating one server to another you often hit bumps in the road.  Todays was transferring a database from one server to another.&lt;/p&gt;

&lt;p&gt;During this standard procedure I found that the restored database was missing a few tables.  Irritating as Magento doesn&amp;rsquo;t like missing tables.&lt;/p&gt;

&lt;p&gt;Digging down into the backup and extracting the first missing table I was able to replicate the error which came out as
&lt;code&gt;1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &amp;lsquo;USING BTREE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I eventually found out that some versions of mysql 5.1 export a dump file that contains mysql5.1 specific features and loading the file into mysql 5.0 will not work.&lt;/p&gt;

&lt;p&gt;The solution is a little frustrating but if you run the command with the &amp;ndash;compatible=mysql40 switch, the dump file extracts fine :-
&lt;code&gt;mysqldump &amp;ndash;compatible=mysql40&lt;/code&gt;
Don&amp;rsquo;t ask me why there&amp;rsquo;s no &amp;ndash;compatible=mysql50 flag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Git to Track DB Schema Changes with Git Hook</title>
      <link>https://edmondscommerce.github.io/git/using-git-to-track-db-schema-changes-with-git-hook.html</link>
      <pubDate>Thu, 28 Jan 2010 10:48:29 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/using-git-to-track-db-schema-changes-with-git-hook.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you use Git for version control and you would like to also keep a track of your database schema (and possibly content though I&amp;rsquo;m not doing that due to potential file sizes / speed issues) then all you need to do is this simple step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to your project folder and into the hidden .git folder, then a sub folder in there called hooks&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd .git/hooks 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a file called pre-commit and open it in vim (or whatever text editor you like)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim pre-commit 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a mysql dump command to that file and save it
```&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#!/bin/sh
mysqldump -u DBUSER -pDBPASSWORD  DATABASE &amp;ndash;no-data=true &amp;gt; SQLVersionControl/vc.sql
git add SQLVersionControl/vc.sql
exit 0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
(note this assumes you have a folder called SQLVersionControl in the root of your project. If you don&#39;t just create it.)

No without any further effort, you will update the schema file on every commit.

eg 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git commit -am &amp;lsquo;this commit will include a mysql schema dump that has been run just before the commit - sweet :)&amp;rsquo;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>