<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Untracked on Edmonds Commerce Dev Blog</title>
    <link>http://edmondscommerce.github.io/tags/untracked/</link>
    <description>Recent content in Untracked on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jun 2015 12:06:25 +0000</lastBuildDate>
    <atom:link href="http://edmondscommerce.github.io/tags/untracked/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Removing untracked files but not git ignored ones</title>
      <link>http://edmondscommerce.github.io/git/removing-untracked-files-but-not-git-ignored-ones.html</link>
      <pubDate>Wed, 17 Jun 2015 12:06:25 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/git/removing-untracked-files-but-not-git-ignored-ones.html</guid>
      <description>&lt;p&gt;Quite often you drop a load of files in to a git repo, such as a Magento extension, and then immediately regret it. But now you have a pile of files scattered across the repo and no way to Ctrl+Z out of the situation.&lt;/p&gt;

&lt;p&gt;This leaves us with some options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD&lt;/code&gt;, but that&amp;rsquo;ll only revert any changes to &lt;em&gt;tracked&lt;/em&gt; files. What about the untracked files in &lt;code&gt;git status&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Manually &lt;code&gt;rm -rf file1 file2 folder1 folder2&lt;/code&gt; but that&amp;rsquo;s a lot of copypasting.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clean -f&lt;/code&gt;, but that &lt;em&gt;will remove all untracked files, including your gitignored ones&lt;/em&gt;, so we don&amp;rsquo;t want that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way is to &lt;strong&gt;automate the &lt;code&gt;rm -rf&lt;/code&gt; procedure&lt;/strong&gt; mentioned above using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status --porcelain | sed &#39;s#^...##&#39; | while read f; do rm -rf $f; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The TL;DR of this command is that it outputs &lt;code&gt;git status&lt;/code&gt; in a parseable way, and then loops over each file/folder and deletes it. You can see a &lt;a href=&#34;http://explainshell.com/explain?cmd=git+status+--porcelain+%7C+sed+%27s%23%5E...%23%23%27+%7C+while+read+f%3B+do+rm+-rf+%24f%3B+done&#34; target=&#34;_blank&#34;&gt;full command breakdown here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>