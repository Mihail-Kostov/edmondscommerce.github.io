<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php7 on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/php7/</link>
    <description>Recent content in Php7 on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Mar 2017 12:23:44 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/php7/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento 1 Php7 Core Bug and Fix</title>
      <link>https://edmondscommerce.github.io/magento-1-php7-core-bug-and-fix/</link>
      <pubDate>Thu, 23 Mar 2017 12:23:44 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-1-php7-core-bug-and-fix/</guid>
      <description>&lt;p&gt;We recently came across an issue with a client that had previously upgraded to PHP7 from PHP5.x for their Magento 1 CE store.
The issue came to light when the client tried to create a new store in the admin and found that their store name was left blank when they hit the save button.&lt;/p&gt;

&lt;p&gt;No errors were displayed as the site was in production mode and the logs did not give any useful information.
After looking in to this locally with developer mode I found that a core Magento class was still using deprecated code even after using a PHP7 compatibility module.&lt;/p&gt;

&lt;p&gt;Unfortunately there are only two ways of fixing the issue discovered, the first and correct option is to update Magento as the bug is present in all versions of Magento prior to Magento 1.9.1.0,
there does not seem to be any patches that resolve the issue officially.&lt;/p&gt;

&lt;p&gt;The second faster (and possibly safer depending on how big your site is) is to directly edit the core file (!!).&lt;/p&gt;

&lt;p&gt;As all developers know, editing the core is taboo but in this case we are looking at bringing code from a later version of Magento that has fixed the issue.&lt;/p&gt;

&lt;p&gt;The issue boils down to the use of the &lt;code&gt;preg_replace&lt;/code&gt; function with the &lt;code&gt;e&lt;/code&gt; modifier, the code is used across the entire installation when calling the &lt;code&gt;removeTags&lt;/code&gt; method on any helper that extends from &lt;code&gt;Mage_Core_Helper_Abstract&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To fix the issue without doing a Magento upgrade, replace the &lt;code&gt;removeTags()&lt;/code&gt; method with the updated version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public function removeTags($html)
    {
        $html = preg_replace_callback(
            &amp;quot;# &amp;lt;(?![/a-z]) | (?&amp;lt;=\s)&amp;gt;(?![a-z]) #xi&amp;quot;,
            function ($matches) {
                return htmlentities($matches[0]);
            },
            $html
        );
        $html =  strip_tags($html);
        return htmlspecialchars_decode($html);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Always be sure to test your changes before deploying to production, it is also recommended you comment your edit loudly so the change is not overlooked.
E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;############### Edit Made #################
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Test If Your Magento Site Is Php7 Ready</title>
      <link>https://edmondscommerce.github.io/test-if-your-magento-site-is-php7-ready/</link>
      <pubDate>Thu, 02 Mar 2017 10:48:46 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/test-if-your-magento-site-is-php7-ready/</guid>
      <description>

&lt;p&gt;After you&amp;rsquo;ve installed the &lt;a href=&#34;https://github.com/Inchoo/Inchoo_PHP7&#34; target=&#34;_blank&#34;&gt;Inchoo PHP7 module&lt;/a&gt; you&amp;rsquo;ll likely
want to check if your custom or 3rd party module code is also PHP7 compatible. In order to determine
this you can run a &lt;a href=&#34;https://en.wikipedia.org/wiki/Static_program_analysis&#34; target=&#34;_blank&#34;&gt;static analysis&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;phpcodesniffer&#34;&gt;PHPCodeSniffer&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34; target=&#34;_blank&#34;&gt;PHPCodeSniffer&lt;/a&gt; is a PHP static analysis tool which can
be used to test your code against a set of coding standards.&lt;/p&gt;

&lt;h1 id=&#34;phpcompatibility&#34;&gt;PHPCompatibility&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wimg/PHPCompatibility&#34; target=&#34;_blank&#34;&gt;PHPCompatibility&lt;/a&gt; is a coding standard which you can use
to test if your code is compatible with a certain (or range of) PHP versions. In our case we&amp;rsquo;re only
interested in PHP7.&lt;/p&gt;

&lt;h1 id=&#34;running-the-analysis&#34;&gt;Running the Analysis&lt;/h1&gt;

&lt;p&gt;Once you&amp;rsquo;ve install both PHPCodeSniffer and PHPCompatibility (by following the instructions on their
respective GitHub pages) we should be ready to run our analysis.&lt;/p&gt;

&lt;p&gt;Use the following command to run your analysis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;./vendor/bin/phpcs -p --standard&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;PHPCompatibility --runtime-set testVersion 7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the command is running you should see a summary of the tested files. &lt;code&gt;W&lt;/code&gt; means warning and &lt;code&gt;E&lt;/code&gt;
means error.&lt;/p&gt;

&lt;p&gt;After the command has run you should see a detailed list of all the potential compatibility issues.&lt;/p&gt;

&lt;p&gt;Once these have been fixed or mitigated you should be ready for PHP7.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Libsodium and Pecl-libsodium on Centos7 and Php7</title>
      <link>https://edmondscommerce.github.io/installing-libsodium-and-pecl-libsodium-on-centos7-and-php7/</link>
      <pubDate>Wed, 02 Nov 2016 19:46:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/installing-libsodium-and-pecl-libsodium-on-centos7-and-php7/</guid>
      <description>&lt;p&gt;If you would like to work with state of the art encryption techniques in your PHP project then you need to check out &lt;a href=&#34;https://download.libsodium.org/doc/&#34; target=&#34;_blank&#34;&gt;libsodium&lt;/a&gt; and the corresponding PHP library, &lt;a href=&#34;https://pecl.php.net/package/libsodium&#34; target=&#34;_blank&#34;&gt;pecl-libsodium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting it installed on your centos7 and PHP7 box though can be a little tricky&lt;/p&gt;

&lt;p&gt;Here is a bash script which will install all the required depencies and get it working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

if [[ &amp;quot;$(whoami)&amp;quot; != &amp;quot;root&amp;quot; ]]
then
    echo &amp;quot;please run this as root&amp;quot;
    exit 1
fi

yum install \
    php70w-pear \
    php70w-devel \
    gcc \
    curl-devel \
    libsodium \
    libsodium-devel

pecl install libsodium

echo &amp;quot;extension=libsodium.so&amp;quot; &amp;gt;&amp;gt; /etc/php.ini

php -i | grep sodium
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this package you can now do all kinds of enterprise level cryptography, suggest you have a read of this &lt;a href=&#34;https://paragonie.com/book/pecl-libsodium&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>