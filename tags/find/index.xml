<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Find on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/find/</link>
    <description>Recent content in Find on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jan 2014 17:18:55 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/find/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bash Find Files and Echo Filename and Contents</title>
      <link>https://edmondscommerce.github.io/bash/bash-find-files-and-echo-filename-and-contents.html</link>
      <pubDate>Mon, 13 Jan 2014 17:18:55 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/bash/bash-find-files-and-echo-filename-and-contents.html</guid>
      <description>&lt;p&gt;I thought this one would be easy but actually its taken a bit of messing about.&lt;/p&gt;

&lt;p&gt;The goal was to find files matching a pattern, in this case a file name, and then echo out the full path to the file and also the file contents.&lt;/p&gt;

&lt;p&gt;If you are interested, the reason I was doing this was to understand the &lt;em&gt;interesting&lt;/em&gt; approach that the ORO Platform has taken to setting up the AppKernel bundles in Symfony2.&lt;/p&gt;

&lt;p&gt;The command is here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; find . -type f -iwholename &#39;*bundles.yml&#39; | xargs -I % bash -c &amp;quot;echo &#39;&#39;; echo &#39;----------------------&#39;; echo %; cat %; echo &#39;&#39;;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have added in some extra echos to make it format nicely but the main thing is that I am using xargs to handle the results from find.&lt;/p&gt;

&lt;p&gt;The individual result is assigned to the % character. Then a sub shell is instantiated to manage a specific command that both echos % itself and then uses cat to echo the contents of %.&lt;/p&gt;

&lt;p&gt;This gave me an output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;----------------------
./vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/config/oro/bundles.yml
bundles:
    - Oro\Bundle\ImportExportBundle\OroImportExportBundle

----------------------
./vendor/oro/platform/src/Oro/Bundle/PlatformBundle/Resources/config/oro/bundles.yml
bundles:
    - { name: Symfony\Bundle\FrameworkBundle\FrameworkBundle, priority: -255 }
    - { name: Symfony\Bundle\SecurityBundle\SecurityBundle, priority: -250 }
    - { name: Symfony\Bundle\TwigBundle\TwigBundle, priority: -245 }
    - { name: Symfony\Bundle\MonologBundle\MonologBundle, priority: -240 }
    - { name: Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle, priority: -235 }
    - { name: Symfony\Bundle\AsseticBundle\AsseticBundle, priority: -230 }
    - { name: Doctrine\Bundle\DoctrineBundle\DoctrineBundle, priority: -225 }
    - { name: Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle, priority: -220 }
    - { name: Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle, priority: -215 }
    - { name: JMS\SerializerBundle\JMSSerializerBundle, kernel: true, priority: -210 }
    - { name: Knp\Bundle\PaginatorBundle\KnpPaginatorBundle, priority: -205 }
    - { name: Knp\Bundle\MenuBundle\KnpMenuBundle, priority: -200 }
    - { name: FOS\RestBundle\FOSRestBundle, priority: -195 }
    - { name: FOS\JsRoutingBundle\FOSJsRoutingBundle, priority: -190 }
    - { name: Nelmio\ApiDocBundle\NelmioApiDocBundle, priority: -185 }
    - { name: BeSimple\SoapBundle\BeSimpleSoapBundle, priority: -180 }
    - { name: Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle, priority: -175 }
    - { name: Escape\WSSEAuthenticationBundle\EscapeWSSEAuthenticationBundle, priority: -170 }
    - { name: Liip\ImagineBundle\LiipImagineBundle, priority: -165 }
    - { name: Genemu\Bundle\FormBundle\GenemuFormBundle, priority: -155 }
    - { name: A2lix\TranslationFormBundle\A2lixTranslationFormBundle, priority: -150 }
    - { name: Lexik\Bundle\MaintenanceBundle\LexikMaintenanceBundle, priority: -145 }
    - Oro\Bundle\PlatformBundle\OroPlatformBundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can see that the bundle file I was looking for is in the Platform Bundle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrapping a List in Quotes in PHPStorm</title>
      <link>https://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html</link>
      <pubDate>Fri, 06 Dec 2013 11:35:58 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html</guid>
      <description>&lt;p&gt;Some times you might find your self with a list of values you want to copy and paste from somewhere into your PHP code as an array of strings.&lt;/p&gt;

&lt;p&gt;For example, take this list of carrier names that I need to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Blue Package, USPS, UPS, UPSMI, FedEx, DHL, DHL Global Mail, Fastway, UPS Mail Innovations, Lasership, Royal Mail, FedEx SmartPost, OSM, OnTrac, Streamlite, Newgistics, Canada Post, City Link, GLS, GO!, Hermes Logistik Gruppe, Parcelforce, TNT, Target, SagawaExpress, NipponExpress, YamatoTransport, Other
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I really don&amp;rsquo;t fancy wrapping each element of this list with quotes one by one, there must be a better way!&lt;/p&gt;

&lt;p&gt;There is, you can use the regex replace functionality of PHPStorm to do this for you quickly and easily.&lt;/p&gt;

&lt;p&gt;First of all paste the string into your PHPStorm editor and highlight it. Then hit &lt;code&gt;[ctrl]+[r]&lt;/code&gt; to start your find and replace.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;In Selection&amp;rdquo; tick box should be ticked already, you also need to tick the regex box.&lt;/p&gt;

&lt;p&gt;Then in the find section, use this regex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( |)([^,]+),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in your replace box, put this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\n&#39;$2&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets you nearly all the way there, you might just need to tidy up a bit you should now have something looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;Blue Package&#39;,
&#39;USPS&#39;,
&#39;UPS&#39;,
&#39;UPSMI&#39;,
&#39;FedEx&#39;,
&#39;DHL&#39;,
&#39;DHL Global Mail&#39;,
&#39;Fastway&#39;,
&#39;UPS Mail Innovations&#39;,
&#39;Lasership&#39;,
&#39;Royal Mail&#39;,
&#39;FedEx SmartPost&#39;,
&#39;OSM&#39;,
&#39;OnTrac&#39;,
&#39;Streamlite&#39;,
&#39;Newgistics&#39;,
&#39;Canada Post&#39;,
&#39;City Link&#39;,
&#39;GLS&#39;,
&#39;GO!&#39;,
&#39;Hermes Logistik Gruppe&#39;,
&#39;Parcelforce&#39;,
&#39;TNT&#39;,
&#39;Target&#39;,
&#39;SagawaExpress&#39;,
&#39;NipponExpress&#39;,
&#39;YamatoTransport&#39;, Other
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Other&lt;/code&gt; on the end has not been converted has it doesn&amp;rsquo;t have a trailing comma. You could mess about with yoru regex trying to get this to also be converted, or you could say good enough and move on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPStorm Regex Convert Array to Object Syntax</title>
      <link>https://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax.html</link>
      <pubDate>Tue, 27 Aug 2013 14:40:35 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax.html</guid>
      <description>&lt;p&gt;If you are converting some code from using array syntax to object property syntax then you might like this little snippet of regex.&lt;/p&gt;

&lt;p&gt;This is design to paste straight into the find/replace dialogue in PHPStorm&lt;/p&gt;

&lt;p&gt;Find:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$(\w+)\[&#39;([^&#39;]+)&#39;\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\\\$$1-&amp;gt;$2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is it&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPStorm Regex Replace &#34;Malformed Replacement String&#34;</title>
      <link>https://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html</link>
      <pubDate>Thu, 24 Jan 2013 17:39:08 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html</guid>
      <description>&lt;p&gt;If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.&lt;/p&gt;

&lt;p&gt;The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.&lt;/p&gt;

&lt;p&gt;Take the following example code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$data = array();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$form=$page-&amp;gt;find(&amp;#39;form.edit_product&amp;#39;, 0);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//standard inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;text&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//radio inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;radio&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//checkbox inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;checkbox&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//textareas&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$textareas = $form-&amp;gt;find(&amp;#39;textarea&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($textareas as $textarea){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$textarea-&amp;gt;name]=$textarea-&amp;gt;innertext;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And trying to replace the key being used in the data array with a processed one calling a method $this-&amp;gt;dataName($key) to generate the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$data = array();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$form=$page-&amp;gt;find(&amp;#39;form.edit_product&amp;#39;, 0);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//standard inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;text&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//radio inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;radio&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//checkbox inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;checkbox&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//textareas&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$textareas = $form-&amp;gt;find(&amp;#39;textarea&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($textareas as $textarea){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$this-&amp;gt;dataName($textarea-&amp;gt;name)]=$textarea-&amp;gt;innertext;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might try the find pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$data\[\$([^-]+)-&amp;gt;name\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the replace pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$data\[\$this-&amp;gt;dataName(\$$1-&amp;gt;name)\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However this will give you the dreaded &lt;b&gt;&amp;ldquo;malformed replacement string&amp;rdquo;&lt;/b&gt; Error&lt;/p&gt;

&lt;p&gt;The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\\\$data\[\\\$this-&amp;gt;dataName(\\\$$1-&amp;gt;name\)\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works, woot!&lt;/p&gt;

&lt;p&gt;Also when it does work, PHP Storms replacement preview feature is really quite nice&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu Bulk Find And Replace GUI - Regexxer</title>
      <link>https://edmondscommerce.github.io/ubuntu/ubuntu-bulk-find-and-replace-gui-regexxer.html</link>
      <pubDate>Fri, 29 Jan 2010 13:21:27 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/ubuntu/ubuntu-bulk-find-and-replace-gui-regexxer.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you need to do a bulk find and replace operation on a load of files within a particular folder structure, for example when refactoring some of your code, then instead of trying to use your IDE you could give this little app a try.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called Regexxer:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://regexxer.sourceforge.net/&#34;&gt;http://regexxer.sourceforge.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And is in the Ubuntu repositories (Software Centre) so is only a couple of clicks away from being installed.&lt;/p&gt;

&lt;p&gt;(Note previously I have recommended Search Monkey and I still think that&amp;rsquo;s a great tool, but it doesn&amp;rsquo;t seem to do replace, only find).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>