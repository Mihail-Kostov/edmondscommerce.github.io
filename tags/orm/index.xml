<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Orm on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/orm/</link>
    <description>Recent content in Orm on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Sep 2017 09:10:44 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/orm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Doctrine Orm - An Introduction and Then a New Idea</title>
      <link>https://edmondscommerce.github.io/doctrine-orm---an-introduction-and-then-a-new-idea/</link>
      <pubDate>Thu, 14 Sep 2017 09:10:44 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/doctrine-orm---an-introduction-and-then-a-new-idea/</guid>
      <description>

&lt;h2 id=&#34;what-is-doctrine-orm&#34;&gt;What is Doctrine ORM&lt;/h2&gt;

&lt;p&gt;Doctrine is one of the most popular ORM systems for PHP. It is written as a fully standalone library though is most famously used as the ORM that is bundled with a standard Symfony project.&lt;/p&gt;

&lt;p&gt;Read the docs here&lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/getting-started.html#what-is-doctrine&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doctrine ORM is only one of the &lt;a href=&#34;http://www.doctrine-project.org/projects.html&#34; target=&#34;_blank&#34;&gt;projects&lt;/a&gt; projects that Doctrine has built, however it does build upon all of the other projects.&lt;/p&gt;

&lt;h2 id=&#34;what-is-an-orm&#34;&gt;What is an ORM&lt;/h2&gt;

&lt;p&gt;An ORM, or Object Relational Mapper, attempts to allow developers write code and work with objects and then have the persistance and relation of those objects handled behind the scenes, thereby allowing the developer to focus on the domain issues and not in hand crafting a large amount of SQL schema and query logic.&lt;/p&gt;

&lt;p&gt;This becomes especially useful as a project progresses and things are added or refactored. The ORM can ultimately allow the developer to focus on the code and then the schema and query logic can be updated as you go, generally with something called database migrations. The benefit of not having to manually refactor large amounts of SQL logic is definitely not to be sniffed at.&lt;/p&gt;

&lt;p&gt;Generally when working with Doctrine entities, the code is very much plain vanilla PHP. I prefer to keep the Doctrine entities as basic as possible, purely focussed on data access &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_access_object&#34; target=&#34;_blank&#34;&gt;data access&lt;/a&gt;, with any extra logic then being handled in other classes. Again this aids with refactoring and comprehension and sticks more closely to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34; target=&#34;_blank&#34;&gt;single responsibility principle&lt;/a&gt; single responsibility principle.&lt;/p&gt;

&lt;h2 id=&#34;doctrine-metadata&#34;&gt;Doctrine Metadata&lt;/h2&gt;

&lt;p&gt;The crux of Doctrine&amp;rsquo;s work hinges around the management and utlisation of meta data which describes exactly how entities are structured and related to each other and how they should be stored and represented in the database.&lt;/p&gt;

&lt;p&gt;There are three main ways people tend to manage this meta data, XML, Yaml and PHP Annotations. They all have their pros and cons, though I think it would be fair to say that the PHP Annotations approach is probably the most popular.&lt;/p&gt;

&lt;p&gt;You can read all about the &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/metadata-drivers.html#core-metadata-drivers&#34; target=&#34;_blank&#34;&gt;meta data drivers on Doctrines documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;new-idea&#34;&gt;New Idea&lt;/h2&gt;

&lt;p&gt;In addition to the traditional three drivers of XML, Yaml and PHP Annotations there is a &lt;a href=&#34;https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.php&#34; target=&#34;_blank&#34;&gt;Static PHP Driver&lt;/a&gt; which is documented &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/php-mapping.html#static-function&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this is a perfect compromise, it keeps things in pure PHP but also in the Entity classes.&lt;/p&gt;

&lt;p&gt;To explore this idea I have developed a small repo that utilises this driver and present a possible way it can be used to power a highly trait driven way of composing Doctrine entities.&lt;/p&gt;

&lt;p&gt;Rather than repeat myself, I&amp;rsquo;ll simply link you through to the project &lt;a href=&#34;https://github.com/edmondscommerce/doctrine-static-meta&#34; target=&#34;_blank&#34;&gt;Doctrine Static Meta&lt;/a&gt;, also available on &lt;a href=&#34;https://packagist.org/packages/edmondscommerce/doctrine-static-meta&#34; target=&#34;_blank&#34;&gt;packagist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>