<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Search on Edmonds Commerce Dev Blog</title>
    <link>http://edmondscommerce.github.io/tags/search/</link>
    <description>Recent content in Search on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jun 2014 10:09:16 +0000</lastBuildDate>
    <atom:link href="http://edmondscommerce.github.io/tags/search/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fast E-Commerce Search Solution</title>
      <link>http://edmondscommerce.github.io/ecommerce/fast-e-commerce-search-solution.html</link>
      <pubDate>Thu, 12 Jun 2014 10:09:16 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/ecommerce/fast-e-commerce-search-solution.html</guid>
      <description>&lt;p&gt;One of the trickiest parts of any e-commerce store to get running quickly is the search results. The problem is compounded for large or complex stores where a database query based search for a multi word search phrase can become a real behemoth of a database query that has to search for each word in a multitude of database tables and columns. Then throw in other issues such as table locking and the performance issues can start to hurt the site as a whole.&lt;/p&gt;

&lt;p&gt;###Caching for Performance&lt;/p&gt;

&lt;p&gt;One common solution to scaling up e-commerce stores is to use a variety of methods and levels of caching, from a database query cache right up to a full page caching system perhaps powered by Varnish. This solution works well for product and category pages for which there is a finite number. When it comes to search results pages though, each possible search phrase is a completely separate set of pages. You might be able to keep a warm cache for your most popular search phrases but anything else will be raw results. It will show your server at its worst performance.&lt;/p&gt;

&lt;p&gt;###Alternative Enterprise Search Engine
In this scenario it is time to start looking at other search solutions. If you want a turnkey professional solution then check out Google Commerce Search. This premium offering gives you a powerful search engine that is entirely outsourced and uses Google technology to deliver great quality results. As you can probably imagine though, this premium product comes with a premium and enduringly high subscription fee.&lt;/p&gt;

&lt;p&gt;###Enterprise Open Source
Instead what we are now recommending to our larger clients is to look at implementing the Solr search engine. Apache Solr is an enterprise level search engine. It is used in a wide variety of impressive sites â€“ you can see a list here. Names like Netflix, The Guardian and eBay really underline the fact that this is serious and powerful technology.&lt;/p&gt;

&lt;p&gt;###Advanced Search Functionality
The great thing is that it is also pretty easy to set up and get running. To get a basic search engine working is no more than a few hours of work. There are many possibilities with the search engine including spelling suggestions, parametric (faceted in Solr speak) search, synoyms, auto suggest and loads more. Depending on exactly how you want this to work will determine exactly how much work is involved.&lt;/p&gt;

&lt;p&gt;Solr provides a huge amount of configurability and tuning. For this reason we would always expect a new install of Solr to be followed up with a bit of tweaking to make sure you are getting the right results. Once the right configuration has been determined we can then expect the engine to work tirelessly, serving up lightning fast and excellent quality results without any further investment from your business.&lt;/p&gt;

&lt;p&gt;##Implement Solr Search Today
If you would like your site to be fitted out with a Solr based search system by a professional UK based e-commerce web development agency then get in touch with &lt;a href=&#34;http://www.edmondscommerce.co.uk/contact&#34; target=&#34;_blank&#34;&gt;Edmonds Commerce&lt;/a&gt; today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache Mod Rewrite and Escaped Hashes (and other characters)</title>
      <link>http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters.html</link>
      <pubDate>Mon, 22 Apr 2013 13:57:49 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters.html</guid>
      <description>&lt;p&gt;If you are having issues with mod rewrite apparently abandoning sections of variables after encoded hashes then this could be your solution.&lt;/p&gt;

&lt;p&gt;The use case is particularly clear when using mod_rewrite in front of a search engine (such as Solr which I am really enjoying working with at the moment).&lt;/p&gt;

&lt;p&gt;Imagine someone search for a partcode ABC#123&lt;/p&gt;

&lt;p&gt;This gets encoded to search/abc%23123&lt;/p&gt;

&lt;p&gt;Your rewritten search term will then be mangled by Apache and your search script will only actually see ABC. That is of course a problem and the solution is not really clear.&lt;/p&gt;

&lt;p&gt;After a bit of searching around I found the solution is to add a B flag to your mod_rewrite rule so that mod_rewrite will escape these characters so that they are cleanly passed through.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;RewriteRule ^(.*)search/(.*)$ advanced_search_result.php?keywords=$2 [L,B]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Apache Mod Rewrite Escaped Slashes Problem &#43; Solution</title>
      <link>http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution.html</link>
      <pubDate>Thu, 11 Apr 2013 11:05:20 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution.html</guid>
      <description>&lt;p&gt;As part of our Magento SEO service, the first thing we do is to make sure there are no issues with the crawlability and general health of the clients web site.&lt;/p&gt;

&lt;p&gt;Whilst working on the Google Webmaster Tools crawl errors for a client I noticed one specific and intruiging problem for which I couldn&amp;rsquo;t immediately see the reason, everything looked to be set up perfectly.&lt;/p&gt;

&lt;p&gt;Certain URLs were getting 404 responses. The URL was being parsed by mod_rewrite but everything looked fine so why was apache giving a 404?&lt;/p&gt;

&lt;p&gt;The problem turns out to be that the URLs contain escaped slashes (eg search/KTA-mb667k2%2F2g),&lt;/p&gt;

&lt;p&gt;The problem is that Apache actually handles the escaped slash and helpfully converts it to a real slash. That then means that it is trying to look in a sub folder that does not exist and hence the 404.&lt;/p&gt;

&lt;p&gt;Chances are you don&amp;rsquo;t want escaped slashes to really be thought of as real directory separating slashes, especially if you are using mod_rewrite.&lt;/p&gt;

&lt;p&gt;The answer is a simple one liner to be added to your vhost.conf or httpd.conf.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
AllowEncodedSlashes On

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Magento No Search Results</title>
      <link>http://edmondscommerce.github.io/magento/magento-no-search-results.html</link>
      <pubDate>Wed, 13 Feb 2013 16:46:00 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/magento-no-search-results.html</guid>
      <description>&lt;p&gt;Sometimes Magento will some times return no results with the message &amp;ldquo;Your search returns no results&amp;rdquo; for terms that you would expect it to return many results for.
This can happen for a number of reasons including misconfiguration of search or attributes.&lt;/p&gt;

&lt;p&gt;Unfortunately the way Magento speeds up search queries suffers from a race condition that can lead Magento to think it has cached a query when it has not and at the same time believes there are no products for that search because the cache for that query was dropped. This is a tough issue to solve but it can be done.&lt;/p&gt;

&lt;p&gt;The two methods that work effectively to resolve the race condition problem (thus far) are to first make sure that the query cache isn&amp;rsquo;t empty before using the cached results. This works effectively because if the cache is empty it must have been dropped recently and has not been repopulated.
The other thing you can do to help reduce this further is to make Magento remembers the time at which it dropped. Then have the query caches compare their last updated time against the the last cache drop time and if the update time is before or the same as the drop time don&amp;rsquo;t use the cache.
If this isn&amp;rsquo;t completely effective it is also possible to make it not use the query cache if the time of update and the time of drop are with in a minuet of each other to help reduce this further.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPStorm Regex Replace &#34;Malformed Replacement String&#34;</title>
      <link>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html</link>
      <pubDate>Thu, 24 Jan 2013 17:39:08 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html</guid>
      <description>&lt;p&gt;If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.&lt;/p&gt;

&lt;p&gt;The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.&lt;/p&gt;

&lt;p&gt;Take the following example code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$data = array();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$form=$page-&amp;gt;find(&amp;#39;form.edit_product&amp;#39;, 0);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//standard inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;text&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//radio inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;radio&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//checkbox inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;checkbox&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//textareas&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$textareas = $form-&amp;gt;find(&amp;#39;textarea&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($textareas as $textarea){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$textarea-&amp;gt;name]=$textarea-&amp;gt;innertext;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And trying to replace the key being used in the data array with a processed one calling a method $this-&amp;gt;dataName($key) to generate the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$data = array();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$form=$page-&amp;gt;find(&amp;#39;form.edit_product&amp;#39;, 0);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//standard inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;text&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//radio inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;radio&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//checkbox inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;checkbox&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//textareas&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$textareas = $form-&amp;gt;find(&amp;#39;textarea&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($textareas as $textarea){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$this-&amp;gt;dataName($textarea-&amp;gt;name)]=$textarea-&amp;gt;innertext;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might try the find pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$data\[\$([^-]+)-&amp;gt;name\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the replace pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$data\[\$this-&amp;gt;dataName(\$$1-&amp;gt;name)\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However this will give you the dreaded &lt;b&gt;&amp;ldquo;malformed replacement string&amp;rdquo;&lt;/b&gt; Error&lt;/p&gt;

&lt;p&gt;The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\\\$data\[\\\$this-&amp;gt;dataName(\\\$$1-&amp;gt;name\)\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works, woot!&lt;/p&gt;

&lt;p&gt;Also when it does work, PHP Storms replacement preview feature is really quite nice&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Disable the Default DuckDuckGo Seach Engine in Firefox on Linux Mint?</title>
      <link>http://edmondscommerce.github.io/linux-mint/how-to-disabled-the-default-duckduckgo-seach-engine-in-firefox-on-linux-mint.html</link>
      <pubDate>Mon, 07 Jan 2013 15:12:14 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/linux-mint/how-to-disabled-the-default-duckduckgo-seach-engine-in-firefox-on-linux-mint.html</guid>
      <description>&lt;p&gt;If you are using Firefox browser on Linux Mint you might have notice that the default search engine is not Google but DuckDuckGo.&lt;/p&gt;

&lt;p&gt;DuckDuckGo are presenting themselves as the biggest threat to Google search engine bringing as the main advantage more privacy than what Google currently offer.&lt;/p&gt;

&lt;p&gt;If you are happy with it than you are fine but if you feel like me that DuckDuckGo might have some interesting features, it does not bring the same result or way of using internet than Google search engine then you might want to come back to Google then please follow the below step by step procedure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Type about:config in the location bar and press Enter

Type keyword.URL in filter

Change the keyword.URL value to:

http://www.google.co.uk/search?ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;sourceid=navclient&amp;amp;gfns=1&amp;amp;q=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope that help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Link Building Strategies â€“ The Complete List | Point Blank SEO</title>
      <link>http://edmondscommerce.github.io/link-building/link-building-strategies-%E2%80%93-the-complete-list-point-blank-seo.html</link>
      <pubDate>Wed, 22 Feb 2012 08:16:25 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/link-building/link-building-strategies-%E2%80%93-the-complete-list-point-blank-seo.html</guid>
      <description>&lt;p&gt;Very comprehensive list of link building strategies, some great inspiration for anyone looking to boost their SEO.&lt;/p&gt;

&lt;p&gt;Mostly common sense though a few interesting ideas you may not gave thought of.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pointblankseo.com/link-building-strategies&#34;&gt;http://pointblankseo.com/link-building-strategies&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Search History for Specific Line of Code or String</title>
      <link>http://edmondscommerce.github.io/git/git-search-history-for-specific-line-of-code-or-string.html</link>
      <pubDate>Fri, 09 Dec 2011 11:18:51 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/git/git-search-history-for-specific-line-of-code-or-string.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you need to track down exactly how and when a particular change happened and you are not even sure exactly where it is (perhaps because its no longer present but you are not totally sure where it was supposed to be) then this little trick can be a life saver.&lt;/p&gt;

&lt;p&gt;You can search git log for a specific string with the -S flag&lt;/p&gt;

&lt;p&gt;eg, searching for a constant definition&lt;/p&gt;

&lt;p&gt;git -log -SCONSTANT_NAME&lt;/p&gt;

&lt;p&gt;very handy indeed :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stage Gear - General Site Improvements</title>
      <link>http://edmondscommerce.github.io/portfolio/stage-gear-general-site-improvements.html</link>
      <pubDate>Thu, 09 Jun 2011 16:46:41 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/portfolio/stage-gear-general-site-improvements.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Stage Gear â€“ General Site Improvements&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Stage Gear needed a number of aspects of their OSCommerce site improving, including the look and feel, the addition of SEO URLs to improve site ranking, improving search on the site and adding basic Facebook integration.&lt;/p&gt;

&lt;h3&gt;Stage Gear&lt;/h3&gt;

&lt;p&gt;Stage Gear is a company that specialise in retailing &lt;a href=&#34;http://www.sound-light-company.co.uk/&#34;&gt;sound and lighting equipment&lt;/a&gt; for use by clubs, pubs, bands and DJs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://edmondscommerce.github.io/images/stagegear-300x224.png&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This project was terrific as it demonstrates that OSCommerce is still fully capable of running a modern web site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu Bulk Find And Replace GUI - Regexxer</title>
      <link>http://edmondscommerce.github.io/ubuntu/ubuntu-bulk-find-and-replace-gui-regexxer.html</link>
      <pubDate>Fri, 29 Jan 2010 13:21:27 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/ubuntu/ubuntu-bulk-find-and-replace-gui-regexxer.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you need to do a bulk find and replace operation on a load of files within a particular folder structure, for example when refactoring some of your code, then instead of trying to use your IDE you could give this little app a try.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called Regexxer:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://regexxer.sourceforge.net/&#34;&gt;http://regexxer.sourceforge.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And is in the Ubuntu repositories (Software Centre) so is only a couple of clicks away from being installed.&lt;/p&gt;

&lt;p&gt;(Note previously I have recommended Search Monkey and I still think that&amp;rsquo;s a great tool, but it doesn&amp;rsquo;t seem to do replace, only find).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Connect Search - Easy Solution</title>
      <link>http://edmondscommerce.github.io/magento/magento-connect-search-easy-solution.html</link>
      <pubDate>Sat, 29 Aug 2009 16:19:48 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/magento-connect-search-easy-solution.html</guid>
      <description>&lt;p&gt;The Magento site has recently switched from serving search results internally to using Google to provide the results. Whilst the Google results pages are a lot faster, we now miss the opportunity to search specific areas of the Magento site.&lt;/p&gt;

&lt;p&gt;In particular, its now a bit of a pain to track down a suitable module in Magento Connect. To make things a bit easier I have knocked together a simple &lt;a href=&#34;http://www.edmondscommerce.co.uk/stuff/magento-connect-search.html&#34;&gt;Magento Connect Search&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;I could easily extend this tool to provide searching of other areas of the Magento site if you wish. Just drop a quick comment against this blog post and I will do it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>