<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Upload on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/upload/</link>
    <description>Recent content in Upload on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Jan 2013 16:49:24 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/upload/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Form File Upload Limits with PHP</title>
      <link>https://edmondscommerce.github.io/php/form-file-upload-limits-with-php.html</link>
      <pubDate>Fri, 11 Jan 2013 16:49:24 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/form-file-upload-limits-with-php.html</guid>
      <description>&lt;p&gt;If you have a form designed to handle file uploads which is failing due to file size then you might like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$arrayMaxes = array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;upload_max_filesize&amp;#39; =&amp;gt; intval(ini_get(&amp;#39;upload_max_filesize&amp;#39;)),&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;post_max_size&amp;#39; =&amp;gt; intval(ini_get(&amp;#39;post_max_size&amp;#39;)),&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;memory_limit&amp;#39; =&amp;gt; intval(ini_get(&amp;#39;memory_limit&amp;#39;))&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$maxUploadSize = min($arrayMaxes);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach ($arrayMaxes as $key =&amp;gt; $value) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if ($value == min($arrayMaxes)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $minimumOfThree = $key;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        break;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo &amp;quot;The maximum file size you can upload is $maxUploadSize, this is due to the php.ini setting $mininimumOfThree&amp;quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will calculate the smallest value that will be allowed based upon php.ini settings.&lt;/p&gt;

&lt;p&gt;You can then incorporate this into your form logic and display so that users have a clear understanding of how large a file they can upload.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Media Save Path Dispretion Method</title>
      <link>https://edmondscommerce.github.io/magento/magento-media-save-path-dispretion-method.html</link>
      <pubDate>Thu, 17 Feb 2011 15:28:57 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-media-save-path-dispretion-method.html</guid>
      <description>&lt;p&gt;If you want to calculate the actual save path that Magento will use for an image file for example then you might find yourself scouring the source code for the specific method that does this.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not the easiest to find, in fact its tucked away in the lib folder inside the Varien_File_Uploader class.&lt;/p&gt;

&lt;p&gt;The method in question is a usefully static method Varien_File_Uploader::getDispretionPath();&lt;/p&gt;

&lt;p&gt;Sorted!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Image Upload from Admin - No Flash</title>
      <link>https://edmondscommerce.github.io/magento/magento-image-upload-from-admin-no-flash.html</link>
      <pubDate>Fri, 19 Feb 2010 11:50:43 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-image-upload-from-admin-no-flash.html</guid>
      <description>&lt;p&gt;If you have any issues with the default Flash based image uploader for the Magento admin, check out this extension which replaces it with a much slicker, faster and less - well &lt;i&gt;flash&lt;/i&gt; - image uploader.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.magentocommerce.com/extension/1756/no-flash-uploader&#34;&gt;http://www.magentocommerce.com/extension/1756/no-flash-uploader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;nice :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drupal 6 File Uploads</title>
      <link>https://edmondscommerce.github.io/drupal/drupal-6-file-uploads.html</link>
      <pubDate>Fri, 10 Jul 2009 12:16:09 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/drupal/drupal-6-file-uploads.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
It&amp;rsquo;s always tempting when  you are new to a framework or system to just roll your own functionality if the built in functionality is not obvious. I was nearly at that stage with Drupal 6 file uploads. Thankfully before I gave in I found this useful blog post which clearly states how Drupal&amp;rsquo;s built in file upload functionality works. Sweet :-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.computerminds.co.uk/file-uploads-drupal-6-part-1&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;http://www.computerminds.co.uk/file-uploads-drupal-6-part-1&#34; target=&#34;_blank&#34;&gt;http://www.computerminds.co.uk/file-uploads-drupal-6-part-1&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>