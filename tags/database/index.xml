<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/database/</link>
    <description>Recent content in Database on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Sep 2017 09:10:44 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Doctrine Orm - An Introduction and Then a New Idea</title>
      <link>https://edmondscommerce.github.io/doctrine-orm---an-introduction-and-then-a-new-idea/</link>
      <pubDate>Thu, 14 Sep 2017 09:10:44 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/doctrine-orm---an-introduction-and-then-a-new-idea/</guid>
      <description>

&lt;h2 id=&#34;what-is-doctrine-orm&#34;&gt;What is Doctrine ORM&lt;/h2&gt;

&lt;p&gt;Doctrine is one of the most popular ORM systems for PHP. It is written as a fully standalone library though is most famously used as the ORM that is bundled with a standard Symfony project.&lt;/p&gt;

&lt;p&gt;Read the docs here&lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/getting-started.html#what-is-doctrine&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doctrine ORM is only one of the &lt;a href=&#34;http://www.doctrine-project.org/projects.html&#34; target=&#34;_blank&#34;&gt;projects&lt;/a&gt; projects that Doctrine has built, however it does build upon all of the other projects.&lt;/p&gt;

&lt;h2 id=&#34;what-is-an-orm&#34;&gt;What is an ORM&lt;/h2&gt;

&lt;p&gt;An ORM, or Object Relational Mapper, attempts to allow developers write code and work with objects and then have the persistance and relation of those objects handled behind the scenes, thereby allowing the developer to focus on the domain issues and not in hand crafting a large amount of SQL schema and query logic.&lt;/p&gt;

&lt;p&gt;This becomes especially useful as a project progresses and things are added or refactored. The ORM can ultimately allow the developer to focus on the code and then the schema and query logic can be updated as you go, generally with something called database migrations. The benefit of not having to manually refactor large amounts of SQL logic is definitely not to be sniffed at.&lt;/p&gt;

&lt;p&gt;Generally when working with Doctrine entities, the code is very much plain vanilla PHP. I prefer to keep the Doctrine entities as basic as possible, purely focussed on data access &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_access_object&#34; target=&#34;_blank&#34;&gt;data access&lt;/a&gt;, with any extra logic then being handled in other classes. Again this aids with refactoring and comprehension and sticks more closely to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34; target=&#34;_blank&#34;&gt;single responsibility principle&lt;/a&gt; single responsibility principle.&lt;/p&gt;

&lt;h2 id=&#34;doctrine-metadata&#34;&gt;Doctrine Metadata&lt;/h2&gt;

&lt;p&gt;The crux of Doctrine&amp;rsquo;s work hinges around the management and utlisation of meta data which describes exactly how entities are structured and related to each other and how they should be stored and represented in the database.&lt;/p&gt;

&lt;p&gt;There are three main ways people tend to manage this meta data, XML, Yaml and PHP Annotations. They all have their pros and cons, though I think it would be fair to say that the PHP Annotations approach is probably the most popular.&lt;/p&gt;

&lt;p&gt;You can read all about the &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/metadata-drivers.html#core-metadata-drivers&#34; target=&#34;_blank&#34;&gt;meta data drivers on Doctrines documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;new-idea&#34;&gt;New Idea&lt;/h2&gt;

&lt;p&gt;In addition to the traditional three drivers of XML, Yaml and PHP Annotations there is a &lt;a href=&#34;https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.php&#34; target=&#34;_blank&#34;&gt;Static PHP Driver&lt;/a&gt; which is documented &lt;a href=&#34;http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/php-mapping.html#static-function&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this is a perfect compromise, it keeps things in pure PHP but also in the Entity classes.&lt;/p&gt;

&lt;p&gt;To explore this idea I have developed a small repo that utilises this driver and present a possible way it can be used to power a highly trait driven way of composing Doctrine entities.&lt;/p&gt;

&lt;p&gt;Rather than repeat myself, I&amp;rsquo;ll simply link you through to the project &lt;a href=&#34;https://github.com/edmondscommerce/doctrine-static-meta&#34; target=&#34;_blank&#34;&gt;Doctrine Static Meta&lt;/a&gt;, also available on &lt;a href=&#34;https://packagist.org/packages/edmondscommerce/doctrine-static-meta&#34; target=&#34;_blank&#34;&gt;packagist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phpstorm and Mysql Scratch Files</title>
      <link>https://edmondscommerce.github.io/phpstorm-and-mysql-scratch-files/</link>
      <pubDate>Fri, 20 Jan 2017 12:39:15 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/phpstorm-and-mysql-scratch-files/</guid>
      <description>

&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;Recently I have been writing a number of internal scripts that interface with one of our databases to check a few things.
A lot of the time we use PhpMyAdmin or the standard Mysql command line client where necessary but there is a better
and more reliable way to fire queries to the database.&lt;/p&gt;

&lt;p&gt;Enter PHP Storm.&lt;/p&gt;

&lt;h3 id=&#34;php-storm-and-mysql&#34;&gt;PHP Storm and MySQL&lt;/h3&gt;

&lt;p&gt;PHPStorm has been extended so much over the years that it can be used for fully fledged raw SQL on it&amp;rsquo;s own which can be very handy.
To start off, look in to adding your database source (we use MySql but any data source supported will work too).&lt;/p&gt;

&lt;p&gt;You can also use an SSH tunnel for your remote projects!&lt;/p&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://confluence.jetbrains.com/display/PhpStorm/Databases+and+SQL+Editor+in+PhpStorm#DatabasesandSQLEditorinPhpStorm-Settingupadatabaseconnection&#34;&gt;
Data source Guide
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have your data source set up and configured, you are now ready to start firing queries, open a new scratch file and choose &lt;code&gt;mysql&lt;/code&gt; or which ever data source type you are currently using.
You will now have full auto completion and error highlighting out of the box and a bunch of other useful features.&lt;/p&gt;

&lt;h3 id=&#34;selective-statement-execution&#34;&gt;Selective Statement Execution&lt;/h3&gt;

&lt;p&gt;One useful feature besides the code completion is the ability to only execute certain parts of large SQL statements with inner statements so to ensure the expected results are returned.
See the screen shots for an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://edmondscommerce.github.io/images/phpstorm-mysql-editor.png&#34; alt=&#34;PHP Storm Mysql Editor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When selecting the code block, hit &lt;code&gt;CTRL+Enter&lt;/code&gt; or the shortcut for completion in your settings and you can then cycle through which parts of the query to run with the arrow keys.
As you cycle different parts of the query will have the green border to indicate this.&lt;/p&gt;

&lt;p&gt;This feature was tested in PHP Storm 2017.1 (EAP) but should be present in 2016.*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Base table or view already exists: 1050 Table ‘*’ already exists&#34; After Deleting Tables</title>
      <link>https://edmondscommerce.github.io/magento/base-table-or-view-already-exists-1050-table-already-exists-after-deleting-tables.html</link>
      <pubDate>Tue, 08 Jan 2013 16:27:02 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/base-table-or-view-already-exists-1050-table-already-exists-after-deleting-tables.html</guid>
      <description>&lt;p&gt;If for example you&amp;rsquo;re removing an extension and want to clear out its information from the database, you&amp;rsquo;ll need to establish the rows and tables it&amp;rsquo;s inserted, as well as some standard Magento table entries.&lt;/p&gt;

&lt;p&gt;So you&amp;rsquo;ve removed everything, cleared your cache and now you go to the homepage to check everything is all good, and boom, PDOException:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Base table or view already exists: 1050 Table ‘*’ already exists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case it was &lt;code&gt;salesrule&lt;/code&gt;, which made me question why it was trying to create the table afresh. The reason I got this is that I&amp;rsquo;d erroneously removed salesrule_setup from core_resource, and therefore Magento was reinstalling the module. Reinstating the row, and clearing my cache solved the issue&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run Multiple MySQL Queries in a Single Function</title>
      <link>https://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function.html</link>
      <pubDate>Wed, 14 Nov 2012 12:45:09 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function.html</guid>
      <description>&lt;p&gt;If you want to be able to run multiple queries in a single function call, for example doing the classic drop table blah; create table blah; then you might like this function.&lt;/p&gt;

&lt;p&gt;The use case is for things like database migration systems which you might copy and paste chunks of SQL including multiple queries from things like phpMyAdmin&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Run multiple queries passed in as a single string&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * This is optimised for copying and pasting from phpMyAdmin&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Handy for things like database migration systems&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @param string $sql  multiple queries terminated with ; and a new line&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;function multiQuery($sql)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $sqls = preg_split(&amp;#39;%;$%m&amp;#39;, trim($sql));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    foreach ($sqls as $q) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (empty($q)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            continue;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        mysql_query($q); //suggest you replace this with your custom query function or if not throw in some extra error checking at least&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Magento Profiler Improved - Aoe_Profiler by Fabrizio Branca</title>
      <link>https://edmondscommerce.github.io/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca.html</link>
      <pubDate>Fri, 17 Aug 2012 15:31:32 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca.html</guid>
      <description>&lt;p&gt;The Magento profiler is useful when you are trying to discover what potential bottlenecks are in place in a specific Magento implementation that are slowing down the performance of the site. Often when doing this kind of analysis you might find that a particular block or extension is responsible for more than 70% of the total page load time. At this point you would choose to either optimise, cache or disable the block altogether to remove this performance bottleneck and improve page speed significantly.&lt;/p&gt;

&lt;p&gt;If you have ever tried to use Magento&amp;rsquo;s built in profiler you will no doubt agree with Fabrizio&amp;rsquo;s comments that, when you have it working, the output is hard to read and not really very useful in terms of seeing what is actually going on.&lt;/p&gt;

&lt;p&gt;To aid with this process and give us a nice colourful and friendly user interface to the Magento profiler, Fabrizio has built a Magento module that extends the default profiler and makes it a much more useful tool.&lt;/p&gt;

&lt;p&gt;You can download the extension from &lt;a href=&#34;https://github.com/fbrnc/Aoe_Profiler&#34; title=&#34;Magento Aoe Profiler on Git Hub&#34; target=&#34;_blank&#34;&gt;git hub here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read the full blog story &lt;a href=&#34;http://www.fabrizio-branca.de/magento-profiler.html&#34; title=&#34;Fabrizio Branch blog&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like some help optimising the performance of your Magento store, feel free to get in touch with Edmonds Commerce today and we can assist in getting the very best performance from your Magento web site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mysql_dump not restored correctly 1064: USING BTREE &#43; fix</title>
      <link>https://edmondscommerce.github.io/mysql/mysql_dump-not-restored-correctly-1064-using-btree-fix.html</link>
      <pubDate>Thu, 10 Nov 2011 18:30:05 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/mysql/mysql_dump-not-restored-correctly-1064-using-btree-fix.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
When migrating one server to another you often hit bumps in the road.  Todays was transferring a database from one server to another.&lt;/p&gt;

&lt;p&gt;During this standard procedure I found that the restored database was missing a few tables.  Irritating as Magento doesn&amp;rsquo;t like missing tables.&lt;/p&gt;

&lt;p&gt;Digging down into the backup and extracting the first missing table I was able to replicate the error which came out as
&lt;code&gt;1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &amp;lsquo;USING BTREE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I eventually found out that some versions of mysql 5.1 export a dump file that contains mysql5.1 specific features and loading the file into mysql 5.0 will not work.&lt;/p&gt;

&lt;p&gt;The solution is a little frustrating but if you run the command with the &amp;ndash;compatible=mysql40 switch, the dump file extracts fine :-
&lt;code&gt;mysqldump &amp;ndash;compatible=mysql40&lt;/code&gt;
Don&amp;rsquo;t ask me why there&amp;rsquo;s no &amp;ndash;compatible=mysql50 flag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Database Repair Tool</title>
      <link>https://edmondscommerce.github.io/magento/magento-database-repair-tool.html</link>
      <pubDate>Mon, 17 Aug 2009 08:30:07 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-database-repair-tool.html</guid>
      <description>&lt;p&gt;Varien have just released a new tool to help repair Magento databases. The system works by taking a reference database (a clean installation of the same Magento version your store is running) and comparing this to your live store DB.&lt;/p&gt;

&lt;p&gt;It then goes through and repairs your store DB, fixing things like missing foreign keys etc.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t personally seen a requirement for this as yet, but if they have gone to the effort of releasing a tool I imagine it is because there is a requirement for this kind of tool. Definitely something to bear in mind if you ever do need to repair an Existing Magento database.&lt;/p&gt;

&lt;p&gt;Read the full wiki post here:
&lt;a href=&#34;http://www.magentocommerce.com/wiki/doc/db-repair-tool&#34;&gt;http://www.magentocommerce.com/wiki/doc/db-repair-tool&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>