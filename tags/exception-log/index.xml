<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exception Log on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/exception-log/</link>
    <description>Recent content in Exception Log on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Nov 2010 10:18:58 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/exception-log/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento Debugging - An Introduction to Magento Exception Logging and Developer Mode</title>
      <link>https://edmondscommerce.github.io/magento/magento-debugging-an-introduction-to-magento-exception-logging-and-developer-mode.html</link>
      <pubDate>Mon, 29 Nov 2010 10:18:58 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-debugging-an-introduction-to-magento-exception-logging-and-developer-mode.html</guid>
      <description>&lt;p&gt;One of the first stumbling blocks newcomers to Magento might find is that when things go wrong, they don&amp;rsquo;t know how to find out what it is that&amp;rsquo;s actually going wrong.&lt;/p&gt;

&lt;p&gt;This is because Magento does an excellent job of keeping all of the error information away from people browsing the site. This is without a doubt a very good thing. Error messages can often contain information that would help an attacker compromise your system.&lt;/p&gt;

&lt;p&gt;What Magento does instead (if you have it enabled) is to log all error information to log files which you can then access via FTP etc to view the error information. This is in much the same way as a well configured web server will not display error information generated by PHP itself but will instead display the &amp;ldquo;white screen of death&amp;rdquo; and log the error information to a file.&lt;/p&gt;

&lt;p&gt;Magento exceptions can range from minor notices to major issues but not fatal errors. If PHP has a fatal error then this will be handled by PHP itself.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Magento Exception Logging&lt;/h2&gt;
If you are experiencing errors with Magento, the first thing you need to do is to make sure exception logging is enabled.&lt;/p&gt;

&lt;p&gt;In the admin go to:&lt;/p&gt;

&lt;p&gt;System-&amp;gt;Configuration &amp;gt; Developer &amp;gt; Log Settings &amp;gt; Enabled = Yes&lt;/p&gt;

&lt;p&gt;You can also set custom locations for your error log files, though the defaults are normally fine. Make sure the folder is writeable.&lt;/p&gt;

&lt;p&gt;Now if you are having errors, you can look in var/log at the exception.log and/or system.log files that have been generated.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Magento Developer Mode&lt;/h2&gt;
If you are developing locally and you would like to make Magento dump error information to screen instead of logging to a file, this is very easy to do. You simply need to set the site to run in Developer Mode.&lt;/p&gt;

&lt;p&gt;The most secure way to do this (in the sense that you won&amp;rsquo;t accidently set your live store in Developer Mode) is to edit your local apache configuration and add this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
SetEnv MAGE_IS_DEVELOPER_MODE &amp;quot;true&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to set this up in the directory you are running Magento, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;Directory &amp;quot;/opt/lampp/htdocs&amp;quot;&amp;gt;
    #
    # Possible values for the Options directive are &amp;quot;None&amp;quot;, &amp;quot;All&amp;quot;,
    # or any combination of:
    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
    #
    # Note that &amp;quot;MultiViews&amp;quot; must be named *explicitly* --- &amp;quot;Options All&amp;quot;
    # doesn&#39;t give it to you.
    #
    # The Options directive is both complicated and important.  Please see
    # http://httpd.apache.org/docs/2.2/mod/core.html#options
    # for more information.
    #
    #Options Indexes FollowSymLinks
    # XAMPP
    Options Indexes FollowSymLinks ExecCGI Includes
        SetEnv MAGE_IS_DEVELOPER_MODE &amp;quot;true&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now any Magento site you run from within that folder (or any sub folder) will be running in Developer Mode when you are working locally, but will still be in the much more secure normal mode on the live server, without you having to edit any files within Magento itself.&lt;/p&gt;

&lt;p&gt;If you prefer, you can add this line to your .htaccess file, or you can edit the index.php file to force Developer Mode however with either of these approaches there is always the risk you will accidently upload this file and set your live store into Developer Mode.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>