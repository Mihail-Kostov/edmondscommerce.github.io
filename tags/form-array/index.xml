<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Form Array on Edmonds Commerce Dev Blog</title>
    <link>http://example.com/tags/form-array/</link>
    <description>Recent content in Form Array on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jun 2009 14:43:10 +0000</lastBuildDate>
    <atom:link href="http://example.com/tags/form-array/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Zend Framework Form HTML Array Notation</title>
      <link>http://example.com/zend-framework/zend-framework-form-html-array-notation.html</link>
      <pubDate>Fri, 12 Jun 2009 14:43:10 +0000</pubDate>
      
      <guid>http://example.com/zend-framework/zend-framework-form-html-array-notation.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
After losing an afternoon trying to get my extended Zend Dojo Form class to give me HTML array notation, I have finally found a solution that works. To celebrate I&amp;rsquo;ve decided to share it should anyone else suffer a similar problem.&lt;/p&gt;

&lt;p&gt;Here is the method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;public function addSubFormEl($subFormName, $addElOptions){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        call_user_func_array(array($this,&amp;#39;addElement&amp;#39;), $addElOptions);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $this-&amp;gt;getElement($addElOptions[0])-&amp;gt;setBelongsTo($subFormName);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In one move, this creates the element and assigns it to a HTML array of the name $subFormName. Evidently I am using this with sub forms but there is no reason why you should have to do that.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>