<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/git/</link>
    <description>Recent content in Git on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Apr 2017 17:17:06 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploring Streets Of York and Participation in First Ever PHP Yorkshire conference</title>
      <link>https://edmondscommerce.github.io/exploring-streets-of-york-and-participation-in-first-ever-php-yorkshire-conference/</link>
      <pubDate>Mon, 10 Apr 2017 17:17:06 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/exploring-streets-of-york-and-participation-in-first-ever-php-yorkshire-conference/</guid>
      <description>

&lt;p&gt;When something unbelievable happens, people tend to say “you were in the right place at the right time” that’s why you’re lucky. That is how I feel what happened to me here at Edmonds Commerce Ltd.&lt;/p&gt;

&lt;p&gt;Within first few weeks since I started working on Magento projects here at Edmonds. Nolwenn came to me with a question. “Hey Tadas, development team is going to this conference ‘PHP Yorkshire’, they don’t know what to expect, but it will be fun, will you join them?”&lt;/p&gt;

&lt;p&gt;And then in my head I am like “Wow, my first weeks and I got this promising opportunity to spend the weekend knowing my colleagues better and listen to these passionate people who loves PHP”. Who could decline such offer? So off we go.&lt;/p&gt;

&lt;p&gt;Sunny Friday evening, we are all set and heading to the city of York, which distanced just a bit more than hour from our office in Shipley. Few rounds of everyone&amp;rsquo;s preferred music requests and here we are, passing the door to explore York after we have left our belongings in the place we stayed overnight.&lt;/p&gt;

&lt;h2 id=&#34;the-night-in-york-or-how-to-know-the-city-centre-within-3-pubs&#34;&gt;The night in York or how to know the city centre within 3 pubs&lt;/h2&gt;

&lt;p&gt;I am not into architecture, but York looked very appealing to me and it was my first time visiting it, definitely not last. I didn’t see any building there which would look out of sync. And the buzz of people on the Friday night was more on the calm side, just the way I like. But let’s move onto the fun stuff. So our first stop was just meters away from the place we stayed where we order some beer and appreciated the moment and the beginning of night.&lt;/p&gt;

&lt;p&gt;Then another bar/pub and another. Everyone know how it goes, don’t we? The heading of this part might be too cheesy, you definitely can’t cover all the beauty of York within the distance of 3 pubs, but yeah&amp;hellip; York is great and the beer is great too!&lt;/p&gt;

&lt;h2 id=&#34;the-big-day&#34;&gt;The Big Day&lt;/h2&gt;

&lt;p&gt;So here we are, little bit tired from the night before, but we stood tall in the morning, ready to enjoy our day. I was amazed to be honest, that we were just right on time to begin our conference in the University of York.&lt;/p&gt;

&lt;p&gt;So what was this all conference about? 1 day, 2 tracks, 13 experts. So after all, everyone was satisfied with how it ended.&lt;/p&gt;

&lt;p&gt;To be honest I enjoyed all of the talks I have participated in but the most memorable to me was about HTML5 API’s, naming things and object calisthenics.&lt;/p&gt;

&lt;p&gt;While my colleagues loved the speeches on GIT internals, handling errors gracefully, and they got answered what MySQL 8 is all about and why it is 8 and not any other number and Joseph have even won a MySQL dolphin.&lt;/p&gt;

&lt;p&gt;All in all, the weekend was enjoyable, I am glad I had a chance to be there, know my colleagues better and just be inspired by the talks and the community of PHP.&lt;/p&gt;

&lt;p&gt;- Tadas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jira Release With Git Tag</title>
      <link>https://edmondscommerce.github.io/jira-release-with-git-tag/</link>
      <pubDate>Thu, 21 Jul 2016 11:10:42 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/jira-release-with-git-tag/</guid>
      <description>

&lt;h2 id=&#34;create-jira-release&#34;&gt;Create Jira Release&lt;/h2&gt;

&lt;p&gt;When on the Kanban board for your current project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure all tasks you wish to be included in your release are marked as &amp;lsquo;Done&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;Click the &amp;lsquo;Release&amp;hellip;&amp;rsquo; link in the top right corner of the board.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now be presented with a form asking you to enter details about this
release (the version number you add into &amp;lsquo;Version name&amp;rsquo; will be used later
for the Git tag).&lt;/p&gt;

&lt;p&gt;Once the release has been created you need to navigate to the releases page
using the ship icon on the left. Select your release. You should now see
a &amp;lsquo;Release Notes&amp;rsquo; link.&lt;/p&gt;

&lt;p&gt;In order to get a nice markdown version of your release notes you&amp;rsquo;ll want to
convert the HTML version into markdown (you can use:
&lt;a href=&#34;https://domchristie.github.io/to-markdown/&#34; target=&#34;_blank&#34;&gt;domchristie.github.io/to-markdown&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;create-git-tag&#34;&gt;Create Git Tag&lt;/h2&gt;

&lt;p&gt;Now you have your pretty release notes it&amp;rsquo;s time to create your Git tag for
this release.&lt;/p&gt;

&lt;p&gt;To create the tag run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git tag -a &amp;lt;release version number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now be in you editor of choice; paste the markdown release notes
we just created into there (be sure to remove any &amp;lsquo;#&amp;rsquo; characters as they will
be interpreted as comments).&lt;/p&gt;

&lt;p&gt;Save the notes and that&amp;rsquo;s it. You can now view the tag for this release
using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git show &amp;lt;release version number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Removing untracked files but not git ignored ones</title>
      <link>https://edmondscommerce.github.io/git/removing-untracked-files-but-not-git-ignored-ones.html</link>
      <pubDate>Wed, 17 Jun 2015 12:06:25 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/removing-untracked-files-but-not-git-ignored-ones.html</guid>
      <description>&lt;p&gt;Quite often you drop a load of files in to a git repo, such as a Magento extension, and then immediately regret it. But now you have a pile of files scattered across the repo and no way to Ctrl+Z out of the situation.&lt;/p&gt;

&lt;p&gt;This leaves us with some options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD&lt;/code&gt;, but that&amp;rsquo;ll only revert any changes to &lt;em&gt;tracked&lt;/em&gt; files. What about the untracked files in &lt;code&gt;git status&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Manually &lt;code&gt;rm -rf file1 file2 folder1 folder2&lt;/code&gt; but that&amp;rsquo;s a lot of copypasting.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clean -f&lt;/code&gt;, but that &lt;em&gt;will remove all untracked files, including your gitignored ones&lt;/em&gt;, so we don&amp;rsquo;t want that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way is to &lt;strong&gt;automate the &lt;code&gt;rm -rf&lt;/code&gt; procedure&lt;/strong&gt; mentioned above using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status --porcelain | sed &#39;s#^...##&#39; | while read f; do rm -rf $f; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The TL;DR of this command is that it outputs &lt;code&gt;git status&lt;/code&gt; in a parseable way, and then loops over each file/folder and deletes it. You can see a &lt;a href=&#34;http://explainshell.com/explain?cmd=git+status+--porcelain+%7C+sed+%27s%23%5E...%23%23%27+%7C+while+read+f%3B+do+rm+-rf+%24f%3B+done&#34; target=&#34;_blank&#34;&gt;full command breakdown here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clean Up Meld Files when Git Merging</title>
      <link>https://edmondscommerce.github.io/git/clean-up-meld-files-when-git-merging.html</link>
      <pubDate>Wed, 29 Jan 2014 11:39:19 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/clean-up-meld-files-when-git-merging.html</guid>
      <description>&lt;p&gt;If you do a Git Merge using Meld (a brilliant Linux diff tool) then you might find that there are a bunch of files created that you need to clear up.&lt;/p&gt;

&lt;p&gt;These files will be copies of the merged files and can be safely removed as everything you should need to know is already in Git.&lt;/p&gt;

&lt;p&gt;I wrote the following quick function to find all of these files and remove them. You could add this as a function to your bashrc file if you need to do this regularly.&lt;/p&gt;

&lt;p&gt;Here is the BASH snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git status -su &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -P &lt;span class=&#34;s2&#34;&gt;&amp;quot;\.BACKUP|BASE|LOCAL|REMOTE\.&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -f2 -d&lt;span class=&#34;s2&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Merging Forks for Composer</title>
      <link>https://edmondscommerce.github.io/composer/merging-forks-for-composer.html</link>
      <pubDate>Thu, 05 Dec 2013 19:53:16 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/composer/merging-forks-for-composer.html</guid>
      <description>&lt;p&gt;I am really enjoying using Composer with a Symfony2 project that I am currently working on.&lt;/p&gt;

&lt;p&gt;Recently though I found an issue where I am using the FOSRest Bundle to provide JSON API functionality. This in turn uses the
JMS/SerializerBundle to handle the actual encoding into JSON.&lt;/p&gt;

&lt;p&gt;The problem is that the JMS bundle converts camelCase to snake_case and I decided I really didn&amp;rsquo;t want that. I want my property and entity names to be the same across formats.&lt;/p&gt;

&lt;p&gt;A bit of digging and I found &lt;a href=&#34;https://github.com/passkey1510/JMSSerializerBundle&#34; target=&#34;_blank&#34;&gt;this fork&lt;/a&gt; which features a fix for exactly this problem, brilliant!&lt;/p&gt;

&lt;p&gt;However on trying to get this to install with Composer I simply could not get it to work. Further investigation shows that the version of the JMS bundle that this fork does not meet
the minimum version requirements of the FOSRest bundle. Problem.&lt;/p&gt;

&lt;p&gt;The solution in the end was to fork the JMSSerializerBundle Directly then pull this down locally. Once I had that locally I then added the fork with the fix I need as another remote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add passkey1510 git@github.com:passkey1510/JMSSerializerBundle.git
git merge remote/passkey1510/master
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those three commands added the other fork as another remote allowing me to pull in the commits that feature the fix I need. Finally I pushed this back up to github.&lt;/p&gt;

&lt;p&gt;I can now reference my fork in my composer.json file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;repositories&amp;quot;: [
        {
            &amp;quot;url&amp;quot;: &amp;quot;https://github.com/edmondscommerce/JMSSerializerBundle.git&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;vcs&amp;quot;
        },
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running a &lt;code&gt;composer update --dev&lt;/code&gt; and composer successfully brought in my fork of the Serializerbundle with the extra fixes to allow the property names to stay in camelCase.&lt;/p&gt;

&lt;p&gt;And that is it, problem solved :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Great Way to Simplify Git Merges</title>
      <link>https://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges.html</link>
      <pubDate>Thu, 26 Sep 2013 17:34:04 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges.html</guid>
      <description>&lt;p&gt;If you are struggling with a git merge with a long list of failed merge files then this little trick might be helpful.&lt;/p&gt;

&lt;p&gt;The standard approach is to go file by file and use git mergetool to open the files in a tool like Meld and then manually manage the differences. In many cases though you know exactly which version you want and this is simply a laborious process that doesn&amp;rsquo;t really require human input.&lt;/p&gt;

&lt;p&gt;The solution to this is deceptively simple. All you need to do is to check out the file from the branch you want to keep the version of. If you have an entire directory where you know that the branch (for example master) has the correct version then you can check out that entire directory.&lt;/p&gt;

&lt;p&gt;You might find that sensible use of this technique can save you lots of time and really make the mergetool the one you use for the files where you really do need to merge.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git?answertab=active#tab-top&#34;&gt;this StackOverflow answer&lt;/a&gt; for simplifying this for me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managing Your Web Site and Code Version Control</title>
      <link>https://edmondscommerce.github.io/git/managing-your-web-site-and-code-version-control.html</link>
      <pubDate>Mon, 11 Mar 2013 18:22:29 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/managing-your-web-site-and-code-version-control.html</guid>
      <description>&lt;p&gt;Managing a web site posses many difficulties. On the technical side of things there are really two big problems which are the database and the code for the site.&lt;/p&gt;

&lt;p&gt;Managing the database is currently the hardest thing to do right. The best you can do generally is to make sure you have a daily backup. Then if some thing should happen you would only lose up to 24 hours of new products, order and customers. Significantly more complex solutions are available that offer grater flexibility but these solutions usually depend on the hosting company to support it and often have a large setup cost.&lt;/p&gt;

&lt;p&gt;Conversely, on the code management there are many solutions available that can be implemented easily and generally do not require the assistance of the hosting provider.
To get your sites code base under control you need to use a version control system. A version control system is a system that remembers every change made to code at a given point in time and allows you to easily see the differences between different versions.&lt;/p&gt;

&lt;p&gt;Been able to see the many different versions of all the files that make up the site gives you the following advantages:
You can see when some thing changed.
You can see what was changed.
You can see who changed it.
You can see why it was changed.
You can see the logical progress of changes that lead to a given state.&lt;/p&gt;

&lt;p&gt;Version control is important to maintaining a good code base for all the reasons above plus more (integration with issue tracking, deployment and other systems). It can also be invaluable in disaster recovery scenarios where some code has been altered and it&amp;rsquo;s negatively impacted the site even out side of the version control system. In such scenarios you can take what ever is on the live site and compare it with what is in the version control system really easily.&lt;/p&gt;

&lt;p&gt;It used to be the case that using version control was quite a difficult and technical matter. Fortunately since then there are many tools and websites available to make the whole process much easier.&lt;/p&gt;

&lt;p&gt;GitHub and Bitbucket are currently two really popular websites for hosting Git repositories and provide much material for helping new users along.&lt;/p&gt;

&lt;p&gt;At Edmonds Commerce Git is our version control system of choice because it&amp;rsquo;s very powerful, highly flexible and integrates with many systems. There are several different clients available to help you along with Git but due to the flexibility that git offers to do certain things you may end up reverting to the command line.&lt;/p&gt;

&lt;p&gt;Here is a list of alternative to the TortoiseGit (a popular Windows tool) client
&lt;a href=&#34;http://alternativeto.net/software/tortoisegit/&#34; target=&#34;_blank&#34;&gt;http://alternativeto.net/software/tortoisegit/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git and Sub Module Tips</title>
      <link>https://edmondscommerce.github.io/git/git-and-sub-module-tips.html</link>
      <pubDate>Thu, 24 Jan 2013 17:40:20 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/git-and-sub-module-tips.html</guid>
      <description>&lt;p&gt;Using sub modules in git is incredibly useful and allows for easier and more flexible working when working on component based large projects. In a nut shell the use of sub modules (as the name suggests) allows you to include a git repository as a part of another git repository in order to allow you to use the sub modules code without having to duplicate it&amp;rsquo;s content in to your repository.&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;Important commands you will need when working with sub modules&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;b&gt;git submodule init&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;This tells git to read the modules file and make your local repository aware of any sub modules. When you checkout a repository that uses sub modules nothing is done with them until you do this. You will need to run this at least after cloning a repo but possibly after pulling if new sub modules are added.&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;git submodule update&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;This makes git to update the sub modules to match what the config says it should be. You will probably need this after cloning a repository for the first time or when you pull changes from a remote as some one may have updated the position of the sub module. When running this you should make sure that you don&amp;rsquo;t have any uncommitted changes in any submodules other wise you will lose them and find it hard to retrieve them.&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;git submodule add absolute_path/url_to_repo location_of_repo_in_project&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;This command tells git to add the repository at the specified URL/path to the repository. Git will add it to the modules file. After adding it you need to commit. The path to the repo either needs to be the absolute path if you are working locally or the URL that is accessible via the Internet/LAN depending on your environment. It has to be like this so that it doesn&amp;rsquo;t matter where the repository that will be cloning the sub module is located&lt;/dd&gt;
&lt;dt&gt;&lt;b&gt;git help submodule&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;Gives you the man page for the submodule command, an invaluable resource&lt;/dd&gt;
&lt;/dl&gt;&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;Key facts when working with sub modules&lt;/h4&gt;
&lt;h5&gt;Working in sub modules&lt;/h5&gt;
If you want to modify contents of the sub module, that is make changes and commit them back to the sub modules repository, you can work just as normal. The only thing to watch out off is that when you first do &lt;em&gt;git submodule init; git submodule update;&lt;/em&gt; it will checkout what ever commit was specified. This means that the sub module might not be on an actual branch but instead only have a particular commit checkout. Make sure to checkout the relevant branch on the sub module before commencing work.&lt;/p&gt;

&lt;p&gt;&lt;h5&gt;Updating a sub modules position on a remote repo&lt;/h5&gt;
When &lt;em&gt;git submodule update&lt;/em&gt; runs it checkouts out the specified commit by the main repository. If there is no commit specified it will checkout the default branch (usually master). If you want it to checkout a specific branch this cannot be done in a literal sense. Instead what you have to do is checkout the top commit of that branch, then commit the changes to the sub module in main repository. This will ensure that the sub module is now at that position when &lt;em&gt;git submodule update&lt;/em&gt; is run. You will have to do this every time you want to update it&amp;rsquo;s position.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tip: Have Git Branch Displayed in Bash Prompt</title>
      <link>https://edmondscommerce.github.io/linux/tip-have-git-branch-displayed-in-bash-prompt.html</link>
      <pubDate>Wed, 07 Nov 2012 16:53:02 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/tip-have-git-branch-displayed-in-bash-prompt.html</guid>
      <description>&lt;p&gt;This is a very small tip, but one that can really save accidents in the long term.&lt;/p&gt;

&lt;p&gt;To display the current branch in git simply add the following to your .bashrc in your home directory :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;__git_ps1 &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; 
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git symbolic-ref HEAD 2&amp;gt;/dev/null&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot; (%s)&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##refs/heads/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;debian_chroot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:+(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$debian_chroot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\$( __git_ps1 ) \$\[\033[00m\] &amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is based on the Linux Mint prompt so is nicely coloured as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Diff Colours By Default</title>
      <link>https://edmondscommerce.github.io/git/git-diff-colours-by-default.html</link>
      <pubDate>Tue, 07 Aug 2012 14:48:08 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/git-diff-colours-by-default.html</guid>
      <description>&lt;p&gt;If you want to make git-diff use colours by default, try running this little command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;[color]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; branch = auto&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; diff = auto&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; status = auto&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;[color &amp;quot;branch&amp;quot;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; current = yellow reverse&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; local = yellow&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; remote = green&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;[color &amp;quot;diff&amp;quot;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; meta = yellow bold&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; frag = magenta bold&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; old = red&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; new = cyan&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;[color &amp;quot;status&amp;quot;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; added = yellow&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; changed = green&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt; untracked = cyan&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simply copy and paste the above to your command line and hit return.&lt;/p&gt;

&lt;p&gt;Then if you run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git diff master..BRANCH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get a nice coloured display&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento 2 Source Code Available on GitHub</title>
      <link>https://edmondscommerce.github.io/magento/magento-2-source-code-available-on-github.html</link>
      <pubDate>Mon, 23 Jan 2012 07:37:53 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-2-source-code-available-on-github.html</guid>
      <description>&lt;p&gt;Magento version two is coming. For those of us who are eagerly awaiting the next major version of the most popular and powerful open source e-commerce platform, you can now see, track and download the code on GitHub.&lt;/p&gt;

&lt;p&gt;Not had chance to have an in depth look as yet but we expect great things!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/magento/magento2&#34;&gt;https://github.com/magento/magento2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Search History for Specific Line of Code or String</title>
      <link>https://edmondscommerce.github.io/git/git-search-history-for-specific-line-of-code-or-string.html</link>
      <pubDate>Fri, 09 Dec 2011 11:18:51 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/git-search-history-for-specific-line-of-code-or-string.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you need to track down exactly how and when a particular change happened and you are not even sure exactly where it is (perhaps because its no longer present but you are not totally sure where it was supposed to be) then this little trick can be a life saver.&lt;/p&gt;

&lt;p&gt;You can search git log for a specific string with the -S flag&lt;/p&gt;

&lt;p&gt;eg, searching for a constant definition&lt;/p&gt;

&lt;p&gt;git -log -SCONSTANT_NAME&lt;/p&gt;

&lt;p&gt;very handy indeed :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quickly make a deploy folder from git</title>
      <link>https://edmondscommerce.github.io/git/quickly-make-a-deploy-folder-from-git.html</link>
      <pubDate>Mon, 14 Nov 2011 17:31:00 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/quickly-make-a-deploy-folder-from-git.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
I needed to quickly generate a deploy folder that included all changes in the last two weeks. Using git and a little bit of bash magic I was able to put together a one liner to do this.&lt;/p&gt;

&lt;p&gt;This works we use a public folder within our git structure which makes filtering the files easy, if you don&amp;rsquo;t have this then you will have to change the grep filter to match your needs. Obviously you can change the since filter to get the files you need.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log &amp;ndash;since=&amp;ldquo;2 weeks ago&amp;rdquo; &amp;ndash;name-status | grep public | sort | uniq | awk &amp;lsquo;{print $2}&amp;rsquo; | xargs -I % cp &amp;ndash;parents % /path/to/deploy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps in the future&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu Git Install 1.7.5 and Why</title>
      <link>https://edmondscommerce.github.io/git/ubuntu-git-install-1-7-4-and-why.html</link>
      <pubDate>Thu, 09 Jun 2011 12:42:13 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/git/ubuntu-git-install-1-7-4-and-why.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you use Git a lot, you probably want to run the latest version. Scroll down for some reasons why.&lt;/p&gt;

&lt;p&gt;The standard repository version for Ubuntu is 1.7.1, the current latest is 1.7.5 and there are some significant differences.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;How to Upgrade Git&lt;/h2&gt;
To get 1.7.5 on Ubuntu without too much messing about you can do the following:&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;1. Set up this PPA:&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo add-apt-repository ppa:pdoes/ppa/ubuntu

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;2. Now run an aptitude update and upgrade git&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo apt-get update
sudo aptitude upgrade git

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;3. Now check your git version&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git --version

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Full Script for the lazy&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
sudo add-apt-repository ppa:pdoes/ppa/ubuntu &amp;amp;&amp;amp; sudo apt-get update &amp;amp;&amp;amp; sudo aptitude upgrade &amp;amp;&amp;amp; git --version

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h2&gt;Why Upgrade Git?&lt;/h2&gt;
We have been having lots of merge hassles casued purely by white space changes. Apparently with 1.7.4 new recursive merge strategies came into play that should alleviate this pain and make merging a lot less hassle.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Merge Ignore Whitespace&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git merge -s recursive -Xignore-space-change $BRANCH_NAME

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Less hassle equals more productive and happier developers :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Bash function libraries</title>
      <link>https://edmondscommerce.github.io/programming/linux/ubuntu/building-bash-function-libraries.html</link>
      <pubDate>Fri, 27 May 2011 10:04:15 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/programming/linux/ubuntu/building-bash-function-libraries.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
Bash provides many powerful functions but how can you use these easily?&lt;/p&gt;

&lt;p&gt;If you spend any time using the command line, either to manage a server or on the desktop, you have to quickly become proficient with bash. You will also find the you carry out many of the same tasks time after time.&lt;/p&gt;

&lt;p&gt;This can quickly become tiresome and error prone, particularly if you are piping several commands together. However, bash provides several ways to make your life easier.&lt;/p&gt;

&lt;h3&gt;Aliases&lt;/h3&gt;

&lt;p&gt;If you are always going to be using the same flags with a command, you can ensure that they are called by default by using an alias.&lt;/p&gt;

&lt;p&gt;An alias is a shorthand that bash uses in order to fire commands. Several are included as standard with Ubuntu (and other distros) and are stored in your .bashrc file. You can edit these and add your own as the need occurs.&lt;/p&gt;

&lt;p&gt;An example of this is that I prefer the human readable file sizes when using ls. You can turn these on using the -h flag, but you have to include this every time you run the command. To make things easier I changed the alias for ll (long list) to read as follows&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
alias ll=&amp;quot;ls -ahlF&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way I don&amp;rsquo;t need to remember to put the flag in.&lt;/p&gt;

&lt;p&gt;As you build up more of these commands, it makes sense to store them in a separate file so you can easily find and edit them. You can place all of you aliases in a file called .bash_aliases and they will be available for use.&lt;/p&gt;

&lt;h3&gt;Scripts&lt;/h3&gt;

&lt;p&gt;Aliases are fine for quickly calling simple commands, but many times you will need to carry out more complex tasks. In order to do this, you can make a script, and then call that.&lt;/p&gt;

&lt;p&gt;By placing everything into a script, you benefit from being able to carry out more complicated functions, and the easy of calling it from a single command.&lt;/p&gt;

&lt;p&gt;An example of this would be if you wanted to compare two branches in git, and see all of the files that had been created or modified, but not the files that had been deleted. You create a file called git_get_changed_files and put the following in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/bash
local ORIGINAL CHANGED FILES 
ORIGINAL=&amp;quot;$1&amp;quot;
CHANGED=&amp;quot;$2&amp;quot;

    FILES=$(git diff --name-status $ORIGINAL..$CHANGED public/ | awk &#39;{print $1&amp;quot;@@@@@&amp;quot;$2}&#39;)
    for FILE in $FILES
    do
            echo &amp;quot;$FILE&amp;quot; | awk -F &amp;quot;@@@@@&amp;quot; &#39;{ i=&amp;quot;&amp;quot;; if ($1 != &amp;quot;D&amp;quot;) print $2}&#39;
    done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you place this in your home/bin folder you will then be able to run  git_get_changed_files like a normal command.&lt;/p&gt;

&lt;h3&gt;A Global Function Library&lt;/h3&gt;

&lt;p&gt;You can expand on this by creating a global library of functions. This works by putting all of the functions into a folder, where each file is a namespace for different functions.&lt;/p&gt;

&lt;p&gt;This can be achieved by creating a script that will source of all of the files in a folder, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/bash
for f in $(ls /path/to/folder/); 
    do source /path/to/folder/$f; 
done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call this script func and place it in your home/bin folder. Then you put a script in the folder referenced in the file and use the following structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function parse.(){ # auto complete helper, second argument is a grep against the function list     
    if [[ &#39;&#39; == &amp;quot;$@&amp;quot; ]]
    then
        echo &amp;quot;Parse Namespaced Functions List&amp;quot;
        cat $BASH_SOURCE | grep &amp;quot;^function[^(]&amp;quot; | awk &#39;{j=&amp;quot; USAGE:&amp;quot;; for (i=5; i&amp;lt;=NF; i++) j=j&amp;quot; &amp;quot;$i; print $2&amp;quot; &amp;quot;j}&#39;
    else
        echo &amp;quot;Parse Functions Matching: $@&amp;quot;
        cat $BASH_SOURCE | grep &amp;quot;^function[^(]&amp;quot; | awk &#39;{j=&amp;quot; USAGE:&amp;quot;; for (i=5; i&amp;lt;=NF; i++) j=j&amp;quot; &amp;quot;$i; print $2&amp;quot; &amp;quot;j}&#39; | grep $@
    fi
}

function parse.access_log_top_ten_code() { # Show the top ten code from access_log: useage ...code $FILE $CODE
	FILE=$1
	CODE=$2
	echo &amp;quot;Count the top ten $CODE&#39;d pages&amp;quot;

	cat $FILE | awk &#39;{ i=($9==&amp;quot;$CODE&amp;quot; ) ? $7 : &amp;quot;&amp;quot;; print i; }&#39; | sort | uniq -c | sort -n | tail -n 11 | head -n 10
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this folder a namespace of parse is created. Running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
func parse. 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will list all of the function in the file. Running func parse. log will list all of the function that contain log in the function name or description. When the files are listed, the function name will be displayed with the comment along side it.&lt;/p&gt;

&lt;p&gt;As the func command sources all of the different files, you are able to makes use of the functions across different namespaces. This means that you can create a file that will format output and then use that in with your git functions.&lt;/p&gt;

&lt;p&gt;I hope that you are able to make use of this idea, and build your own library of functions. Anything that you thing would be useful to add to the library, please mention below.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>