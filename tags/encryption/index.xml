<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Encryption on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/encryption/</link>
    <description>Recent content in Encryption on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Nov 2016 19:46:28 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/encryption/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Installing Libsodium and Pecl-libsodium on Centos7 and Php7</title>
      <link>https://edmondscommerce.github.io/installing-libsodium-and-pecl-libsodium-on-centos7-and-php7/</link>
      <pubDate>Wed, 02 Nov 2016 19:46:28 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/installing-libsodium-and-pecl-libsodium-on-centos7-and-php7/</guid>
      <description>&lt;p&gt;If you would like to work with state of the art encryption techniques in your PHP project then you need to check out &lt;a href=&#34;https://download.libsodium.org/doc/&#34; target=&#34;_blank&#34;&gt;libsodium&lt;/a&gt; and the corresponding PHP library, &lt;a href=&#34;https://pecl.php.net/package/libsodium&#34; target=&#34;_blank&#34;&gt;pecl-libsodium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting it installed on your centos7 and PHP7 box though can be a little tricky&lt;/p&gt;

&lt;p&gt;Here is a bash script which will install all the required depencies and get it working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

if [[ &amp;quot;$(whoami)&amp;quot; != &amp;quot;root&amp;quot; ]]
then
    echo &amp;quot;please run this as root&amp;quot;
    exit 1
fi

yum install \
    php70w-pear \
    php70w-devel \
    gcc \
    curl-devel \
    libsodium \
    libsodium-devel

pecl install libsodium

echo &amp;quot;extension=libsodium.so&amp;quot; &amp;gt;&amp;gt; /etc/php.ini

php -i | grep sodium
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this package you can now do all kinds of enterprise level cryptography, suggest you have a read of this &lt;a href=&#34;https://paragonie.com/book/pecl-libsodium&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extending Mage Core Encryption Model to handle Legacy Passwords</title>
      <link>https://edmondscommerce.github.io/magento/extending-mage-core-encryption-model-to-handle-legacy-passwords.html</link>
      <pubDate>Thu, 26 Apr 2012 12:35:29 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/extending-mage-core-encryption-model-to-handle-legacy-passwords.html</guid>
      <description>&lt;p&gt;If you are migrating from an old ecommerce package into Magento, you may well want to extend Magento&amp;rsquo;s password hashing system so that it can understand the passwords that are hashed by the previous system and customers can log in using their old passwords without any hassle.&lt;/p&gt;

&lt;p&gt;You would start off by overriding the Mage_Core_Model_Encryption class like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;class EdmondsCommerce_LegacyPassword_Model_Encryption extends Mage_Core_Model_Encryption {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    /**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * Validate hash against hashing method (with or without salt)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * Extended to support the legacy password hashing of the previous system&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @param string $password&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @param string $hash&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @return bool&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @throws Exception&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function validateHash($password, $hash) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (/*password matches legacy pattern (as stored hash in DB)*/) {            &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            // create a hash of the plain text password and compare to the stored hash&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            return $hashed_pass == $hashval;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        //default magento hashing from here&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return parent::validateHash($password, $hash);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, you will find that the standard model override does not work and you may start vigorous hair pulling at this point.&lt;/p&gt;

&lt;p&gt;The answer though is that your override XML is actually fine, but it isn&amp;rsquo;t being used. This is because of the getEncryptor model in Mage_Core_Helper_Data creates the model using &amp;lsquo;new&amp;rsquo; rather than getModel.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @return Mage_Core_Model_Encryption&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function getEncryptor()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if ($this-&amp;gt;_encryptor === null) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            $encryptionModel = (string)Mage::getConfig()-&amp;gt;getNode(self::XML_PATH_ENCRYPTION_MODEL);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            if ($encryptionModel) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $this-&amp;gt;_encryptor = new $encryptionModel;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            } else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                $this-&amp;gt;_encryptor = Mage::getModel(&amp;#39;core/encryption&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            }&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;            $this-&amp;gt;_encryptor-&amp;gt;setHelper($this);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return $this-&amp;gt;_encryptor;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The class name to use for the encryptor is stored in the config.xml for Mage_Core.&lt;/p&gt;

&lt;p&gt;The solution here is to replicate this XML in your config.xml and also make your legacy module depend on Mage_Core so that it get loaded afterwards and can override the XML.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;config&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;EdmondsCommerce_LegacyPassword&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.1.1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;depends&amp;gt;&lt;/span&gt;Mage_Core&lt;span class=&#34;nt&#34;&gt;&amp;lt;/depends&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/EdmondsCommerce_LegacyPassword&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;global&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;models&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;core&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;rewrite&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;encryption&amp;gt;&lt;/span&gt;EdmondsCommerce_LegacyPassword_Model_Encryption&lt;span class=&#34;nt&#34;&gt;&amp;lt;/encryption&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/rewrite&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/core&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/models&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;helpers&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;core&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;encryption_model&amp;gt;&lt;/span&gt;EdmondsCommerce_LegacyPassword_Model_Encryption&lt;span class=&#34;nt&#34;&gt;&amp;lt;/encryption_model&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/core&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/helpers&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/global&amp;gt;&lt;/span&gt;    
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/config&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Easy once you understand. Another gotcha you have to look out for though!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Encryping data with Magento!</title>
      <link>https://edmondscommerce.github.io/magento/encryping-data-with-magento.html</link>
      <pubDate>Fri, 24 Feb 2012 15:19:41 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/encryping-data-with-magento.html</guid>
      <description>&lt;p&gt;Encrypting a string in Magneto is really easy and will use the encryption key specified in the local.xml file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$encryptedData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;This will be encrypted&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is one problem that you may encounter that can be a little bit problematic but there is an easy work around. The encryption process will strip out non-printing characters or character it does not recognise. Easiest way to get about this is to base64 encode what you are about to encrypt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$encryptedData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;base64_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\r&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;I start with a carriage return&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Decrypting is just as easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$decyptedData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$encryptedData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to base64_decode after decryption if you did base64 encode before encryption:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$decyptedData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;base64_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$encryptedData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>