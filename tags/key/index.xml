<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Key on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/key/</link>
    <description>Recent content in Key on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Dec 2012 12:21:44 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/key/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento Block Caching Cache Key Helper Method - Generate Safe Unique Cache Keys</title>
      <link>https://edmondscommerce.github.io/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys.html</link>
      <pubDate>Tue, 04 Dec 2012 12:21:44 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys.html</guid>
      <description>&lt;p&gt;If you do any work at all on Magento performance optimisation with a view to making pages load faster then you must have come across block caching. To understand block caching you need to first of all understand that a Magento page is actually made up of a lot of nested chunks called blocks.&lt;/p&gt;

&lt;p&gt;Blocks can have their HTML generated dynamically every time though it is also possible to make Magento cache the block HTML output so that it loads a LOT faster, especially with heavy and slow blocks such as best sellers etc.&lt;/p&gt;

&lt;p&gt;When setting up block caching, you need to specify a cache key. If your cache key is not unique enough then there is a risk that you will display the wrong cache for a particular scenario.&lt;/p&gt;

&lt;p&gt;For this reason I created a block caching helper with this method that can generate a very unique cache key based on the current block usage.
/app/code/local/EdmondsCommerce/Helper/Data.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * Generate a nice unique block cache key&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @param Mage_Core_Block_Abstract $block&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     * @return string&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;     */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function ecCacheKey(Mage_Core_Block_Abstract $block){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $class = get_class($block);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $template = $block-&amp;gt;getTemplateFile();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $md5 = md5(var_export($block-&amp;gt;getData(), true));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $params = trim(implode(&amp;quot;,&amp;quot;, $block-&amp;gt;getRequest()-&amp;gt;getParams()), &amp;#39;,&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $category=($block-&amp;gt;getCurrentCategory())?$block-&amp;gt;getCurrentCategory()-&amp;gt;getName():&amp;#39;no-category&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $store_id = Mage::app()-&amp;gt;getStore()-&amp;gt;getId();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return &amp;#39;edmondscommerce-&amp;#39;. $params . &amp;#39;-&amp;#39;. $category . &amp;#39;-&amp;#39; . $store_id . &amp;#39;-&amp;#39; . $class.&amp;#39;-&amp;#39;.$template.&amp;#39;-&amp;#39;.$md5;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You would use this in the following way:&lt;/p&gt;

&lt;p&gt;In a block class, set up the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    public function _construct(){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        parent::_construct();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $this-&amp;gt;addData(array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            &amp;#39;cache_lifetime&amp;#39; =&amp;gt; 999999999,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            &amp;#39;cache_tags&amp;#39; =&amp;gt; array(Mage_Catalog_Model_Product::CACHE_TAG, Mage_Catalog_Model_Category::CACHE_TAG),&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            &amp;#39;cache_key&amp;#39; =&amp;gt; Mage::helper(&amp;#39;blockcaching&amp;#39;)-&amp;gt;ecCacheKey($this)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        ));&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PHP List Function Silently Failing? Solution</title>
      <link>https://edmondscommerce.github.io/php/php-list-function-silently-failing-solution.html</link>
      <pubDate>Wed, 28 Mar 2012 12:01:50 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/php-list-function-silently-failing-solution.html</guid>
      <description>&lt;p&gt;If you use PHP&amp;rsquo;s &lt;a href=&#34;http://php.net/manual/en/function.list.php&#34;&gt;list&lt;/a&gt; function to quickly extract array values out into dollar variables then you might have an issue where it just doesn&amp;rsquo;t work for some reason.&lt;/p&gt;

&lt;p&gt;The problem is that list only works with numeric arrays. If you are using an associative array (with strings for keys instead of numbers) then list will not work.&lt;/p&gt;

&lt;p&gt;There is any easy solution though, simply change:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$array = array(&amp;#39;a&amp;#39;=&amp;gt;1, &amp;#39;b&amp;#39;=&amp;gt;2, &amp;#39;c&amp;#39;=&amp;gt;3);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;list($a, $b, $c) = $array;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$array = array(&amp;#39;a&amp;#39;=&amp;gt;1, &amp;#39;b&amp;#39;=&amp;gt;2, &amp;#39;c&amp;#39;=&amp;gt;3);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;list($a, $b, $c) = array_values($array);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it will work as you expect.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Question: How to Create Bootable Linux USB Key/Drives Easily from Linux</title>
      <link>https://edmondscommerce.github.io/linux/question-how-to-create-bootable-linux-usb-keydrives-easily-from-linux.html</link>
      <pubDate>Tue, 13 Dec 2011 21:49:35 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/question-how-to-create-bootable-linux-usb-keydrives-easily-from-linux.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
Answer to this quite clear and simple question is:&lt;/p&gt;

&lt;p&gt;unetbootin&lt;/p&gt;

&lt;p&gt;Not the easiest to find but definitely one of the easiest solutions.&lt;/p&gt;

&lt;p&gt;If you search for USB bootable drive generators mostly you will find windows apps.&lt;/p&gt;

&lt;p&gt;Not too useful if you are already on Linux and simply want to try the latest version or perhaps an alternative distro on something that is going to give more useful performance than the traditional live CD.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://unetbootin.sourceforge.net/&#34;&gt;uNetbootin&lt;/a&gt; is a nice solid cross platform USB bootable Linux generator that will even handle the download of ISOs for you if required.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Public Key Authentication Easy Instructions</title>
      <link>https://edmondscommerce.github.io/hosting/ssh-public-key-authentication-easy-instructions.html</link>
      <pubDate>Fri, 28 Aug 2009 15:32:40 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/hosting/ssh-public-key-authentication-easy-instructions.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
Just thought I would drop a quick blog and link to this nice succinct guide for setting up SSH to be able to log in via public key.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.petefreitag.com/item/532.cfm&#34;&gt;SSH public key tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using public keys offers you a more secure way of logging into an SSH server and also opens up the possiblity of being able to log into an SSH server without entering your password. This is less secure of course but allows easier remote scripted SSH.&lt;/p&gt;

&lt;p&gt;For example you can set up a user account on your server with limited permissions and then on a remote machine set up public key login capabilites and cron an rsync script to maintain a mirror image of your server without the need for any user intervention.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>