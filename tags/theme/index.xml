<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Theme on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/theme/</link>
    <description>Recent content in Theme on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Mar 2017 11:41:55 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/theme/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started with your own Magento 2 Theme</title>
      <link>https://edmondscommerce.github.io/getting-started-with-your-own-magento-2-theme/</link>
      <pubDate>Fri, 03 Mar 2017 11:41:55 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/getting-started-with-your-own-magento-2-theme/</guid>
      <description>

&lt;h1 id=&#34;prerequisites-and-assumptions&#34;&gt;Prerequisites and Assumptions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Magento 2.1 installation. &lt;a href=&#34;https://edmondscommerce.github.io/magento-2-quick-start-and-common-gotchas/&#34; target=&#34;_blank&#34;&gt;See our tutorial here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basing from Luma theme&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;relevant-technologies&#34;&gt;Relevant Technologies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lesscss.org/&#34; target=&#34;_blank&#34;&gt;Less CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/php/default.asp&#34; target=&#34;_blank&#34;&gt;PHP/PHTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/xml/default.asp&#34; target=&#34;_blank&#34;&gt;XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/html/default.asp&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/js/default.asp&#34; target=&#34;_blank&#34;&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;relevant-magento-2-concepts&#34;&gt;Relevant Magento 2 Concepts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#layout&#34;&gt;Layout XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://edmondscommerce.github.io/introducing-ui-components/&#34;&gt;UI Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;on-this-page&#34;&gt;On this page&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;New Themeing Concepts in Magento 2

&lt;ul&gt;
&lt;li&gt;Module-specific theme files&lt;/li&gt;
&lt;li&gt;Themes&lt;/li&gt;
&lt;li&gt;Static content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Creating the theme structure

&lt;ul&gt;
&lt;li&gt;Folders&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Configuration

&lt;ul&gt;
&lt;li&gt;registration.php&lt;/li&gt;
&lt;li&gt;theme.xml&lt;/li&gt;
&lt;li&gt;Applying your theme&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Theme Files

&lt;ul&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Layout&lt;/li&gt;
&lt;li&gt;Static content (CSS/Images/JS)&lt;/li&gt;
&lt;li&gt;Overriding modulesâ€™ view files&lt;/li&gt;
&lt;li&gt;Common Snippets&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Admin Configuration&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Further Reading&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;new-themeing-concepts-in-magento-2&#34;&gt;New Themeing Concepts in Magento 2&lt;/h1&gt;

&lt;h2 id=&#34;module-specific-theme-files&#34;&gt;Module-specific theme files&lt;/h2&gt;

&lt;p&gt;In Magento 2 there is no longer a &amp;ldquo;base&amp;rdquo; package or &amp;ldquo;default&amp;rdquo; theme. Now, modules contain their own files within their &lt;em&gt;view/(area)/(layout|template|web)&lt;/em&gt; folders.&lt;/p&gt;

&lt;p&gt;Here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/magento/magento2/tree/develop/app/code/Magento/Captcha/view/frontend&#34; target=&#34;_blank&#34;&gt;Magento 2&amp;rsquo;s Captcha Module&amp;rsquo;s theme files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Magestore/Bannerslider-Magento2/tree/master/view/frontend&#34; target=&#34;_blank&#34;&gt;A 3rd party module&amp;rsquo;s theme files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;p&gt;Themes are a new standalone concept in Magento 2. These themes exist to create their own template, layout, CSS files as a self contained package.&lt;/p&gt;

&lt;p&gt;Themes can also specify their own overrides to modules&amp;rsquo; theme files, rather than relying purely on file path matching.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/webgriffe/theme-bootstrap/&#34; target=&#34;_blank&#34;&gt;A standalone theme rooted in &lt;em&gt;app/design/frontend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;static-content&#34;&gt;Static content&lt;/h2&gt;

&lt;p&gt;Static resources such as CSS, images and JS files are no longer served from the theme folder itself. Instead they&amp;rsquo;re &lt;a href=&#34;static-content-css-images-js&#34; target=&#34;_blank&#34;&gt;published&lt;/a&gt; to the &lt;em&gt;pub&lt;/em&gt; folder using either symlinks or copies.&lt;/p&gt;

&lt;h1 id=&#34;creating-the-theme-structure&#34;&gt;Creating the theme structure&lt;/h1&gt;

&lt;h2 id=&#34;folders&#34;&gt;Folders&lt;/h2&gt;

&lt;p&gt;The first step is to create a new namespaced folder path in app/design/frontend/. This would look like &lt;em&gt;app/design/frontend/(Vendor_Name)/(ThemeName)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;magento-2-theme-skeleton-folders&#34;&gt;Magento 2 theme skeleton folders&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;app/design/frontend/(Vendor_Name)/(ThemeName)

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(Module_Name)/&lt;/strong&gt; sets the theme&amp;rsquo;s templates and layout for each module, such as &lt;em&gt;Magento_Catalog&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Magento_Theme/&lt;/strong&gt; for module-agnostic templates and layout

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;layout/&lt;/strong&gt; for layout XML files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template/&lt;/strong&gt; for PHTML template files&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;media/&lt;/strong&gt; contains a preview file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;web/&lt;/strong&gt; contains static content for delivering to the browser

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;css/&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;source/&lt;/strong&gt; - less files&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images/&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;js/&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;registration.php&lt;/strong&gt; registers the theme&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;theme.xml&lt;/strong&gt; contains data about the theme such as the name and parent theme&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;h2 id=&#34;registration-php&#34;&gt;registration.php&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
\Magento\Framework\Component\ComponentRegistrar::register(
    \Magento\Framework\Component\ComponentRegistrar::THEME,
    &#39;frontend/EdmondsCommerce/ThemeTutorial&#39;,
    __DIR__
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;theme-xml&#34;&gt;theme.xml&lt;/h2&gt;

&lt;p&gt;This file specifies information about the theme, as used in Magento&amp;rsquo;s admin&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;theme xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;urn:magento:framework:Config/etc/theme.xsd&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Edmonds Commerce Theme Tutorial&amp;lt;/title&amp;gt;
    &amp;lt;parent&amp;gt;Magento/luma&amp;lt;/parent&amp;gt;
    &amp;lt;media&amp;gt;
        &amp;lt;preview_image&amp;gt;media/preview.jpg&amp;lt;/preview_image&amp;gt;
    &amp;lt;/media&amp;gt;
&amp;lt;/theme&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;applying-your-theme&#34;&gt;Applying your theme&lt;/h2&gt;

&lt;p&gt;To apply a theme to your store, navigate to the Magento Admin&amp;rsquo;s Design Configuration page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log into the Magento Admin&lt;/li&gt;
&lt;li&gt;Click Content, and then under Design click Configuration&lt;/li&gt;
&lt;li&gt;Choose your website/store/store view level, and click Edit&lt;/li&gt;
&lt;li&gt;Set your Applied Theme&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;theme-files&#34;&gt;Theme Files&lt;/h1&gt;

&lt;h2 id=&#34;templates&#34;&gt;Templates&lt;/h2&gt;

&lt;p&gt;Templates are the way to generate frontend HTML content with dynamically generated content.&lt;/p&gt;

&lt;p&gt;Magento allows for the ability to add new template engines to take advantage of other templating languages (such as twig) but only comes with PHP and XHTML renderers out of the box.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bonus fact: the Template Hints are rendered using one of these Template Renderers in &lt;a href=&#34;https://github.com/magento/magento2/blob/develop/app/code/Magento/Developer/Model/TemplateEngine/Decorator/DebugHints.php&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Magento\Developer\Model\TemplateEngine\Decorator\DebugHints&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;folders-1&#34;&gt;Folders&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A module&amp;rsquo;s template files are contained in its &lt;em&gt;view/(area)/templates&lt;/em&gt; folder&lt;/li&gt;
&lt;li&gt;A theme&amp;rsquo;s template files are contained in its &lt;em&gt;Magento_Theme/templates&lt;/em&gt; folder&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;phtml-overview&#34;&gt;PHTML Overview&lt;/h3&gt;

&lt;p&gt;Standard Magento templates are written as PHTML files. This involves a mixture of PHP and HTML, all with a focus on presenting the view-level content. This means business logic should be contained in the &lt;a href=&#34;#blocks&#34;&gt;Block class&lt;/a&gt; and called using its public methods (more on &lt;a href=&#34;#accessing-block-methods&#34;&gt;accessing block methods&lt;/a&gt; below)&lt;/p&gt;

&lt;p&gt;PHTML files look like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;lt;?php echo $url ?&amp;gt;&amp;quot;&amp;gt;
    &amp;lt;?php echo $text ?&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHTML files use &lt;a href=&#34;http://php.net/manual/en/control-structures.alternative-syntax.php&#34; target=&#34;_blank&#34;&gt;PHP&amp;rsquo;s alternative syntax&lt;/a&gt; for &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; etc control structures:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php foreach($array as $item): ?&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;?php echo $item ?&amp;gt;
&amp;lt;?php endforeach; ?&amp;gt;

&amp;lt;?php if($test == &amp;quot;test&amp;quot;): ?&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;?php echo $test ?&amp;gt;
&amp;lt;?php endif; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;accessing-block-methods&#34;&gt;Accessing block methods&lt;/h3&gt;

&lt;p&gt;As part of the rendering process, Magento makes available a &lt;code&gt;$block&lt;/code&gt; variable which represents an object instatiation of the &lt;a href=&#34;#blocks&#34;&gt;Block class&lt;/a&gt;. As with any other PHP object, you can call its public methods from within the template.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a change from Magento 1, where the template was included within the class, and therefore had access to its protected and private methods.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;rendering-child-blocks&#34;&gt;Rendering child blocks&lt;/h3&gt;

&lt;p&gt;Inserting child blocks is pretty much the same as Magento 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php echo $block-&amp;gt;getChildHtml(&#39;block.name&#39;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;translations-and-escaping&#34;&gt;Translations and Escaping&lt;/h3&gt;

&lt;p&gt;Translations can be implemented using the &lt;code&gt;__()&lt;/code&gt; method. Note that this is not a method call on an object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;?php echo __(&#39;Learn More&#39;) ?&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Magento\Framework\View\ElementAbstractBlock&lt;/code&gt; provides public &lt;code&gt;stripTags()&lt;/code&gt; and &lt;code&gt;escapeHtml()&lt;/code&gt; methods. These strip a string of HTML entities and tags respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&amp;lt;?php echo $block-&amp;gt;stripTags($_product-&amp;gt;getName(), null, true); ?&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;!-- the parameters null and true are for string $allowableTags and bool $allowHtmlEntities --&amp;gt;
&amp;lt;span title=&amp;quot;&amp;lt;?php echo $block-&amp;gt;escapeHtml(__(&#39;More Info&#39;)); ?&amp;gt;&amp;quot;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/templates/template-overview.html&#34; target=&#34;_blank&#34;&gt;Magento DevDocs on Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;layout&#34;&gt;Layout&lt;/h2&gt;

&lt;p&gt;In Magento 2, layout XML works a little differently. The most obvious difference is that each layout handle is its own XML file, so your theme&amp;rsquo;s layout folder might look like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Magento_Theme/

&lt;ul&gt;
&lt;li&gt;layout/

&lt;ul&gt;
&lt;li&gt;catalog_product_view.xml&lt;/li&gt;
&lt;li&gt;cms_index_index.xml&lt;/li&gt;
&lt;li&gt;default.xml &lt;em&gt;applies to all pages&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;xml-instructions&#34;&gt;XML Instructions&lt;/h3&gt;

&lt;p&gt;Layout XML in Magento 2 seperates its instructions into four groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;update&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All but the last one correspond to the HTML elements that contain them. &lt;code&gt;&amp;lt;update&amp;gt;&lt;/code&gt; is simply a way to include another handle&amp;rsquo;s instructions into the current file.&lt;/p&gt;

&lt;p&gt;Magento 2 has a few instructions in Layout XML. Some will be familiar from Magento 1, others are new.&lt;/p&gt;

&lt;h4 id=&#34;head-layout-instructions&#34;&gt;Head Layout Instructions&lt;/h4&gt;

&lt;h5 id=&#34;title&#34;&gt;Title&lt;/h5&gt;

&lt;p&gt;Sets the page&amp;rsquo;s title, as used in the window title bar and tab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;css-script-link&#34;&gt;CSS/Script/Link&lt;/h5&gt;

&lt;p&gt;Adds CSS and Javascript resources to the page. The &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag allows for both IE-conditional comments, and to defer loadinf the script until the page has loaded&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;css src=&amp;quot;Namespace_Module::css/style.css&amp;quot; /&amp;gt;

&amp;lt;script src=&amp;quot;Namespace_Module::js/script.js&amp;quot; /&amp;gt;

&amp;lt;link src=&amp;quot;Namespace_Module::js/script.css&amp;quot; ie_condition=&amp;quot;IE 9&amp;quot; defer=&amp;quot;defer&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;meta&#34;&gt;Meta&lt;/h5&gt;

&lt;p&gt;Normal meta tags for the page, with key/value pairs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;body-layout-instructions&#34;&gt;Body Layout Instructions&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/layouts/xml-instructions.html&#34; target=&#34;_blank&#34;&gt;Full documentation on body layout instructions&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;containers&#34;&gt;Containers&lt;/h5&gt;

&lt;p&gt;Containers are a new concept in Magento 2. Containers are intended to represent a part of a page, rather than a block of content. They&amp;rsquo;re not backed by a PHP Class, and can only create an HTML element.&lt;/p&gt;

&lt;p&gt;Attributes can be assigned to the containers, and they can be sorted within their parents.&lt;/p&gt;

&lt;p&gt;Examples of standard containers are the header, footer, left, right and content areas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;container name=&amp;quot;container.name&amp;quot; htmlTag=&amp;quot;div&amp;quot; htmlClass=&amp;quot;class&amp;quot; after=&amp;quot;-&amp;quot;&amp;gt;&amp;lt;/container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;blocks&#34;&gt;Blocks&lt;/h5&gt;

&lt;p&gt;Blocks are used to add content to the page, and are backed by a PHP Block class. &lt;a href=&#34;#more-on-blocks&#34;&gt;More on Blocks&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;block class=&amp;quot;Namespaced\Path\To\Block\Class&amp;quot; name=&amp;quot;top.container.welcome&amp;quot;&amp;gt;&amp;lt;/block&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;move&#34;&gt;Move&lt;/h5&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;move&amp;gt;&lt;/code&gt; instruction allows for a block to be moved from one block or container to another.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;move element=&amp;quot;old.name&amp;quot; as=&amp;quot;new.name&amp;quot; destination=&amp;quot;destination.block.name&amp;quot; before=&amp;quot;-&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;referencecontainer-referenceblock&#34;&gt;ReferenceContainer/ReferenceBlock&lt;/h5&gt;

&lt;p&gt;This allows for more content to be added into a block or container&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;referenceContainer name=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/referenceContainer&amp;gt;

&amp;lt;referenceBlock name=&amp;quot;header&amp;quot;&amp;gt;&amp;lt;/referenceBlock&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-on-blocks&#34;&gt;More on Blocks&lt;/h3&gt;

&lt;h4 id=&#34;block-types&#34;&gt;Block Types&lt;/h4&gt;

&lt;p&gt;There are many types of predefined Block in Magento 2, all contained within &lt;code&gt;Magento\Framework\View\Element&lt;/code&gt; namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Text&lt;/strong&gt; is used for displaying simple text on the page. Good for debugging your layout XML&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text\ListText&lt;/strong&gt; is extended from Text, this is used to contain a sorted list of other blocks. Blocks added as children to this are automatically rendered&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Messages&lt;/strong&gt; are their own block type in Magento 2. These represent the &amp;ldquo;success&amp;rdquo;, &amp;ldquo;error&amp;rdquo; etc banners&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redirect&lt;/strong&gt; perform a client-side redirect, if ever that&amp;rsquo;s desirable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt; for loading a block with an included template. The template is set with &lt;code&gt;&amp;lt;block ... template=&amp;quot;Module_Name::path/to/template.phtml&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;block-methods&#34;&gt;Block methods&lt;/h4&gt;

&lt;p&gt;Parameters can be called on Blocks&amp;rsquo; constructors, as well as their class methods.&lt;/p&gt;

&lt;p&gt;To set constructor parameter values, &lt;code&gt;argument&lt;/code&gt;s can be added thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;arguments&amp;gt;
    &amp;lt;argument name=&amp;quot;logo_img_width&amp;quot; xsi:type=&amp;quot;number&amp;quot;&amp;gt;220&amp;lt;/argument&amp;gt;
    &amp;lt;argument name=&amp;quot;logo_img_height&amp;quot; xsi:type=&amp;quot;number&amp;quot;&amp;gt;70&amp;lt;/argument&amp;gt;
&amp;lt;/arguments&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And class methods by specifying an &lt;code&gt;action&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;action method=&amp;quot;methodName&amp;quot;&amp;gt;
    &amp;lt;argument name=&amp;quot;methodArgumentName&amp;quot; xsi:type=&amp;quot;text&amp;quot;&amp;gt;value&amp;lt;/argument&amp;gt;
    &amp;lt;argument name=&amp;quot;methodArgumentArray&amp;quot; xsi:type=&amp;quot;array&amp;quot;&amp;gt;
        &amp;lt;item name=&amp;quot;array_key&amp;quot; xsi:type=&amp;quot;number&amp;quot;&amp;gt;1337&amp;lt;item&amp;gt;
    &amp;lt;/argument&amp;gt;
&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;static-content-css-images-js&#34;&gt;Static content (CSS/Images/JS)&lt;/h2&gt;

&lt;p&gt;These files are stored in the theme&amp;rsquo;s &lt;em&gt;web&lt;/em&gt; subfolder, under their own &lt;em&gt;css&lt;/em&gt;, &lt;em&gt;js&lt;/em&gt; and &lt;em&gt;images&lt;/em&gt; subfolders.&lt;/p&gt;

&lt;p&gt;In Developer mode these files are read through symlinks created inside the pub folder. In production though they&amp;rsquo;re published to the &lt;em&gt;pub&lt;/em&gt; folder using the &lt;code&gt;bin/magento setup:static-content:deploy&lt;/code&gt; command.&lt;/p&gt;

&lt;h3 id=&#34;images-and-css&#34;&gt;Images and CSS&lt;/h3&gt;

&lt;p&gt;A theme&amp;rsquo;s images and CSS files are stored in the &lt;em&gt;web/images&lt;/em&gt; and &lt;em&gt;web/css&lt;/em&gt; folders respectively.&lt;/p&gt;

&lt;h3 id=&#34;less&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Magento 2 natively supports using CSS preprocessors, and uses Less CSS for its own Luna theme.&lt;/p&gt;

&lt;h4 id=&#34;storing-less-files&#34;&gt;Storing Less files&lt;/h4&gt;

&lt;p&gt;Less files are contained within a modules web/css/source/ folder, with a naming convention that base files are named as &lt;code&gt;file.less&lt;/code&gt; and files to be imported are named with an underscore prefix as &lt;code&gt;_file.less&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;importing-other-less-files&#34;&gt;Importing other less files&lt;/h4&gt;

&lt;p&gt;Because normal Less &lt;code&gt;@import&lt;/code&gt; directives use paths relative to the include path, they&amp;rsquo;re not aware of Magento&amp;rsquo;s fallback system. For this reason, other .less files should be included with &lt;code&gt;//@magento_import file.less&lt;/code&gt; - yes, with the &lt;code&gt;//&lt;/code&gt; comment. This means the Less compiler will ignore it, allowing Magento to handle the fallback in its round of compilation.&lt;/p&gt;

&lt;h4 id=&#34;referencing-images&#34;&gt;Referencing images&lt;/h4&gt;

&lt;p&gt;Image URLs are relative to the &lt;em&gt;web/css&lt;/em&gt; folder, so image paths should be &lt;code&gt;url(&#39;../images/path/to/image.jpg&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;compiling-your-less&#34;&gt;Compiling your Less&lt;/h4&gt;

&lt;p&gt;There are two ways to compile your less files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;grunt&lt;/code&gt; commands:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grunt exec&lt;/code&gt; sets up symlinks from the files in pub/static to your module/theme&amp;rsquo;s files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grunt less&lt;/code&gt; compiles your less to CSS, and then sets up the symlinks to those&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grunt watch&lt;/code&gt; runs a file watcher to track changes to the less files, and compiles the CSS on the fly&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;bin/magento setup:static-content:deploy&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Usually used in production&lt;/li&gt;
&lt;li&gt;Copies the files themselves into the pub folder&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;variables&#34;&gt;Variables&lt;/h4&gt;

&lt;p&gt;Magento provides &lt;a href=&#34;https://github.com/magento/magento2/tree/2.1/lib/web/css/source/lib/variables&#34; target=&#34;_blank&#34;&gt;a set of helpful variables&lt;/a&gt; for use in the Less files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/magento/magento2/blob/2.1/lib/web/css/source/lib/variables/_responsive.less&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@screen__*&lt;/code&gt;&lt;/a&gt; variables for use in &lt;code&gt;@media&lt;/code&gt; queries&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/magento/magento2/blob/2.1/lib/web/css/source/lib/variables/_icons.less#L43&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@icon-*&lt;/code&gt;&lt;/a&gt;` variables for a limited set of icons&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/magento/magento2/blob/2.1/lib/web/css/source/lib/variables/_navigation.less&#34; target=&#34;_blank&#34;&gt;Navigation variables&lt;/a&gt; to customise the category menus&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;further-reading-1&#34;&gt;Further Reading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/css-topics/css_debug.html&#34; target=&#34;_blank&#34;&gt;Compile LESS with Grunt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;Magento recommends including Javascript as part of templates rather than through layout XML to ensure they run as part of the body.&lt;/p&gt;

&lt;p&gt;It makes use of RequireJS to pull in dependencies. These are run with the script tag with a Magento-specific type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-magento-init&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pulling-in-a-javascript-assets&#34;&gt;Pulling in a Javascript assets&lt;/h4&gt;

&lt;p&gt;To pull in the module Magento_Configurable&amp;rsquo;s &lt;em&gt;js/configurable.js&lt;/em&gt; file (which will exist in the &lt;em&gt;pub&lt;/em&gt; folder):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-magento-init&amp;quot;&amp;gt;
   require([&amp;quot;Magento_ConfigurableProduct/js/configurable&amp;quot;], function(Configurable){
        // your function body here
   }); 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To pull in a JavaScript file from your theme, use a relative file path from your theme&amp;rsquo;s &lt;em&gt;web&lt;/em&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-magento-init&amp;quot;&amp;gt;
   require([&amp;quot;js/customFile.js&amp;quot;], function(){
        // your function body here
   }); 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Javascript libraries provided by Magento in the &lt;em&gt;lib&lt;/em&gt; folder are accessed by name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-magento-init&amp;quot;&amp;gt;
   require([&amp;quot;jquery&amp;quot;], function($){
        // your function body here
   }); 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;jquery-widgets&#34;&gt;jQuery Widgets&lt;/h4&gt;

&lt;p&gt;Not to be confused with &lt;a href=&#34;https://edmondscommerce.github.io/introducing-ui-components/&#34;&gt;UI Components&lt;/a&gt;, these extend from jQuery UI components and are useful widgets to use on the frontend. They include accordions, calendars, menus and tabs.&lt;/p&gt;

&lt;p&gt;They can be initialised similar to the following in your template file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    require([
        &#39;jquery&#39;,
        &#39;tabs&#39;], function ($) {
        $(&amp;quot;#footer-accordion&amp;quot;).accordion();
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A full list of Widgets can be found at the &lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/javascript-dev-guide/widgets/jquery-widgets-about.html&#34; target=&#34;_blank&#34;&gt;jQuery Widgets DevDocs page&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;further-reading-2&#34;&gt;Further Reading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/javascript-dev-guide/javascript/js-resources.html&#34; target=&#34;_blank&#34;&gt;Dev Docs on JavaScript Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;overriding-modules-view-files&#34;&gt;Overriding modules&amp;rsquo; view files&lt;/h2&gt;

&lt;p&gt;In Magento 1, overriding other modules&amp;rsquo; assets was as simple as matching the file path in your own theme. In Magento 2, things are pretty similar, except you specify which module you want to override.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your theme (&lt;em&gt;app/design/frontend/(namespace)/(theme)&lt;/em&gt;), create a folder matching the &lt;em&gt;NameSpace_Module&lt;/em&gt; you&amp;rsquo;re overriding&lt;/li&gt;
&lt;li&gt;Create a subfolder for the type of file you&amp;rsquo;re overriding: &lt;em&gt;templates&lt;/em&gt;, &lt;em&gt;layout&lt;/em&gt; or &lt;em&gt;web&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Match the original module&amp;rsquo;s file path, and add your content there&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An example would look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;app/design/frontend/(namespace)/(theme)/

&lt;ul&gt;
&lt;li&gt;Magento_Catalog/

&lt;ul&gt;
&lt;li&gt;layout/

&lt;ul&gt;
&lt;li&gt;catalog_product_view.xml&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;templates/

&lt;ul&gt;
&lt;li&gt;product/

&lt;ul&gt;
&lt;li&gt;list.phtml&lt;/li&gt;
&lt;li&gt;view.phtml&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;common-snippets&#34;&gt;Common Snippets&lt;/h2&gt;

&lt;h3 id=&#34;templates-1&#34;&gt;Templates&lt;/h3&gt;

&lt;h4 id=&#34;url-generation&#34;&gt;URL Generation&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;lt;?php echo $block-&amp;gt;getUrl(&#39;path/to/page&#39;) ?&amp;gt;&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;layout-1&#34;&gt;Layout&lt;/h3&gt;

&lt;h4 id=&#34;new-container&#34;&gt;New container&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;container name=&amp;quot;new_container&amp;quot; htmlClass=&amp;quot;container_css_class&amp;quot; htmlTag=&amp;quot;div&amp;quot;&amp;gt;
    &amp;lt;!-- blocks or containers here --&amp;gt;
&amp;lt;/container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;new-blank-template&#34;&gt;New blank template&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;block class=&amp;quot;Magento\Framework\View\Element\Template&amp;quot;
       template=&amp;quot;Magento_Theme::path/to/template.phtml&amp;quot;
       name=&amp;quot;block_name&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;removing-sidebar-items&#34;&gt;Removing sidebar items&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;referenceBlock name=&amp;quot;catalog.compare.sidebar&amp;quot; remove=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;referenceBlock name=&amp;quot;view.addto.compare&amp;quot; remove=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;referenceBlock name=&amp;quot;category.product.addto.compare&amp;quot; remove=&amp;quot;true&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;removing-my-account-links&#34;&gt;Removing My Account links&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;referenceBlock name=&amp;quot;customer-account-navigation-wish-list-link&amp;quot; remove=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;referenceBlock name=&amp;quot;customer-account-navigation-billing-agreements-link&amp;quot; remove=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;referenceBlock name=&amp;quot;customer-account-navigation-downloadable-products-link&amp;quot; remove=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;referenceBlock name=&amp;quot;customer-account-navigation-newsletter-subscriptions-link&amp;quot; remove=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;referenceBlock name=&amp;quot;customer-account-navigation-my-credit-cards-link&amp;quot; remove=&amp;quot;true&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;admin-configuration&#34;&gt;Admin Configuration&lt;/h1&gt;

&lt;p&gt;A few aspects of the theme can be user-configured through the Admin. This is found in Content &amp;gt; Design &amp;gt; Configuration &amp;gt; (store) &amp;gt; Edit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Logo&lt;/strong&gt; image and dimensions (now includes SVG)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; prefix and suffix as displayed in the tab/title bar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meta keywords/description&lt;/strong&gt; as the default if the page doesn&amp;rsquo;t specify its own&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favicon&lt;/strong&gt; image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Welcome Text&lt;/strong&gt; which is displayed for logged out users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Miscellaneous HTML, scripts and CSS&lt;/strong&gt; inserted before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt; tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Image placeholders are configurable at Stores &amp;gt; Configuration &amp;gt; Catalog &amp;gt; Product Image Placeholders&lt;/p&gt;

&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;

&lt;p&gt;When deploying to the server, you should &lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/config-guide/cli/config-cli-subcommands-mode.html&#34; target=&#34;_blank&#34;&gt;change from Developer mode to Production mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this change in place, resources are served directly from the &lt;em&gt;pub&lt;/em&gt; folder rather than through symlinks or the static.php file. To this end you need to ensure your resources are published.&lt;/p&gt;

&lt;p&gt;This is accomplished using the &lt;code&gt;bin/magento setup:static-content:deploy&lt;/code&gt; command. This will loop through the themes and modules to deploy their static files to the &lt;em&gt;pub&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;Remember to set a locale if an Admin user uses a non-default locale, or else they&amp;rsquo;ll have no CSS in their Admin: &lt;code&gt;bin/magento setup:static-content:deploy --language en_GB&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;further-reading-3&#34;&gt;Further reading&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/themes/theme-create.html&#34; target=&#34;_blank&#34;&gt;Magento 2 Dev Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.creare.co.uk/blog/magento/theming-in-magento-2-part-1&#34; target=&#34;_blank&#34;&gt;Creare Magento 2 themeing guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Magento 2: How to add new tabs to the product page</title>
      <link>https://edmondscommerce.github.io/magento-2-how-to-add-new-tabs-to-the-product-page/</link>
      <pubDate>Tue, 18 Oct 2016 17:52:21 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-2-how-to-add-new-tabs-to-the-product-page/</guid>
      <description>&lt;p&gt;The tabs on the product page are handled by the &lt;code&gt;Magento_Catalog&lt;/code&gt;&amp;rsquo;s &lt;code&gt;product/view/details.phtml&lt;/code&gt; template file. In there the line &lt;code&gt;$block-&amp;gt;getGroupChildNames(&#39;detailed_info&#39;, &#39;getChildHtml&#39;)&lt;/code&gt; collects all blocks in the &lt;code&gt;detailed_info&lt;/code&gt; group for the tabs.&lt;/p&gt;

&lt;p&gt;This means the following layout XML will add a new tab:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;referenceBlock name=&amp;quot;product.info.details&amp;quot;&amp;gt;
            &amp;lt;block class=&amp;quot;Magento\Framework\View\Element\Template&amp;quot; template=&amp;quot;Magento_Theme::path/to/template.phtml&amp;quot; name=&amp;quot;INSERT NAME&amp;quot; group=&amp;quot;detailed_info&amp;quot;&amp;gt;
                &amp;lt;arguments&amp;gt;
                    &amp;lt;argument name=&amp;quot;title&amp;quot; translate=&amp;quot;true&amp;quot; xsi:type=&amp;quot;string&amp;quot;&amp;gt;TAB TITLE HERE&amp;lt;/argument&amp;gt;
                &amp;lt;/arguments&amp;gt;
                &amp;lt;/block&amp;gt;
            &amp;lt;/block&amp;gt;
        &amp;lt;/referenceBlock&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;group=&amp;quot;detailed_info&amp;quot;&lt;/code&gt; part adds it to the tabbed area.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;argument name=&amp;quot;title&amp;quot;&lt;/code&gt; part of that sets a string value on the block which will be used for the tab&amp;rsquo;s title. The content of the block you&amp;rsquo;re adding will be used as the tab content.&lt;/p&gt;

&lt;p&gt;Unfortunately there&amp;rsquo;s no inbuilt way to determine the sort order of these tabs without overriding the &lt;code&gt;details.phtml&lt;/code&gt; template. This is a &lt;a href=&#34;https://github.com/magento/magento2/issues/4154&#34; target=&#34;_blank&#34;&gt;known problem&lt;/a&gt;, but you can choose &lt;a href=&#34;http://magento.stackexchange.com/questions/110796/change-order-of-tabs-on-product-page&#34; target=&#34;_blank&#34;&gt;one of the solutions om StackOverflow&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento 2 - Creating a New Blank Template Block</title>
      <link>https://edmondscommerce.github.io/magento-2---creating-a-new-blank-template-block/</link>
      <pubDate>Mon, 19 Sep 2016 14:52:10 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-2---creating-a-new-blank-template-block/</guid>
      <description>&lt;p&gt;If you want to insert some custom HTML into a page in Magento 2, you&amp;rsquo;ll need to add some layout XML and a template file.&lt;/p&gt;

&lt;p&gt;The equivalent in Magento 1 is a &lt;code&gt;&amp;lt;block type=&amp;quot;core/template&amp;quot; template=&amp;quot;path/to/template.phtml&amp;quot; name=&amp;quot;block_name&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In Magento 2 you achieve this by adding a &lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt; in your &lt;code&gt;default.xml&lt;/code&gt; (or other layout file) with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;referenceContainer name=&amp;quot;container_name&amp;quot;&amp;gt; &amp;lt;!-- the name of the container you want to insert into --&amp;gt;
    &amp;lt;container name=&amp;quot;new_container&amp;quot; htmlClass=&amp;quot;container_css_class&amp;quot; htmlTag=&amp;quot;div&amp;quot;&amp;gt;
        &amp;lt;block class=&amp;quot;Magento\Framework\View\Element\Template&amp;quot; template=&amp;quot;Magento_Theme::path/to/template.phtml&amp;quot; name=&amp;quot;block_name&amp;quot; /&amp;gt;
    &amp;lt;/container&amp;gt;
&amp;lt;/referenceContainer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a template in &lt;code&gt;app/design/frontend/&amp;lt;your_vendor&amp;gt;/&amp;lt;your_theme&amp;gt;/Magento_Theme/path/to/template.phtml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remember to flush all caches.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Allow Customers to Switch Between Mobile and Desktop Themes</title>
      <link>https://edmondscommerce.github.io/magento-allow-customers-to-switch-between-mobile-and-desktop-themes/</link>
      <pubDate>Tue, 23 Aug 2016 10:12:48 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-allow-customers-to-switch-between-mobile-and-desktop-themes/</guid>
      <description>

&lt;p&gt;In this post I&amp;rsquo;ll cover how to create a basic theme switcher for switching between mobile and
desktop themes in Magento.&lt;/p&gt;

&lt;p&gt;The basic steps for the theme switcher are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Customer clicks &amp;lsquo;switch to desktop site&amp;rsquo; link&lt;/li&gt;
&lt;li&gt;Cookie is set saying the user has requested the desktop theme&lt;/li&gt;
&lt;li&gt;The cookie is detected and the correct user agent is set in index.php.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By using a cookie we can make the selection persistent so customers don&amp;rsquo;t need to click this link
each time they visit the site.&lt;/p&gt;

&lt;h2 id=&#34;switcher-block-and-template&#34;&gt;Switcher Block and Template&lt;/h2&gt;

&lt;p&gt;First we want to create our switcher block and template.&lt;/p&gt;

&lt;p&gt;NameSpace/ModuleName/Block/Switcher.php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;class NameSpace_ModuleName_Block_Switcher&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    extends Mage_Core_Block_Template&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function setSwitchToTheme($switchToTheme)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $this-&amp;gt;setData(&amp;#39;switch_to_theme&amp;#39;, $switchToTheme);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    public function getSwitchToTheme()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return $this-&amp;gt;getData(&amp;#39;switch_to_theme&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;app/design/frontend/base/default/template/your/folder/structure/switcher.phtml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;a id=&amp;quot;theme_switcher&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Mage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;core/url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCurrentUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    switch to &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSwitchToTheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt; site&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$viewDesktopTheme&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSwitchToTheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;desktop&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$maxAge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;157680000&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 157680000 secs = 5 years (but set this to whatever you want)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $(&amp;#39;theme_switcher&amp;#39;).observe(&amp;#39;click&amp;#39;, function (e) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        document.cookie = &amp;#39;view_desktop_theme=&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$viewDesktopTheme&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;; max-age=&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$maxAge&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    });&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By using the setter provided by our block within our layout.xml (we&amp;rsquo;ll see this later) we can use the
same block and template for both our mobile and desktop themes.&lt;/p&gt;

&lt;h2 id=&#34;add-block-to-page&#34;&gt;Add Block to Page&lt;/h2&gt;

&lt;p&gt;Next we want to add our switcher block to both our mobile and desktop themes.&lt;/p&gt;

&lt;p&gt;app/design/frontend/your/desktop/theme/layout/mobile_to_desktop_switcher.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;layout&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;default&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;where_you_want_the_switcher_to_go&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;block&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;mobile_to_desktop_switcher&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;namespace_modulename/switcher&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;template=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;your/folder/structure/switcher.phtml&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;setSwitchToTheme&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;switch_to_theme&amp;gt;&lt;/span&gt;mobile&lt;span class=&#34;nt&#34;&gt;&amp;lt;/switch_to_theme&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/default&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;app/design/frontend/your/mobile/theme/layout/mobile_to_desktop_switcher.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;layout&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;default&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;reference&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;where_you_want_the_switcher_to_go&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;block&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;mobile_to_desktop_switcher&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;namespace_modulename/switcher&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;template=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;your/folder/structure/switcher.phtml&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;setSwitchToTheme&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;switch_to_theme&amp;gt;&lt;/span&gt;desktop&lt;span class=&#34;nt&#34;&gt;&amp;lt;/switch_to_theme&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/reference&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/default&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is where we make use of our blocks setter. By placing a layout.xml in each theme we can tell the
block which theme we should switch to. In the desktop theme we pass &amp;lsquo;mobile&amp;rsquo;, in the mobile theme
we pass &amp;lsquo;desktop&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;You can then add the switcher to your theme using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBlockHtml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mobile_to_desktop_switcher&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;add-switch-to-index-php&#34;&gt;Add Switch to index.php&lt;/h2&gt;

&lt;p&gt;Finally we need to add code to index.php which checks for our cookie and sets the current user agent
based on this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/* Show theme based on view_desktop_theme cookie */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if (isset($_COOKIE[&amp;#39;view_desktop_theme&amp;#39;])) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if ($_COOKIE[&amp;#39;view_desktop_theme&amp;#39;] === &amp;#39;true&amp;#39;) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $_SERVER[&amp;#39;HTTP_USER_AGENT&amp;#39;]&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            = &amp;#39;Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    else if ($_COOKIE[&amp;#39;view_desktop_theme&amp;#39;] === &amp;#39;false&amp;#39;) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $_SERVER[&amp;#39;HTTP_USER_AGENT&amp;#39;]&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            = &amp;#39;Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s it, now when your customers click the link they should be toggled between the mobile and
desktop themes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Magento 1.9.1&#39;s Colour Swatches in your custom theme</title>
      <link>https://edmondscommerce.github.io/magento/using-magento-1-dot-9-1-s-colour-swatches-in-your-theme.html</link>
      <pubDate>Thu, 18 Jun 2015 18:56:49 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/using-magento-1-dot-9-1-s-colour-swatches-in-your-theme.html</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve upgraded to Magento 1.9.1 you might have noticed new functionality in the Admin to add colour swatches to your attributes. These work well but for reasons only known to Magento, these require you to be using the new rwd theme, or a derivitive of it. There&amp;rsquo;s no reference to it in base/default so if your theme isn&amp;rsquo;t a derivitive of rwd you&amp;rsquo;ll need to copy the code across.&lt;/p&gt;

&lt;p&gt;If you look in the rwd/default theme, you&amp;rsquo;ll notice there are folders for configurableswatches in layout, template and skin. These are the ones you&amp;rsquo;ll need to copy across. But there&amp;rsquo;s also a bit of customisation needed.&lt;/p&gt;

&lt;h3 id=&#34;step-1-copy-over-the-colourswatches-files-and-folders&#34;&gt;Step 1: Copy over the colourswatches files and folders&lt;/h3&gt;

&lt;p&gt;Copy these files from the rwd theme to the same places in your custom theme&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app/design/frontend/rwd/default/&lt;/code&gt;&lt;strong&gt;&lt;code&gt;layout/configurableswatches.xml&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/design/frontend/rwd/default/&lt;/code&gt;&lt;strong&gt;&lt;code&gt;template/configurableswatches/&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skin/frontend/rwd/default/&lt;/code&gt;&lt;strong&gt;&lt;code&gt;js/configurableswatches/&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-2-update-your-theme-s-layout&#34;&gt;Step 2: Update your theme&amp;rsquo;s layout&lt;/h3&gt;

&lt;p&gt;The layout file &lt;code&gt;configurableswatches.xml&lt;/code&gt; expects certain blocks to be present, which are only set in rwd&amp;rsquo;s &lt;code&gt;catalog.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the following lines to your theme&amp;rsquo;s &lt;code&gt;catalog.xml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;PRODUCT_TYPE_configurable&amp;gt;
        ...
         &amp;lt;reference name=&amp;quot;product.info.options.wrapper&amp;quot;&amp;gt;
             &amp;lt;block type=&amp;quot;catalog/product_view_type_configurable&amp;quot; name=&amp;quot;product.info.options.configurable&amp;quot; as=&amp;quot;options_configurable&amp;quot; before=&amp;quot;-&amp;quot; template=&amp;quot;catalog/product/view/type/options/configurable.phtml&amp;quot;&amp;gt;
    +             &amp;lt;block type=&amp;quot;core/text_list&amp;quot; name=&amp;quot;product.info.options.configurable.renderers&amp;quot; as=&amp;quot;attr_renderers&amp;quot; /&amp;gt;
    +             &amp;lt;block type=&amp;quot;core/text_list&amp;quot; name=&amp;quot;product.info.options.configurable.after&amp;quot; as=&amp;quot;after&amp;quot; /&amp;gt;
             &amp;lt;/block&amp;gt;
         &amp;lt;/reference&amp;gt;
     &amp;lt;/PRODUCT_TYPE_configurable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-add-your-images&#34;&gt;Step 3: Add your images&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s two ways you can set the swatch images:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Globally at &lt;code&gt;media/wysiwyg/swatches&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On the attribute at &amp;gt; Catalog &amp;gt; Attributes &amp;gt; Manage Attributes &amp;gt; [your attribute] &amp;gt; Manage Label/Options (don&amp;rsquo;t forget to save the attribute after it&amp;rsquo;s uploaded)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-4-enable-the-swatches&#34;&gt;Step 4: Enable the swatches&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to enable the use of swatches at System Configuration &amp;gt; Catalog &amp;gt; Configurable Swatches.&lt;/p&gt;

&lt;p&gt;In General Settings, set Enabled to Yes and select your attribures in &amp;ldquo;Product Attributes to Show as Swatches in Product Detail&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;step-5-apply-css&#34;&gt;Step 5: Apply CSS&lt;/h3&gt;

&lt;p&gt;As with everything else the style information is only in rwd&amp;rsquo;s stylesheets. You&amp;rsquo;ll likely need to make some small modifications to make them look acceptable. As a baseline this should suffice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.product-options .swatch-attr .configurable-swatch-list li {
    display: inline-block;
    border:1px solid #CACACA;
    padding: 1px;
}
.product-options .swatch-attr .configurable-swatch-list li.selected {
    border-color:#0095D3;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Nice Gnome Shell Theme - Elegance Colours</title>
      <link>https://edmondscommerce.github.io/linux/nice-gnome-shell-theme-elegance-colours.html</link>
      <pubDate>Thu, 02 Oct 2014 09:11:11 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/linux/nice-gnome-shell-theme-elegance-colours.html</guid>
      <description>

&lt;p&gt;One of the nice features of Gnome Shell is that, with the help of the &lt;a href=&#34;https://extensions.gnome.org/extension/19/user-themes/&#34; target=&#34;_blank&#34;&gt;User Theme&lt;/a&gt; extension, you can really customise
your desktop experience to be something personalised.&lt;/p&gt;

&lt;p&gt;For me, the first thing is to set my desktop background to be a nice picture - something with wide open spaces, mountains and lots of sky.&lt;/p&gt;

&lt;p&gt;The next thing though is to set up a user theme. I like transparency and themes that allow my well chosen background image to shine through.&lt;/p&gt;

&lt;p&gt;For this reason I chose the &lt;a href=&#34;https://github.com/satya164/elegance-colors&#34; target=&#34;_blank&#34;&gt;Elegance Colors&lt;/a&gt; theme as it has a &amp;ldquo;clear&amp;rdquo; preset which also includes functionality to set the colour scheme based
on the background image which is pretty slick I think.&lt;/p&gt;

&lt;p&gt;For installation instructions, please see the &lt;a href=&#34;https://github.com/satya164/elegance-colors/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;README on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;quick-fedora-instructions-are-here&#34;&gt;Quick Fedora instructions are here:&lt;/h2&gt;

&lt;h3 id=&#34;create-repo&#34;&gt;Create Repo&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo sh -c &lt;span class=&#34;s2&#34;&gt;&amp;quot; echo &amp;#39;[home_satya164_elegance-colors]&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;name=Elegance Colors Gnome Shell theme (Fedora_20)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;type=rpm-md&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;baseurl=http://download.opensuse.org/repositories/home:/satya164:/elegance-colors/Fedora_20/&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;gpgcheck=1&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;gpgkey=http://download.opensuse.org/repositories/home:/satya164:/elegance-colors/Fedora_20/repodata/repomd.xml.key&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;enabled=1&amp;#39; &amp;gt; /etc/yum.repos.d/elegance-colors.repo&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;install-theme&#34;&gt;Install Theme&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo yum install gnome-shell-theme-elegance-colors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;run-the-setup&#34;&gt;Run the Setup&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;elegance-colors
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;switch-to-the-theme&#34;&gt;Switch to the Theme&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;gsettings &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; org.gnome.shell.extensions.user-theme name &lt;span class=&#34;s1&#34;&gt;&amp;#39;elegance-colors&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;now-run-the-gui-and-set-it-up&#34;&gt;Now run the GUI and set it up&lt;/h3&gt;

&lt;p&gt;For this you can hit simply search for &amp;lsquo;Elegance Colors&amp;rsquo; from the dash to load the GUI.&lt;/p&gt;

&lt;p&gt;In the GUI you have presets and if you want transparency just choose the clear one. After that of course you can customise as you see fit&lt;/p&gt;

&lt;h2 id=&#34;fonts&#34;&gt;Fonts&lt;/h2&gt;

&lt;p&gt;To make the most of Fedora, its well worth following &lt;a href=&#34;http://worldofgnome.org/how-to-greatly-improve-font-rendering-under-fedora-20/&#34; target=&#34;_blank&#34;&gt;these instructions&lt;/a&gt; to improve font rendering.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easily Test Mobile Version of your Site with Chrome</title>
      <link>https://edmondscommerce.github.io/mobile-optimisation/easily-test-mobile-version-of-your-site-with-chrome.html</link>
      <pubDate>Mon, 03 Jun 2013 15:33:27 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/mobile-optimisation/easily-test-mobile-version-of-your-site-with-chrome.html</guid>
      <description>&lt;p&gt;If you have opted to have a customised mobile theme displayed for mobile users of your web site then it can be useful to be able to test this theme from the desktop. This is quite simple to do and there are plugins for most browsers. These days though Chrome users have this functionality built in, and quite nicely as well.&lt;/p&gt;

&lt;p&gt;To access a mobile version of a site simply open Chrome and navigate to the site you would like to view in mobile version.&lt;/p&gt;

&lt;p&gt;Then hit F12 to bring up the developer tools. Alternatively you can go to the right hand menu and select developer tools under the tools menu. This should bring up a screen looking similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://edmondscommerce.github.io/images/Screenshot-from-2013-06-03-162921-600x475.png&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the bottom right hand corner of this screen you will see a little cog icon, please click that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://edmondscommerce.github.io/images/Screenshot-from-2013-06-03-162956.png&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This gives you the overrides menu where you can select the phone you want to emulate. You can also tick the device metrics box so that the displayable area corresponds to that of the phone giving you a good emultation of the phone experience.&lt;img src=&#34;https://edmondscommerce.github.io/images/Screenshot-from-2013-06-03-163013-600x354.png&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tick the box next to User Agent and choose a phone.&lt;/p&gt;

&lt;p&gt;Once you have selected the phone you want to emulate under the &amp;ldquo;user agent&amp;rdquo; section and also optionally ticked the box next to &amp;ldquo;Device metrics&amp;rdquo; then you can reload the page (hit [ctrl] + [f5]) and the page will be reloaded and should show you the mobile version of your site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Remove Hard Coded URLs from Theme</title>
      <link>https://edmondscommerce.github.io/magento/magento-remove-hard-coded-urls-from-theme.html</link>
      <pubDate>Thu, 02 Sep 2010 14:14:18 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-remove-hard-coded-urls-from-theme.html</guid>
      <description>&lt;p&gt;If you are working on a theme, you may find that there are hard coded links dotted all over the place.&lt;/p&gt;

&lt;p&gt;This can make testing a site offline (and thereby not on the same URL) a bit of a pain.&lt;/p&gt;

&lt;p&gt;Here is a quick fix for you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remove all hard coded links from the CMS section:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cms_block&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://www.domain.com/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{store url=&amp;#39;&amp;#39;}}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cms_page&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://www.domain.com/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{store url=&amp;#39;&amp;#39;}}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Remove all hard coded links from the theme files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a command line one using grep and sed.&lt;/p&gt;

&lt;p&gt;Firstly, cd into the root theme folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
cd app/design/frontent/default/hardtheme

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now find files with hard coded links&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
grep -rl &#39;http://www.domain.com&#39; ./

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to automatically remove all those,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
grep -rl &#39;http://www.domain.com&#39; ./ | xargs sed -i &#39;s/http:\/\/domain.com\//&amp;lt;?php echo Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_WEB);?&amp;gt;/&#39;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Magento Design UK</title>
      <link>https://edmondscommerce.github.io/magento/magento-design-uk.html</link>
      <pubDate>Tue, 31 Aug 2010 14:36:32 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-design-uk.html</guid>
      <description>&lt;p&gt;If you are looking for &lt;strong&gt;Magento Design&lt;/strong&gt; and Magento theme or Magento template creation then you have come to the right place.&lt;/p&gt;

&lt;p&gt;Edmonds Commerce have traditionally been a Magento development specialist and have been working on custom Magento projects for a couple of years now. Now we have welcomed some design experts onto the team and so can now offer professional Magento ecommerce design services along with our development services. This means that we are on our way to becoming a full service agency for Magento site owners.&lt;/p&gt;

&lt;p&gt;If you are looking to get a Magento site created and would like to enquire about our custom Magento design services then &lt;b&gt;get in touch today&lt;/b&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Tip - Rename Your Theme Directory</title>
      <link>https://edmondscommerce.github.io/magento/magento-tip-rename-your-theme-directory.html</link>
      <pubDate>Thu, 19 Feb 2009 16:40:56 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento/magento-tip-rename-your-theme-directory.html</guid>
      <description>&lt;p&gt;A common mistake made with Magento installations is that the the standard theme (eg default) is customised to suit the look of the site but is still kept in a folder called default. If you do this then whenever you want to upgrade your Magento store, the theme folder will be overwritten causing you all kinds of problems. I hope you had a backup!&lt;/p&gt;

&lt;p&gt;All you need to do is make sure that if you are running a custom theme - even if it is simply a modified version of the default theme, make sure that it is set up a separate theme with it&amp;rsquo;s own name. This way you will be able to upgrade Magento without too much theme problems.&lt;/p&gt;

&lt;p&gt;We never recommend applying a Magento upgrade to a live site, instead set up a password protected dev subdomain which has a fully functional copy of your store. You can then test out upgrades on this version first, sort out any problems and then only update the live site once you are happy it will work fine.&lt;/p&gt;

&lt;p&gt;Edmonds Commerce specialise in helping ecommerce businesses set up or migrate to a Magento based solution - get in touch today.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>