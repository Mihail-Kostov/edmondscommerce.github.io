<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cli on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/tags/cli/</link>
    <description>Recent content in Cli on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Sep 2016 10:37:59 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/tags/cli/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Php Cli Progress Bar</title>
      <link>https://edmondscommerce.github.io/php-cli-progress-bar/</link>
      <pubDate>Fri, 16 Sep 2016 10:37:59 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php-cli-progress-bar/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing a lot of data manipulation on the command line recently, and one of bugbears that I ran into was that my commands gave no indication of how long they were going to take to complete.&lt;/p&gt;

&lt;p&gt;Sick and tired of just looking at the blank screen I put together a small progress bar class that can be used indicate how many items have been processed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ProgressBar 
{

    protected $_spinners = [&#39;|&#39;, &#39;/&#39;, &#39;-&#39;, &#39;\\&#39;, &#39;|&#39;, &#39;/&#39;, &#39;-&#39;, &#39;\\&#39;];

    /**
     * This is used to echo the progress of a task on the command line.
     * Pass in the current row that you are on and the number of rows that need to be processed and this will echo out
     * a progress bar like this
     *
     * Progress: [-----------------\                                           ]
     *
     * It is possible to change the width of the bar by passing in an int as the $steps param, otherwise this default
     * to 60
     *
     * Once the process is complete pass in the $last param as true to finish the the process bar
     *
     * @param      $totalDone - The number of rows that have been processed so far
     * @param      $total     - The total number of rows to be processed
     * @param bool $last      - If the process has been completed
     * @param bool $steps     - How wide the process bar should be
     */
    public function echoProgress($totalDone, $total, $last = false, $steps = false)
    {
        if (PHP_SAPI != &#39;cli&#39;) {
            return;
        }
        $steps = ($steps == false) ? 60 : $steps;
        if ($last === true) {
            $display = &amp;quot;Progress: [&amp;quot; . str_repeat(&#39;-&#39;, $steps + 1) . &amp;quot;]\r&amp;quot;;
        } else {
            $toGo        = floor((1 - ($totalDone / $total)) * $steps);
            $progressBar = str_repeat(&#39;-&#39;, $steps - $toGo);
            $emptySpace  = str_repeat(&#39; &#39;, $toGo);
            $index       = $totalDone % 8;
            $display     = &amp;quot;Progress: [&amp;quot; . $progressBar . $this-&amp;gt;_spinners[$index] . $emptySpace . &amp;quot;]\r&amp;quot;;
        }
        // @codingStandardsIgnoreStart - There&#39;s nothing wrong with using echo on the CLI
        echo $display;
        // @codingStandardsIgnoreEnd
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can then be used like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$totalDone = 0;
$rowsToProcess = $this-&amp;gt;getRowsToProcess();
$numberOfRowsToProcess = count($rowsToProcess);
$processBar = new ProcessBar();
foreach ($rowsToProcess as $row) {
    $this-&amp;gt;processRow($row);
    $processBar-&amp;gt;echoProgress(++$totalDone, $numberOfRowsToProcess);
}
$processBar-&amp;gt;echoProgress(++$totalDone, $numberOfRowsToProcess, true);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will give the following output when run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ross@ross:~/localhost/tests $ php importData.php
starting the import of EdmondsCommerce\ProductImport\Model\OptionValues
starting the import of EdmondsCommerce\ProductImport\Model\Products
starting the import of EdmondsCommerce\ProductImport\Model\Combinations
Progress: [-----------------\                                           ]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Running PHP Scripts on CLI and Faking a Web Request</title>
      <link>https://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request.html</link>
      <pubDate>Fri, 14 Feb 2014 17:31:14 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request.html</guid>
      <description>&lt;p&gt;Some times you build a PHP script that is designed to run from a web request and you want to run it on the command line.
The problem is that you have used the standard PHP super globals and you would rather not refactor the script loads.&lt;/p&gt;

&lt;p&gt;Here is a nice quick solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;if(isset($argc)){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    for ($i = 1; $i &amp;lt; $argc; $i++) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    	$things = explode(&amp;quot;=&amp;quot;, $argv[$i]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        if (false !== stripos($things[0], &amp;#39;POST:&amp;#39;)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;             $post = str_replace(&amp;#39;POST:&amp;#39;, &amp;#39;&amp;#39;, $things[0]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;             $_POST[$post] = $things[1];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        } else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;             $_GET[$things[0]] = $things[1];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo &amp;quot;\nGET:\n&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;var_dump($_GET);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo &amp;quot;\nPOST:\n&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;var_dump($_POST);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will loop over the argc variable that is defined when running in CLI mode and will fake the &lt;code&gt;$_GET&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt; variables as required.&lt;/p&gt;

&lt;p&gt;To run this with get and post variables you would do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php -f script.php getvar1=test getvar2=foo POST:postvar1=bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. It is not particularly pretty but it can be pretty handy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Product Information Scraper</title>
      <link>https://edmondscommerce.github.io/portfolio/product-information-scraper.html</link>
      <pubDate>Thu, 09 Jun 2011 14:25:59 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/portfolio/product-information-scraper.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Bespoke Object-Oriented PHP Automated Scraping System&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;The aim of this project is to put together an automated price retrial system, capable of running on its own. The system will collect general information for general products as well as more detailed information for named products.&lt;/p&gt;

&lt;h3&gt;Discs Like New&lt;/h3&gt;

&lt;p&gt;Discs Like New  offer a professional, effective and affordable &lt;a href=”http://www.discslikenew.com/”&gt;disc repair service &lt;/a&gt;to business customers throughout the UK and Europe.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
&lt;img src=&#34;https://edmondscommerce.github.io/images/code_snippet.jpg&#34; alt=&#34;Image&#34; /&gt;
The project is interesting as it wants to be run from both a web browser, so it can be set up and product files can be uploaded; and from the command line so it can quietly run in the background. This means that it will have to detect this state and modify what it outputs accordingly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP CLI</title>
      <link>https://edmondscommerce.github.io/php/php-cli.html</link>
      <pubDate>Wed, 08 Jun 2011 14:40:29 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/php-cli.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
Running PHP on the command line, via cron etc there are a few common problems you can hit and from experience this my recommendations to avoid them.&lt;/p&gt;

&lt;p&gt;It seems that (on CentOS at least) PHP does not display errors by default on the command line. You will want it to I assume so you can understand what has gone wrong with the cron task etc.&lt;/p&gt;

&lt;p&gt;You can use php.ini files but its not always easy to know exactly which ini file is going to to be used. If certain settings are required, use the -d flag to set specific ini directives directly when you run PHP.&lt;/p&gt;

&lt;p&gt;I have just had an issue where a script was running out of memory but no error message was displayed, despite the fact that display errors was turned on. However digging around showed that memory usage was hitting the limit and the script died silently. Increasing the memory limit fixed it.&lt;/p&gt;

&lt;p&gt;Here is my standard PHP CLI runner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
/usr/bin/php -d display_errors -d memory_limit=512M /path/to/php/file.php

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PHP Detect if Script is running from CLI</title>
      <link>https://edmondscommerce.github.io/php/php-detect-if-script-is-running-from-cli.html</link>
      <pubDate>Thu, 01 Apr 2010 13:55:30 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/php-detect-if-script-is-running-from-cli.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you have a script that you want to behave differently depending on whether it is called from the command line or via a http request then this little snippet of code is what you need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    if(!defined(&amp;#39;STDIN&amp;#39;)){ //its not via command line&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        // do non command line stuff&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>