<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Edmonds Commerce Dev Blog</title>
    <link>http://edmondscommerce.github.io/tags/index/</link>
    <description>Recent content in Index on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Mar 2012 16:26:59 +0000</lastBuildDate>
    <atom:link href="http://edmondscommerce.github.io/tags/index/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Magento Flush Everything Cache, Index, Images, JS, CSS in One Go</title>
      <link>http://edmondscommerce.github.io/magento/magento-flush-everything-cache-index-images-js-css-in-one-go.html</link>
      <pubDate>Sat, 03 Mar 2012 16:26:59 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/magento-flush-everything-cache-index-images-js-css-in-one-go.html</guid>
      <description>&lt;p&gt;If you are developing a Magento store and you would like a method you can call to completely clear everything out that might be cached or indexed etc then you will like this little snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;public function flushEverything() {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        Mage::app()-&amp;gt;getCacheInstance()-&amp;gt;flush();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        Mage::getModel(&amp;#39;core/design_package&amp;#39;)-&amp;gt;cleanMergedJsCss();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        Mage::getModel(&amp;#39;catalog/product_image&amp;#39;)-&amp;gt;clearCache();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $indexer    = Mage::getSingleton(&amp;#39;index/indexer&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        /* @var $indexer Mage_Index_Model_Indexer */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        foreach($indexer-&amp;gt;getProcessesCollection() as $process){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;              $process-&amp;gt;reindexEverything();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        }  &lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This flushes the cache storage, removes merged JS/CSS files, flushes the product image cache then loops through each index and reindexes.&lt;/p&gt;

&lt;p&gt;Perhaps overkill but sometimes there&amp;rsquo;s nothing like the use of excessive force!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Arrays Maintain Index After Removing Exsisting</title>
      <link>http://edmondscommerce.github.io/php/php-arrays-maintain-index-after-removing-exsisting.html</link>
      <pubDate>Wed, 22 Feb 2012 14:57:41 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/php/php-arrays-maintain-index-after-removing-exsisting.html</guid>
      <description>&lt;p&gt;One of the features that makes PHP such a powerful language is it&amp;rsquo;s arrays. They allow for really complex data structures to be stored and worked on really easy. One interesting aspect of them is that they maintain there index if emptied one element at a time.&lt;/p&gt;

&lt;p&gt;Taken from php.net: &lt;a href=&#34;http://php.net/manual/en/language.types.array.php&#34;&gt;http://php.net/manual/en/language.types.array.php&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Create a simple array.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Now delete every item, but leave the array itself intact:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;unset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Append an item (note that the new key is 5, instead of 0).&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Re-index:&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;array_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Will output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array
(
    [0] =&amp;gt; 1
    [1] =&amp;gt; 2
    [2] =&amp;gt; 3
    [3] =&amp;gt; 4
    [4] =&amp;gt; 5
)
Array
(
)
Array
(
    [5] =&amp;gt; 6
)
Array
(
    [0] =&amp;gt; 6
    [1] =&amp;gt; 7
)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Refresh all magento indexes</title>
      <link>http://edmondscommerce.github.io/magento/refresh-all-magento-indexes.html</link>
      <pubDate>Fri, 17 Jun 2011 15:10:02 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/magento/refresh-all-magento-indexes.html</guid>
      <description>&lt;p&gt;The indexes for your Magento site should be refreshed on a regular basis. To help you do this you can put the below code in a PHP file in the root of your web site and setup a scheduled task to call it periodically.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;require_once &amp;#39;app/Mage.php&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$app = Mage::app(&amp;#39;admin&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;umask(0);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;for ($i = 1; $i &amp;lt;= 8; $i++) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $process = Mage::getModel(&amp;#39;index/process&amp;#39;)-&amp;gt;load($i);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $process-&amp;gt;reindexAll();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>