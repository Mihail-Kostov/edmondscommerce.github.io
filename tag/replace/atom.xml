<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: replace | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/replace/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-05-07T15:20:44+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wrapping a List in Quotes in PHPStorm]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html"/>
    <updated>2013-12-06T11:35:58+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm</id>
    <content type="html"><![CDATA[<p>Some times you might find your self with a list of values you want to copy and paste from somewhere into your PHP code as an array of strings.</p>

<p>For example, take this list of carrier names that I need to use:</p>

<p><code>
Blue Package, USPS, UPS, UPSMI, FedEx, DHL, DHL Global Mail, Fastway, UPS Mail Innovations, Lasership, Royal Mail, FedEx SmartPost, OSM, OnTrac, Streamlite, Newgistics, Canada Post, City Link, GLS, GO!, Hermes Logistik Gruppe, Parcelforce, TNT, Target, SagawaExpress, NipponExpress, YamatoTransport, Other
</code></p>

<p>I really don&rsquo;t fancy wrapping each element of this list with quotes one by one, there must be a better way!</p>

<p>There is, you can use the regex replace functionality of PHPStorm to do this for you quickly and easily.</p>

<p>First of all paste the string into your PHPStorm editor and highlight it. Then hit <code>[ctrl]+[r]</code> to start your find and replace.</p>

<p>The &ldquo;In Selection&rdquo; tick box should be ticked already, you also need to tick the regex box.</p>

<p>Then in the find section, use this regex:
<code>
( |)([^,]+),
</code></p>

<p>And in your replace box, put this:</p>

<p><code>
\n'$2',
</code></p>

<p>This gets you nearly all the way there, you might just need to tidy up a bit you should now have something looking like this:</p>

<p><code>
'Blue Package',
'USPS',
'UPS',
'UPSMI',
'FedEx',
'DHL',
'DHL Global Mail',
'Fastway',
'UPS Mail Innovations',
'Lasership',
'Royal Mail',
'FedEx SmartPost',
'OSM',
'OnTrac',
'Streamlite',
'Newgistics',
'Canada Post',
'City Link',
'GLS',
'GO!',
'Hermes Logistik Gruppe',
'Parcelforce',
'TNT',
'Target',
'SagawaExpress',
'NipponExpress',
'YamatoTransport', Other
</code></p>

<p>The <code>Other</code> on the end has not been converted has it doesn&rsquo;t have a trailing comma. You could mess about with yoru regex trying to get this to also be converted, or you could say good enough and move on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Convert Array to Object Syntax]]></title>
    <link href="http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax.html"/>
    <updated>2013-08-27T14:40:35+01:00</updated>
    <id>http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax</id>
    <content type="html"><![CDATA[<p>If you are converting some code from using array syntax to object property syntax then you might like this little snippet of regex.</p>

<p>This is design to paste straight into the find/replace dialogue in PHPStorm</p>

<p>Find:
```</p>

<p>\$(\w+)[&lsquo;([^&rsquo;]+)&lsquo;]</p>

<p>```</p>

<p>Replace:
```</p>

<p>\\$$1->$2</p>

<p>```</p>

<p>And that is it</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Replace "Malformed Replacement String"]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html"/>
    <updated>2013-01-24T17:39:08+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string</id>
    <content type="html"><![CDATA[<p>If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.</p>

<p>The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.</p>

<p>Take the following example code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$input-&gt;name]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$textarea-&gt;name]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>And trying to replace the key being used in the data array with a processed one calling a method $this->dataName($key) to generate the following code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$this-&gt;dataName($textarea-&gt;name)]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>You might try the find pattern:</p>

<p>```</p>

<p>\$data[\$([^&ndash;]+)&ndash;>name]</p>

<p>```</p>

<p>And the replace pattern:
```</p>

<p>\$data[\$this->dataName(\$$1->name)]</p>

<p>```</p>

<p>However this will give you the dreaded <b>&ldquo;malformed replacement string&rdquo;</b> Error</p>

<p>The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:</p>

<p>```</p>

<p>\\$data[\\$this->dataName(\\$$1->name)]</p>

<p>```</p>

<p>And it works, woot!</p>

<p>Also when it does work, PHP Storms replacement preview feature is really quite nice</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geany Text Editor Remove Hash Comments]]></title>
    <link href="http://edmondscommerce.github.io/geany/geany-text-editor-remove-hash-comments.html"/>
    <updated>2012-11-12T11:25:16+00:00</updated>
    <id>http://edmondscommerce.github.io/geany/geany-text-editor-remove-hash-comments</id>
    <content type="html"><![CDATA[<p>I recently needed to quickly remove some commented lines from a .htaccess file using Geany (a really nice lightweight IDE or feature rich text editor depending on your point of view).</p>

<p>Geany has some powerful regex replace functionality in there but I found that it was overly aggressive so removed lines that had more than one hash and were in fact title sections that needed to stay intact.</p>

<p>The working formula was:</p>

<p>Search for:
<code>
^<a href="[^#]">#</a>
</code></p>

<p>And replace with:</p>

<p><code>\1</code></p>

<p>And of course tick the regex box.</p>

<p><img src="/assets/geany.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Double Slashes from URL without Breaking It]]></title>
    <link href="http://edmondscommerce.github.io/php/remove-double-slashes-from-url-without-breaking-it.html"/>
    <updated>2012-02-24T16:58:38+00:00</updated>
    <id>http://edmondscommerce.github.io/php/remove-double-slashes-from-url-without-breaking-it</id>
    <content type="html"><![CDATA[<p>If you need to clean up a URL and remove any double (or more) slashes that might have crept in, but need to keep the :// bit intact you might like this little function</p>

<p>```php</p>

<pre><code>protected function removeDoubleSlash($in) {
    return preg_replace('%([^:])(
</code></pre>

<p>```</p>

<p>Handy :)</p>
]]></content>
  </entry>
  
</feed>
