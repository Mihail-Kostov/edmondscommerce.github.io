<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: search | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/search/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-02-07T18:59:40+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache Mod Rewrite and Escaped Hashes (and other characters)]]></title>
    <link href="http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters.html"/>
    <updated>2013-04-22T13:57:49+01:00</updated>
    <id>http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters</id>
    <content type="html"><![CDATA[<p>If you are having issues with mod rewrite apparently abandoning sections of variables after encoded hashes then this could be your solution.</p>

<p>The use case is particularly clear when using mod_rewrite in front of a search engine (such as Solr which I am really enjoying working with at the moment).</p>

<p>Imagine someone search for a partcode ABC#123</p>

<p>This gets encoded to search/abc%23123</p>

<p>Your rewritten search term will then be mangled by Apache and your search script will only actually see ABC. That is of course a problem and the solution is not really clear.</p>

<p>After a bit of searching around I found the solution is to add a B flag to your mod_rewrite rule so that mod_rewrite will escape these characters so that they are cleanly passed through.</p>

<p>For example:</p>

<p>```php</p>

<p>RewriteRule ^(.<em>)search/(.</em>)$ advanced_search_result.php?keywords=$2 [L,B]</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Mod Rewrite Escaped Slashes Problem + Solution]]></title>
    <link href="http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution.html"/>
    <updated>2013-04-11T11:05:20+01:00</updated>
    <id>http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution</id>
    <content type="html"><![CDATA[<p>As part of our Magento SEO service, the first thing we do is to make sure there are no issues with the crawlability and general health of the clients web site.</p>

<p>Whilst working on the Google Webmaster Tools crawl errors for a client I noticed one specific and intruiging problem for which I couldn&rsquo;t immediately see the reason, everything looked to be set up perfectly.</p>

<p>Certain URLs were getting 404 responses. The URL was being parsed by mod_rewrite but everything looked fine so why was apache giving a 404?</p>

<p>The problem turns out to be that the URLs contain escaped slashes (eg search/KTA-mb667k2%2F2g),</p>

<p>The problem is that Apache actually handles the escaped slash and helpfully converts it to a real slash. That then means that it is trying to look in a sub folder that does not exist and hence the 404.</p>

<p>Chances are you don&rsquo;t want escaped slashes to really be thought of as real directory separating slashes, especially if you are using mod_rewrite.</p>

<p>The answer is a simple one liner to be added to your vhost.conf or httpd.conf.</p>

<p>```</p>

<p>AllowEncodedSlashes On</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento No Search Results]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-no-search-results.html"/>
    <updated>2013-02-13T16:46:00+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-no-search-results</id>
    <content type="html"><![CDATA[<p>Sometimes Magento will some times return no results with the message &ldquo;Your search returns no results&rdquo; for terms that you would expect it to return many results for.
This can happen for a number of reasons including misconfiguration of search or attributes.</p>

<p>Unfortunately the way Magento speeds up search queries suffers from a race condition that can lead Magento to think it has cached a query when it has not and at the same time believes there are no products for that search because the cache for that query was dropped. This is a tough issue to solve but it can be done.</p>

<p>The two methods that work effectively to resolve the race condition problem (thus far) are to first make sure that the query cache isn&rsquo;t empty before using the cached results. This works effectively because if the cache is empty it must have been dropped recently and has not been repopulated.
The other thing you can do to help reduce this further is to make Magento remembers the time at which it dropped. Then have the query caches compare their last updated time against the the last cache drop time and if the update time is before or the same as the drop time don&rsquo;t use the cache.
If this isn&rsquo;t completely effective it is also possible to make it not use the query cache if the time of update and the time of drop are with in a minuet of each other to help reduce this further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Replace "Malformed Replacement String"]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html"/>
    <updated>2013-01-24T17:39:08+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string</id>
    <content type="html"><![CDATA[<p>If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.</p>

<p>The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.</p>

<p>Take the following example code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$input-&gt;name]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$textarea-&gt;name]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>And trying to replace the key being used in the data array with a processed one calling a method $this->dataName($key) to generate the following code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$this-&gt;dataName($textarea-&gt;name)]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>You might try the find pattern:</p>

<p>```</p>

<p>\$data[\$([^&ndash;]+)&ndash;>name]</p>

<p>```</p>

<p>And the replace pattern:
```</p>

<p>\$data[\$this->dataName(\$$1->name)]</p>

<p>```</p>

<p>However this will give you the dreaded <b>&ldquo;malformed replacement string&rdquo;</b> Error</p>

<p>The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:</p>

<p>```</p>

<p>\\$data[\\$this->dataName(\\$$1->name)]</p>

<p>```</p>

<p>And it works, woot!</p>

<p>Also when it does work, PHP Storms replacement preview feature is really quite nice</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Disable the Default DuckDuckGo Seach Engine in Firefox on Linux Mint?]]></title>
    <link href="http://edmondscommerce.github.io/linux%20mint/how-to-disabled-the-default-duckduckgo-seach-engine-in-firefox-on-linux-mint.html"/>
    <updated>2013-01-07T15:12:14+00:00</updated>
    <id>http://edmondscommerce.github.io/linux%20mint/how-to-disabled-the-default-duckduckgo-seach-engine-in-firefox-on-linux-mint</id>
    <content type="html"><![CDATA[<p>If you are using Firefox browser on Linux Mint you might have notice that the default search engine is not Google but DuckDuckGo.</p>

<p>DuckDuckGo are presenting themselves as the biggest threat to Google search engine bringing as the main advantage more privacy than what Google currently offer.</p>

<p>If you are happy with it than you are fine but if you feel like me that DuckDuckGo might have some interesting features, it does not bring the same result or way of using internet than Google search engine then you might want to come back to Google then please follow the below step by step procedure:</p>

<pre><code>Type about:config in the location bar and press Enter

Type keyword.URL in filter

Change the keyword.URL value to:

http://www.google.co.uk/search?ie=UTF-8&amp;oe=UTF-8&amp;sourceid=navclient&amp;gfns=1&amp;q=
</code></pre>

<p>Hope that help.</p>
]]></content>
  </entry>
  
</feed>
