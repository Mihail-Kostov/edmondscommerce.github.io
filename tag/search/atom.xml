<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: search | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/search/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-11-12T14:02:06+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fast E-Commerce Search Solution]]></title>
    <link href="http://edmondscommerce.github.io/ecommerce/fast-e-commerce-search-solution.html"/>
    <updated>2014-06-12T10:09:16+01:00</updated>
    <id>http://edmondscommerce.github.io/ecommerce/fast-e-commerce-search-solution</id>
    <content type="html"><![CDATA[<p>One of the trickiest parts of any e-commerce store to get running quickly is the search results. The problem is compounded for large or complex stores where a database query based search for a multi word search phrase can become a real behemoth of a database query that has to search for each word in a multitude of database tables and columns. Then throw in other issues such as table locking and the performance issues can start to hurt the site as a whole.</p>

<h3>Caching for Performance</h3>

<p>One common solution to scaling up e-commerce stores is to use a variety of methods and levels of caching, from a database query cache right up to a full page caching system perhaps powered by Varnish. This solution works well for product and category pages for which there is a finite number. When it comes to search results pages though, each possible search phrase is a completely separate set of pages. You might be able to keep a warm cache for your most popular search phrases but anything else will be raw results. It will show your server at its worst performance.</p>

<h3>Alternative Enterprise Search Engine</h3>

<p>In this scenario it is time to start looking at other search solutions. If you want a turnkey professional solution then check out Google Commerce Search. This premium offering gives you a powerful search engine that is entirely outsourced and uses Google technology to deliver great quality results. As you can probably imagine though, this premium product comes with a premium and enduringly high subscription fee.</p>

<h3>Enterprise Open Source</h3>

<p>Instead what we are now recommending to our larger clients is to look at implementing the Solr search engine. Apache Solr is an enterprise level search engine. It is used in a wide variety of impressive sites â€“ you can see a list here. Names like Netflix, The Guardian and eBay really underline the fact that this is serious and powerful technology.</p>

<h3>Advanced Search Functionality</h3>

<p>The great thing is that it is also pretty easy to set up and get running. To get a basic search engine working is no more than a few hours of work. There are many possibilities with the search engine including spelling suggestions, parametric (faceted in Solr speak) search, synoyms, auto suggest and loads more. Depending on exactly how you want this to work will determine exactly how much work is involved.</p>

<p>Solr provides a huge amount of configurability and tuning. For this reason we would always expect a new install of Solr to be followed up with a bit of tweaking to make sure you are getting the right results. Once the right configuration has been determined we can then expect the engine to work tirelessly, serving up lightning fast and excellent quality results without any further investment from your business.</p>

<h2>Implement Solr Search Today</h2>

<p>If you would like your site to be fitted out with a Solr based search system by a professional UK based e-commerce web development agency then get in touch with <a href="http://www.edmondscommerce.co.uk/contact">Edmonds Commerce</a> today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Mod Rewrite and Escaped Hashes (and other characters)]]></title>
    <link href="http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters.html"/>
    <updated>2013-04-22T13:57:49+01:00</updated>
    <id>http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters</id>
    <content type="html"><![CDATA[<p>If you are having issues with mod rewrite apparently abandoning sections of variables after encoded hashes then this could be your solution.</p>

<p>The use case is particularly clear when using mod_rewrite in front of a search engine (such as Solr which I am really enjoying working with at the moment).</p>

<p>Imagine someone search for a partcode ABC#123</p>

<p>This gets encoded to search/abc%23123</p>

<p>Your rewritten search term will then be mangled by Apache and your search script will only actually see ABC. That is of course a problem and the solution is not really clear.</p>

<p>After a bit of searching around I found the solution is to add a B flag to your mod_rewrite rule so that mod_rewrite will escape these characters so that they are cleanly passed through.</p>

<p>For example:</p>

<p>```php</p>

<p>RewriteRule ^(.<em>)search/(.</em>)$ advanced_search_result.php?keywords=$2 [L,B]</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Mod Rewrite Escaped Slashes Problem + Solution]]></title>
    <link href="http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution.html"/>
    <updated>2013-04-11T11:05:20+01:00</updated>
    <id>http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution</id>
    <content type="html"><![CDATA[<p>As part of our Magento SEO service, the first thing we do is to make sure there are no issues with the crawlability and general health of the clients web site.</p>

<p>Whilst working on the Google Webmaster Tools crawl errors for a client I noticed one specific and intruiging problem for which I couldn&rsquo;t immediately see the reason, everything looked to be set up perfectly.</p>

<p>Certain URLs were getting 404 responses. The URL was being parsed by mod_rewrite but everything looked fine so why was apache giving a 404?</p>

<p>The problem turns out to be that the URLs contain escaped slashes (eg search/KTA-mb667k2%2F2g),</p>

<p>The problem is that Apache actually handles the escaped slash and helpfully converts it to a real slash. That then means that it is trying to look in a sub folder that does not exist and hence the 404.</p>

<p>Chances are you don&rsquo;t want escaped slashes to really be thought of as real directory separating slashes, especially if you are using mod_rewrite.</p>

<p>The answer is a simple one liner to be added to your vhost.conf or httpd.conf.</p>

<p>```</p>

<p>AllowEncodedSlashes On</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento No Search Results]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-no-search-results.html"/>
    <updated>2013-02-13T16:46:00+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-no-search-results</id>
    <content type="html"><![CDATA[<p>Sometimes Magento will some times return no results with the message &ldquo;Your search returns no results&rdquo; for terms that you would expect it to return many results for.
This can happen for a number of reasons including misconfiguration of search or attributes.</p>

<p>Unfortunately the way Magento speeds up search queries suffers from a race condition that can lead Magento to think it has cached a query when it has not and at the same time believes there are no products for that search because the cache for that query was dropped. This is a tough issue to solve but it can be done.</p>

<p>The two methods that work effectively to resolve the race condition problem (thus far) are to first make sure that the query cache isn&rsquo;t empty before using the cached results. This works effectively because if the cache is empty it must have been dropped recently and has not been repopulated.
The other thing you can do to help reduce this further is to make Magento remembers the time at which it dropped. Then have the query caches compare their last updated time against the the last cache drop time and if the update time is before or the same as the drop time don&rsquo;t use the cache.
If this isn&rsquo;t completely effective it is also possible to make it not use the query cache if the time of update and the time of drop are with in a minuet of each other to help reduce this further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Replace "Malformed Replacement String"]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html"/>
    <updated>2013-01-24T17:39:08+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string</id>
    <content type="html"><![CDATA[<p>If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.</p>

<p>The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.</p>

<p>Take the following example code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$input-&gt;name]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$textarea-&gt;name]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>And trying to replace the key being used in the data array with a processed one calling a method $this->dataName($key) to generate the following code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$this-&gt;dataName($textarea-&gt;name)]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>You might try the find pattern:</p>

<p>```</p>

<p>\$data[\$([^&ndash;]+)&ndash;>name]</p>

<p>```</p>

<p>And the replace pattern:
```</p>

<p>\$data[\$this->dataName(\$$1->name)]</p>

<p>```</p>

<p>However this will give you the dreaded <b>&ldquo;malformed replacement string&rdquo;</b> Error</p>

<p>The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:</p>

<p>```</p>

<p>\\$data[\\$this->dataName(\\$$1->name)]</p>

<p>```</p>

<p>And it works, woot!</p>

<p>Also when it does work, PHP Storms replacement preview feature is really quite nice</p>
]]></content>
  </entry>
  
</feed>
