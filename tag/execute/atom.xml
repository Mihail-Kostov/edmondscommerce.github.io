<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: execute | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/execute/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-10-03T12:36:28+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zend Framework - Reusing Prepared Zend_Db_Statements]]></title>
    <link href="http://edmondscommerce.github.io/zend%20framework/zend-framework-reusing-prepared-zend_db_statements.html"/>
    <updated>2010-02-02T15:22:32+00:00</updated>
    <id>http://edmondscommerce.github.io/zend%20framework/zend-framework-reusing-prepared-zend_db_statements</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you use Zend_Db_Statements directly as well as using the Zend_Db_Table family of classes for Active Record et al then you might find the following little tip useful.</p>

<p>By default, if you run a query using something like</p>

<p>```php</p>

<p> public function query($sql, $params=false) {</p>

<pre><code>if(empty($params)) {
    $stmt = $this-&gt;getAdapter()-&gt;query($sql);
}else {
    $stmt = $this-&gt;getAdapter()-&gt;query($sql, $params);
}
return $stmt;
</code></pre>

<p>}</p>

<p>```</p>

<p>then every time you call your query method, you will be preparing the statement again.</p>

<p>Of course that&rsquo;s not really a good idea if you are repeating the same query multiple times simply changing the parameters to be passed in.</p>

<p>In that kind of scenario you can do something like this:</p>

<p>```php</p>

<p>$stmt = $db->query($sql, $params);
$result1 = $stmt->fetch();
$stmt->execute($params2);
$result2 = $stmt->fetch();</p>

<p>```</p>

<p>Heres an example of a chunk of code that is working out a category path from an ecommerce system for a particular category id.</p>

<p>```php</p>

<p>$stmt = $db->query(&ldquo;select c.parent_id, cd.categories_name from categories c join categories_description cd using(categories_id)
where categories_id = ?&rdquo;, array($categories_id));
while(false!==($r=$stmt->fetch())){</p>

<pre><code>$categoryString[]=$r['categories_name'];
if($r['parent_id']==0){
    break;
}
</code></pre>

<p>//Note this bit &ndash; we are just re executing the statement with some new parameters.</p>

<pre><code>$stmt-&gt;execute(array($r['parent_id']));
</code></pre>

<p>}</p>

<p>```</p>

<p>This tip alone can add a lot of speed if you are doing repetitive statements</p>
]]></content>
  </entry>
  
</feed>
