<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: magento | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/magento/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-11-28T13:35:12+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento 1.8 released]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-1-8-released.html"/>
    <updated>2013-09-30T10:01:28+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-1-8-released</id>
    <content type="html"><![CDATA[<p>Today I got a notification through that Magento 1.8 had finally been released.</p>

<p>This has been in beta since alpha since April, and contains server fixes that a lot of people have been waiting for.</p>

<p>The most important one for UK vendors is that the rounding issue in tax calculations has been fixed.</p>

<p>There are also improvements to caching and database performance. The full release notes can be seen <a href="http://www.magentocommerce.com/knowledge-base/entry/ce-18-later-release-notes">here</a></p>

<p>These are issues that have affected merchants since that change in the VAT rate, so we would recommend upgrading for everyone at this time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable JavaScript alerts for a page]]></title>
    <link href="http://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page.html"/>
    <updated>2013-08-28T09:21:30+01:00</updated>
    <id>http://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page</id>
    <content type="html"><![CDATA[<p>If you encounter a webpage that is generating a lot of alerts, the following bookmark will prevent them from stealing focus but still allow you to see what is being said.</p>

<p>```js</p>

<p>javascript:alert = function ( text ) { console.log( text ); return true; };</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sylius E-Commerce based on Symfony]]></title>
    <link href="http://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony.html"/>
    <updated>2013-07-23T13:48:47+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony</id>
    <content type="html"><![CDATA[<p>As if there weren&rsquo;t enough!</p>

<p>There is a new contender for the open source e-commerce crown, a platform called <b><a href="http://sylius.com/features" target="_blank">Sylius</a></b>. The thing that makes this one especially interesting is that rather than being built from scratch it is based upon a very well established PHP framework called Symfony. Some would argue that Symfony is the &ldquo;other&rdquo; PHP framework alongside Zend Framework. In fact there are many frameworks however it would be fair to say that Symfony and Zend Framework are the most well established and up to date.</p>

<p>Basing an e-commerce platform upon an existing PHP framework has many advantages including transferrable skills, established best practice structure and also easier access to a wide range of functionality via library components and extensions.</p>

<p>There is another e-commerce platform based upon a PHP framework. It is based upon Zend Framework &ndash; you might have heard of it &ndash; Magento.</p>

<p>It does look very much like Sylius is still quite a new offering and it can not boast the level of maturity and establishment that Magento has achieved. That said, things move quickly in this industry and who knows what will be top dog in the next five years.</p>

<p>If you are considering Sylius for your e-commerce website and would like to find a UK Sylius developer to work with then do get in touch with Edmonds Commerce today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP SOAP Client Basic Template]]></title>
    <link href="http://edmondscommerce.github.io/php/php-soap-client-basic-template.html"/>
    <updated>2013-07-08T08:28:17+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-soap-client-basic-template</id>
    <content type="html"><![CDATA[<p>Often when integrating with SOAP services I find myself doing the same old moves. I have a deep suspicion of API&rsquo;s written by others. They always tend to be in ASP.net, have error message pages that have default messages and generally be really badly documented and coded. Maybe I&rsquo;m just unlucky?</p>

<p>In my experience decent API&rsquo;s don&rsquo;t use SOAP.</p>

<p>Anyway if I do have to use SOAP, starting out with this class as a template to get the ball rolling with some useful debugging methods (so you can email the API owners and show them that their API doesn&rsquo;t work), I&rsquo;ve blogged it for my own archive and retrieval reasons but if it helps anyone else out then that is great!</p>

<p>```php</p>

<p>&lt;?php
/<em>*
 * Class Template Soap Client Consuming Class
 </em>/</p>

<p>class EdmondsCommerceSoap
{</p>

<pre><code>protected $username = 'edmondscommerce';

protected $pass = 'NotReallyMyPassw0rd';


public function test($wsdl)
{
    $options["connection_timeout"] = 25;
    $options["location"] = $wsdl; 
    $options['trace'] = 1; //this is important if you want to be able to use the soapDebug method
    try {
        $client = new SoapClient($wsdl, $options);
        $client = $this-&gt;setAuthHeader($client);
        $client-&gt;Method();
    } catch (SoapFault $e) {
        echo '&lt;h1&gt;SoapFault: ' . $e-&gt;getMessage() . '&lt;/h1&gt;';
        echo '&lt;pre&gt;' . $e-&gt;getTraceAsString() . '&lt;/pre&gt;';
    }
    echo '&lt;h2&gt;Debug Info:&lt;/h2&gt;';
    var_dump($this-&gt;soapDebug($client));
}

/**
* This method is only a template, will change depending on the service you are using but its a good starting point demonstrating how to set headers
**/
protected function setAuthHeader(SoapClient $client)
{
    $auth = array(
        'username' =&gt; $this-&gt;username,
        'MessageId' =&gt; md5(time()),
        'password' =&gt; $this-&gt;password
    );
    foreach($auth as $k=&gt;$v){
        $headers[] = new SoapHeader('Header', $k, $v, false);
    }
    $client-&gt;__setSoapHeaders($headers);
    return $client;
}

/**
 *  This method gathers all debug info into a handy array ready for var_dump, log etc etc
 **/
protected function soapDebug(SoapClient $client)
{
    $debug = array();
    $debug['request']['headers'] = $client-&gt;__getLastRequestHeaders();
    $debug['request']['body'] = $client-&gt;__getLastRequest();
    $debug['request']['body_formatted'] = $this-&gt;formatXmlString($client-&gt;__getLastRequest());
    $debug['response']['headers'] = $client-&gt;__getLastResponseHeaders();
    $debug['response']['body'] = $client-&gt;__getLastResponse();
    $debug['response']['body_formatted'] = $this-&gt;formatXmlString($client-&gt;__getLastResponse());
    return $debug;
}


/**
 * This method is purely to assist the debug method and simply makes generated XML readable
 **/
protected function formatXmlString($xml)
{
    $xml = preg_replace('/(&gt;)(&lt;)(\/*)/', "$1\n$2$3", $xml);
    $token = strtok($xml, "\n");
    $result = '';
    $pad = 0;
    $matches = array();
    while ($token !== false) :
        if (preg_match('/.+&lt;\/\w[^&gt;]*&gt;$/', $token, $matches)) :
            $indent = 0; elseif (preg_match('/^&lt;\/\w/', $token, $matches)) :
            $pad--;
            $indent = 0; elseif (preg_match('/^&lt;\w[^&gt;]*[^\/]&gt;.*$/', $token, $matches)) :
            $indent = 1; else :
            $indent = 0;
        endif;
        $line = str_pad($token, strlen($token) + $pad, ' ', STR_PAD_LEFT);
        $result .= $line . "\n";
        $token = strtok("\n");
        $pad += $indent;
    endwhile;
    return $result;
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[White Blank Page when Printing Packing Slips from Magento Admin]]></title>
    <link href="http://edmondscommerce.github.io/magento/white-blank-page-when-printing-packing-slips-from-magento-admin.html"/>
    <updated>2013-07-01T14:21:49+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/white-blank-page-when-printing-packing-slips-from-magento-admin</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re having trouble printing packing slips, receiving a white blank page when selecting Print Packingslips from the Actions menu in Magento&rsquo;s Sales Orders page, then it&rsquo;s likely you&rsquo;re having the same issue I&rsquo;ve had.</p>

<p>I found that having error_reporting enabled wasn&rsquo;t enough</p>

<p>```php</p>

<p>error_reporting(E_ALL | E_STRICT);</p>

<p>```</p>

<p>You&rsquo;ll also need to add this to your index.php:</p>

<p>```</p>

<p>ini_set(&lsquo;display_errors&rsquo;, 1);</p>

<p>```</p>

<p>You&rsquo;ll then be shown the following fatal error:</p>

<p>```</p>

<p>Fatal error: Declaration of Zend_Pdf_FileParserDataSource_File::<strong>construct() must be compatible with Zend_Pdf_FileParserDataSource::</strong>construct() in /home8/stonecr2/public_html/newsite/lib/Zend/Pdf/FileParserDataSource/File.php on line 41</p>

<p>```</p>

<p>The issue here is that the contructor of Zend_Pdf_FileParserDataSource_File requires a single paramter, $filePath, whereas its abstract class&rsquo;s constructor does not. To resolve this, we need to make sure the abstract class matches its implementation, so make the following change</p>

<p>```php</p>

<p>//from
abstract public function __construct();</p>

<p>//to
abstract public function __construct($filePath);</p>

<p>```</p>

<p>Test your printing, and you should be provided with a PDF file.</p>
]]></content>
  </entry>
  
</feed>
