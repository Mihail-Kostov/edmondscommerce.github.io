<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: tip | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/tip/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-02T19:37:13+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatically convert old PHP file to camelCase ]]></title>
    <link href="http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase.html"/>
    <updated>2013-10-17T10:53:15+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been working with an old project that uses a combination of different coding styles.</p>

<p>One of the more trivial annoyances with this is that the variables used through the project are a combination of $camelCase and $snake_case which throws of the coding standards tools that I use.</p>

<p>To get round this I have put a little script together that will convert $snake_case to $camelCase automatically.</p>

<p>Obviously, you will need to check the results of this to make sure that there are not variables that should not be changed, but it has saved me a lot of time doing this manually.</p>

<p>I&rsquo;ve added this to my .bash_allias file, though it could easily be turned into a standalone script if required</p>

<p>```bash</p>

<h1>Fix legacy code</h1>

<p> cammelCase() {
   vim -E -s $@ &lt;&lt;-EOF
   :%s#\%($\%(\k+))\@&lt;=_(\k)#\u\1#g
   :update
   :quit
EOF</p>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable JavaScript alerts for a page]]></title>
    <link href="http://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page.html"/>
    <updated>2013-08-28T09:21:30+01:00</updated>
    <id>http://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page</id>
    <content type="html"><![CDATA[<p>If you encounter a webpage that is generating a lot of alerts, the following bookmark will prevent them from stealing focus but still allow you to see what is being said.</p>

<p>```js</p>

<p>javascript:alert = function ( text ) { console.log( text ); return true; };</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab Complete for SSH and SCP]]></title>
    <link href="http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp.html"/>
    <updated>2013-07-26T10:31:41+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp</id>
    <content type="html"><![CDATA[<p>If you are required to connect to different servers, then remembering and typing in all of the details can become tiresome.</p>

<p>Thankfully there is simple solution to this, using the SSH config file.</p>

<p>To make use of this, create the following file ~/.ssh/config</p>

<p>In there add the following details</p>

<p>```bash</p>

<p>Host easyToRememberName</p>

<pre><code>HostName 127.0.0.1
Port 2020
User ross
</code></pre>

<p>```</p>

<p>You will then can tab completion on ssh and scp commands. You can see more of the options that can be set in the file <a href="http://linux.die.net/man/5/ssh_config" title="ssh config man page">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side by Side diff on the command line]]></title>
    <link href="http://edmondscommerce.github.io/bash/side-by-side-diff-on-the-command-line.html"/>
    <updated>2013-07-09T17:25:18+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/side-by-side-diff-on-the-command-line</id>
    <content type="html"><![CDATA[<p>I have recently discovered a handy trick when comparing files on the command line.</p>

<p>Adding the -y command line options to diff will display the files side by side.</p>

<p>Using this with the <a href="http://www.colordiff.org/" title="Color Diff" target="_blank">Color Diff</a> tool will help you transform this</p>

<p><img src="/assets/normal-diff.png"></p>

<p>To this</p>

<p><img src="/assets/color-diff-600x200.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Payment has failed... Magento and SagePay CE Error + Solution]]></title>
    <link href="http://edmondscommerce.github.io/magento/payment-has-failed-magento-and-sagepay-ce-error-solution.html"/>
    <updated>2013-05-22T14:58:25+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/payment-has-failed-magento-and-sagepay-ce-error-solution</id>
    <content type="html"><![CDATA[<p>I recently upgraded a magento store and installed the Sage Pay Suite CE module from EbizMarks.</p>

<p>The following error came up twice during the testing of the module, once in the frontend and once in the admin.</p>

<p><strong>Payment has failed, please reload checkout page and try again. Your card has not been charged</strong></p>

<p>The error itself is triggered from the saveAfter method in the Ebizmarts_SagePaySuite_Model_Observer_Sales class and is called every time an order is saved.</p>

<p>The error on the frontend was caused by a javascript error. Adding the following to the top of the sagePaySuite_Checkout.js file corrected it</p>

<p>```javascript</p>

<p>if(typeof sagePayIsMobile == &lsquo;undefined&rsquo;) {</p>

<pre><code>var sagePayIsMobile = function() {
    return (navigator.userAgent.match(/BlackBerry/i) ||
        navigator.userAgent.match(/webOS/i) ||
        navigator.userAgent.match(/Android/i) ||
        navigator.userAgent.match(/iPhone/i) ||
        navigator.userAgent.match(/iPod/i) ||
        navigator.userAgent.match(/iPad/i));
}
</code></pre>

<p>}</p>

<p>```</p>

<p>The error in the admin was caused by a different extension being called when the order was saved. Normally the extension ensures that the method is not called when it is not needed and this is done by checking the route and the registry. If an extension saves the order these checks are not triggered so you will need to add in your own. To do that you will need add the following code to the action that is saving the error</p>

<p>```php</p>

<p>Mage::register(&lsquo;skipSagePay&rsquo;, TRUE);</p>

<p>```</p>

<p>and then change the following line in the Ebizmarts/SagePaySuite/Model/Observer/Sales.php file</p>

<p>```php</p>

<p>if( (Mage::app()&ndash;>getRequest()&ndash;>getControllerModule() == &lsquo;Mage_Api&rsquo;) || Mage::registry(&lsquo;current_shipment&rsquo;) || Mage::registry(&lsquo;sales_order&rsquo;) || Mage::registry(&lsquo;current_creditmemo&rsquo;) || Mage::registry(&lsquo;current_invoice&rsquo;) || ($order->getPayment()&ndash;>getMethod() == &lsquo;sagepayrepeat&rsquo;) ){</p>

<p>```</p>

<p>to
```php</p>

<p>if( (Mage::app()&ndash;>getRequest()&ndash;>getControllerModule() == &lsquo;Mage_Api&rsquo;) || Mage::registry(&lsquo;current_shipment&rsquo;) || Mage::registry(&lsquo;sales_order&rsquo;) || Mage::registry(&lsquo;current_creditmemo&rsquo;) || Mage::registry(&lsquo;current_invoice&rsquo;) || ($order->getPayment()&ndash;>getMethod() == &lsquo;sagepayrepeat&rsquo;) || Mage::registry(&lsquo;skipSagePay&rsquo;)){</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
