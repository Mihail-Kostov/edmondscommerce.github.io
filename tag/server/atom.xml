<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: server | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/server/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-03-04T16:57:08+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing a Magento site in maintenance mode]]></title>
    <link href="http://edmondscommerce.github.io/magento/testing-a-magento-site-in-maintenance-mode.html"/>
    <updated>2013-05-09T12:15:23+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/testing-a-magento-site-in-maintenance-mode</id>
    <content type="html"><![CDATA[<p>Often you&rsquo;ll have your site in maintenance mode, but obviously before you show your changes to the world you&rsquo;ll want to check the site over.</p>

<p>The best way to set Magento into Maintenance Mode is to add a maintenance.flag file to the web root, and there&rsquo;s a snippet of code in Magento&rsquo;s index.php which handles this:</p>

<p>```php</p>

<p>$maintenanceFile = &lsquo;maintenance.flag&rsquo;;</p>

<p>&hellip;</p>

<p>if (file_exists($maintenanceFile)) {</p>

<pre><code>include_once dirname(__FILE__) . '/errors/503.php';
exit;
</code></pre>

<p>}</p>

<p>```</p>

<p>You&rsquo;ll want to set this to also take your IP address into consideration, so just make the following amends and you&rsquo;ll have added conditional maintenance mode:</p>

<p>```php</p>

<p>$maintenanceFile = &lsquo;maintenance.flag&rsquo;;</p>

<p>&hellip;</p>

<p>if (file_exists($maintenanceFile) &amp;&amp; $_SERVER[&lsquo;REMOTE_ADDR&rsquo;] != &quot;123.123.123.123&quot;) {</p>

<pre><code>if($_SERVER['REMOTE_ADDR'] == &amp;quot;123.123.123.123&amp;quot;) {
    //Do nothing, but it's safer to check if it *is* your IP than *isn't*
}
else {
    include_once dirname(__FILE__) . '/errors/503.php';
    exit;
</code></pre>

<p>   }
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prestashop Debug Mode using the Magento Environment Variable Method]]></title>
    <link href="http://edmondscommerce.github.io/prestashop/prestashop-debug-mode-using-the-magento-environment-variable-method.html"/>
    <updated>2013-04-25T10:14:30+01:00</updated>
    <id>http://edmondscommerce.github.io/prestashop/prestashop-debug-mode-using-the-magento-environment-variable-method</id>
    <content type="html"><![CDATA[<p>Magento developers are no doubt familiar with the concept of defining a server environment variable MAGE_IS_DEVELOPER_MODE so that when running Magento locally it is always in developer mode but there is no chance of accidently deploying a live site in developer mode.</p>

<p>This little trick will allow you to use the same environment variable to also have the same effect when working with PrestaShop.</p>

<p>To explain &ndash; developer mode generally means that things like error messages and debugging information are displayed clearly in the browser which makes things much easier when you are developing, to see what is going wrong.</p>

<p>On a live site you want to keep error information hidden and generally display to the customer a more friendly error message screen that perhaps helps them find their way back to a functional section of the site or gives them information to contact the site owner directly for assistance.</p>

<p>Anyway, to put PrestaShop in debug mode locally but have no risk of deployign this to live you can alter the file: config/defines.inc.php</p>

<p>from
```php</p>

<p>define(&lsquo;<em>PS_MODE_DEV</em>&rsquo;, false);</p>

<p>```</p>

<p>to
```php</p>

<p>define(&lsquo;<em>PS_MODE_DEV</em>&rsquo;, isset($_SERVER[&lsquo;MAGE_IS_DEVELOPER_MODE&rsquo;]));</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release SagePay Form Orders via API]]></title>
    <link href="http://edmondscommerce.github.io/sagepay/release-sagepay-form-orders-via-api.html"/>
    <updated>2013-03-19T17:54:16+00:00</updated>
    <id>http://edmondscommerce.github.io/sagepay/release-sagepay-form-orders-via-api</id>
    <content type="html"><![CDATA[<p>If you use SagePay Form integration then you might think that it is impossible to release orders created via this integration system via the API.</p>

<p>Historically this was true however thanks to the new admin and reporting API you can now grab all of the details you need to perform the kind of admin side integration previously only possible via Server and Direct integrations.</p>

<p>This does take a bit of work but if you like the fact that Form alleviates PCI compliance issues, allows your customers to use the nice easy to use Form interface and also gives you easy PayPal integration then this is a great solution.</p>

<p>Thanks goes out to SagePay&rsquo;s technical support who have proved really helpful in ironing out the kinks in getting this working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Log File Analysis Script]]></title>
    <link href="http://edmondscommerce.github.io/bash/apache-log-file-analysis-script.html"/>
    <updated>2013-03-14T14:17:48+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/apache-log-file-analysis-script</id>
    <content type="html"><![CDATA[<p>Here is a little bash script we knocked together to track down some malicious activity on a clients server.</p>

<p>Using a bit of awk etc to parse the log files we could quickly track down an IP address that was overloading the server and then take steps to block that person.</p>

<p>Here is the script:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<h6>SETUP</h6>

<p>LOG_FOLDER=/var/www/vhosts/domain.co.uk/statistics/logs
ACCESS_LOG=$LOG_FOLDER/access_log</p>

<p>HOW_MANY_ROWS=20000</p>

<h6>### FUNCTIONS</h6>

<p>function title() {</p>

<pre><code>echo "
</code></pre>

<hr />

<h2>$@</h2>

<p>&ldquo;
}</p>

<p>function urls_by_ip() {</p>

<pre><code>local IP=$1
tail -5000 $ACCESS_LOG | awk -v ip=$IP ' $1 ~ ip {freq[$7]++} END {for (x in freq) {print freq[x], x}}' | sort -rn | head -20
</code></pre>

<p>}</p>

<p>function ip_addresses_by_user_agent(){</p>

<pre><code>local USERAGENT_STRING="$1"
local TOP_20_IPS="`tail  -$HOW_MANY_ROWS $ACCESS_LOG | grep "${USERAGENT_STRING}"  | awk '{freq[$1]++} END {for (x in freq) {print freq[x], x}}' | sort -rn | head -20`"
echo "$TOP_20_IPS"
</code></pre>

<p>}</p>

<h6># RUN REPORTS</h6>

<p>title &ldquo;top 20 URLs&rdquo;
TOP_20_URLS=&ldquo;<code>tail -$HOW_MANY_ROWS $ACCESS_LOG | awk '{freq[$7]++} END {for (x in freq) {print freq[x], x}}' | sort -rn | head -20</code>&rdquo;
echo &ldquo;$TOP_20_URLS&rdquo;</p>

<p>title &ldquo;top 20 URLS excluding POST data&rdquo;
TOP_20_URLS_WITHOUT_POST=&ldquo;<code>tail  -$HOW_MANY_ROWS $ACCESS_LOG | awk -F"[ ?]" '{freq[$7]++} END {for (x in freq) {print freq[x], x}}' | sort -rn | head -20</code>&rdquo;
echo &ldquo;$TOP_20_URLS_WITHOUT_POST&rdquo;</p>

<p>title &ldquo;top 20 IPs&rdquo;
TOP_20_IPS=&ldquo;<code>tail  -$HOW_MANY_ROWS $ACCESS_LOG | awk '{freq[$1]++} END {for (x in freq) {print freq[x], x}}' | sort -rn | head -20</code>&rdquo;
echo &ldquo;$TOP_20_IPS&rdquo;</p>

<p>title &ldquo;top 20 user agents&rdquo;
TOP_20_USER_AGENTS=&ldquo;<code>tail  -$HOW_MANY_ROWS $ACCESS_LOG | cut -d\  -f12- | sort | uniq -c | sort -rn | head -20</code>&rdquo;
echo &ldquo;$TOP_20_USER_AGENTS&rdquo;</p>

<p>title &ldquo;IP Addresses for Top 3 User Agents&rdquo;</p>

<p>for ((I=1; I&lt;=3; I++))
do</p>

<pre><code>UA="`echo "$TOP_20_USER_AGENTS" | head -n $I | tail -n 1 | awk '{$1=""; print $0}'`"
echo "$UA"
echo "~~~~~~~~~~~~~~~~~~"
ip_addresses_by_user_agent "$UA"
echo "
"
</code></pre>

<p>done</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash timeout and copying text in vim]]></title>
    <link href="http://edmondscommerce.github.io/bash/bash-timeout-and-copying-text-in-vim.html"/>
    <updated>2013-03-14T12:59:42+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/bash-timeout-and-copying-text-in-vim</id>
    <content type="html"><![CDATA[<p>I have been working with a server that had been configured differently from the way that I prefer.</p>

<p>The two biggest complaints that I had about it were that the timeout was set very low, meaning that the connection would break off every five minutes, and that vim had been set up so if you selected text using the mouse you could not copy it.</p>

<p>The solutions to these two problems are as follows.</p>

<p>You can tell the terminal not to timeout with the following command</p>

<p>```bash</p>

<p>export TMOUT=0</p>

<p>```</p>

<p>Be aware that this will only work for the terminal that you are working with.</p>

<p>The issue with vim is that the mouse was triggering visual mode.</p>

<p>To get round this hold down shift when selecting text and everything will work as expected</p>
]]></content>
  </entry>
  
</feed>
