<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: version control | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/version-control/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-01-03T19:48:06+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Magento Database Migrations to Track Configuration Changes]]></title>
    <link href="http://edmondscommerce.github.io/magento/using-magento-database-migrations-to-track-configuration-changes.html"/>
    <updated>2013-05-21T09:11:44+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/using-magento-database-migrations-to-track-configuration-changes</id>
    <content type="html"><![CDATA[<p>Often when working on a Magento site, there is a requirement to build custom functionality or implement new themes etc but to finish the job, the final step will be to perform some admin configuration.</p>

<p>This manual step can introduce the possiblity of human error if a step is missed or not performed exactly correctly.</p>

<p>Also if the configuration is to be applied multiple times across staging, pre production and final production then these risks increase.</p>

<p>The only sure way to make sure that the correct configuration is applied and also to provide a proper audit trail for configuration changes is to use Magento&rsquo;s database migrations &ndash; install and upgrade scripts &ndash; to update the database programmatically with the required configuration changes.</p>

<p>To assist with this, there is a nice simple module you can find on Git Hub:</p>

<p><a href="https://github.com/danslo/MigrationHelper"><a href="https://github.com/danslo/MigrationHelper">https://github.com/danslo/MigrationHelper</a></a></p>

<p>This module will automatically create the migration files for you which can be a real time saver.</p>

<p>I would always suggest you create your own custom namespaced configuration migration module that is purely to track these configuration changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Your Web Site and Code Version Control]]></title>
    <link href="http://edmondscommerce.github.io/git/managing-your-web-site-and-code-version-control.html"/>
    <updated>2013-03-11T18:22:29+00:00</updated>
    <id>http://edmondscommerce.github.io/git/managing-your-web-site-and-code-version-control</id>
    <content type="html"><![CDATA[<p>Managing a web site posses many difficulties. On the technical side of things there are really two big problems which are the database and the code for the site.</p>

<p>Managing the database is currently the hardest thing to do right. The best you can do generally is to make sure you have a daily backup. Then if some thing should happen you would only lose up to 24 hours of new products, order and customers. Significantly more complex solutions are available that offer grater flexibility but these solutions usually depend on the hosting company to support it and often have a large setup cost.</p>

<p>Conversely, on the code management there are many solutions available that can be implemented easily and generally do not require the assistance of the hosting provider.
To get your sites code base under control you need to use a version control system. A version control system is a system that remembers every change made to code at a given point in time and allows you to easily see the differences between different versions.</p>

<p>Been able to see the many different versions of all the files that make up the site gives you the following advantages:
You can see when some thing changed.
You can see what was changed.
You can see who changed it.
You can see why it was changed.
You can see the logical progress of changes that lead to a given state.</p>

<p>Version control is important to maintaining a good code base for all the reasons above plus more (integration with issue tracking, deployment and other systems). It can also be invaluable in disaster recovery scenarios where some code has been altered and it&rsquo;s negatively impacted the site even out side of the version control system. In such scenarios you can take what ever is on the live site and compare it with what is in the version control system really easily.</p>

<p>It used to be the case that using version control was quite a difficult and technical matter. Fortunately since then there are many tools and websites available to make the whole process much easier.</p>

<p>GitHub and Bitbucket are currently two really popular websites for hosting Git repositories and provide much material for helping new users along.</p>

<p>At Edmonds Commerce Git is our version control system of choice because it&rsquo;s very powerful, highly flexible and integrates with many systems. There are several different clients available to help you along with Git but due to the flexibility that git offers to do certain things you may end up reverting to the command line.</p>

<p>Here is a list of alternative to the TortoiseGit (a popular Windows tool) client
<a href="http://alternativeto.net/software/tortoisegit/">http://alternativeto.net/software/tortoisegit/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Ignore All Files Except PHP etc + Solution]]></title>
    <link href="http://edmondscommerce.github.io/git/git-ignore-all-files-except-php-etc-solution.html"/>
    <updated>2009-07-02T09:41:54+01:00</updated>
    <id>http://edmondscommerce.github.io/git/git-ignore-all-files-except-php-etc-solution</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>Using Git for version control is great, but if like my you work on a lot of different projects then everything you can do to save time setting Git up is well worth it.</p>

<p>One of the features of Git is the ability to only track certain files and ignore other files. For me that means I only want to track files I am likely to be editing and ignore images, flash files and whatever other junk is floating around in a project.</p>

<p>The solution (and all credit and thanks to the kind people on #Git on Freenode IRC) is this .gitignore file. This file will ignore everything except files with the extensions that you set. Dead easy.</p>

<p>```</p>

<h1>ignore everything apart from php, css, xml, htaccess, sql, js</h1>

<p>*
!<em>/
!</em>.php
!<em>.css
!</em>.xml
!<em>.htaccess
!</em>.sql
!*.js</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
