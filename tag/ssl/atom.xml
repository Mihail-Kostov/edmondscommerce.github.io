<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ssl | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/ssl/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-06-24T10:48:18+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSL testing and SHA-1 Sunsetting]]></title>
    <link href="http://edmondscommerce.github.io/security/ssl-testing-and-sha-1-sunsetting.html"/>
    <updated>2014-11-12T13:03:36+00:00</updated>
    <id>http://edmondscommerce.github.io/security/ssl-testing-and-sha-1-sunsetting</id>
    <content type="html"><![CDATA[<p>Over last few days we been doing a bit of work on doing some audits for people and one of the things that has come up is ssl. For the purpose of checking the servers ssl implementation we have been using <a href="https://www.ssllabs.com/ssltest/">Qualys SSL Labs</a> which is a excelent tool.</p>

<p>The checker checks for the ssl certificate and tells you if your server setup is vulnerable to attacks such as Poodle and OpenSSL CCS Injection. We will produce a blog post shortly on the best practise setup to prevent these attcks.</p>

<p>For the moment SHA-1 as a certificate signature algorithm is getting depricated in <a href="https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know">chrome</a>. As the cost for collision attcks against SHA-1 will become more <a href="https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html">affordable</a> in the next few years.</p>

<p>Goole have set the cut off for certificates after 2016 but we will be seeing some crosses on the padlock in chrom during the first quater of 2015.</p>

<p>If your certificate expires in 2015 then you will not see any chrome. If your certificate expires in 2016 you will see some minor errors being reported in chrome. However if your certificate expires in 2017 then chrome will treat it as an insecure certificate in 2015.</p>

<p>So our advice is:</p>

<ul>
<li>If your certificate expires in 2015: When you come to renew make sure you get SHA-256 as the certificate signature</li>
<li>If your certificate expires in 2016: Think about getting renewed during 2015 or earlier.</li>
<li>If your certificate expires in 2017: Think about getting a new one issue as soon as possible.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSL Certificates and Java!]]></title>
    <link href="http://edmondscommerce.github.io/java/ssl-certificates-and-java.html"/>
    <updated>2012-02-24T11:21:55+00:00</updated>
    <id>http://edmondscommerce.github.io/java/ssl-certificates-and-java</id>
    <content type="html"><![CDATA[<p>Java is a bit more picky about SSL authorities than, say, Chrome or Firefox. Fortunately adding a certificates to Java to accept it as secure is fairly straight forward:</p>

<p>sudo keytool -import -keystore /usr/lib/jvm/java-6-sun/jre/lib/security/cacerts -file cert.crt
Password: changeit</p>

<p>Of course acquiring the certificate file can be a little tricky as it&rsquo;s entirely dependant on your setup. Also /usr/lib/jvm/java-6-sun/jre/lib/security/cacerts is the default location for the keystore on Ubuntu, this may differ depending on your OS/distribution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixed Content HTTPS Red Line SSL Google Chrome]]></title>
    <link href="http://edmondscommerce.github.io/debugging/mixed-content-https-red-line-ssl-google-chrome.html"/>
    <updated>2012-02-13T17:11:45+00:00</updated>
    <id>http://edmondscommerce.github.io/debugging/mixed-content-https-red-line-ssl-google-chrome</id>
    <content type="html"><![CDATA[<p>If Chrome is displaying mix content errors this means that Chrome thinks that some of the resources on the page where loaded over HTTP rather than HTTPS. But one behaviour of Chrome that might catch you out is that if Chrome at any point on a domain encountered a page with mixed content, it will then treat the whole site as having mixed content even if a given single page does not have mixed content. Chrome is unlikely to tell you this is the reason a single page has mixed content, the best way to tell is to keep closing chrome, starting a new session and browse until you get mixed content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got the Insecure Content on a Secure HTTPs Page Problem - Easy Solution]]></title>
    <link href="http://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution.html"/>
    <updated>2012-01-12T12:28:54+00:00</updated>
    <id>http://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution</id>
    <content type="html"><![CDATA[<p>Often you will see SSL warnings or errors related to insecure content being displayed on a secure page.</p>

<p>This could be as simple as one javascript file or image that is being included via http rather than https, though some times this can be a bit tricky to track down.</p>

<p>The easiest solution is to hit this site:</p>

<p><a href="http://www.whynopadlock.com/"><a href="http://www.whynopadlock.com/">http://www.whynopadlock.com/</a></a></p>

<p>This will give you a clear report of the problems and should help you quickly find and fix them.</p>

<p>Alternatively if you use Chrome you may see the details in the Javascript console.</p>

<p>Once you know what elements are being called by http as opposed to https, you simply need to make them use https or remove them altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax Silently Failing in HTTPS but fine in HTTP]]></title>
    <link href="http://edmondscommerce.github.io/javascript/ajax-silently-failing-in-https-but-fine-in-http.html"/>
    <updated>2011-03-07T16:41:21+00:00</updated>
    <id>http://edmondscommerce.github.io/javascript/ajax-silently-failing-in-https-but-fine-in-http</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you are struggling to debug why some ajax, perhaps using jquery etc is working fine when you access the page via http, but if you use https then it fails silently with very little error messaging to work on then this could be your solution.</p>

<p>Basically, although you have accessed the page over HTTPS, if there are any insecure elements on the page then your ajax call will default to http and will then fail silently thanks to cross domain policy problems.</p>

<p>If you debug in chrome, you do get a meaningful error message but if like me you generally prefer working in Firefox and Firebug then you are up the creek.</p>

<p>Double check your source code for <a href="http://">http://</a> and also check out live http headers for insecure calls.</p>
]]></content>
  </entry>
  
</feed>
