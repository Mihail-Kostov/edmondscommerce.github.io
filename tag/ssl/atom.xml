<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ssl | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/ssl/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-06T19:10:15+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSL Certificates and Java!]]></title>
    <link href="http://edmondscommerce.github.io/java/ssl-certificates-and-java.html"/>
    <updated>2012-02-24T11:21:55+00:00</updated>
    <id>http://edmondscommerce.github.io/java/ssl-certificates-and-java</id>
    <content type="html"><![CDATA[<p>Java is a bit more picky about SSL authorities than, say, Chrome or Firefox. Fortunately adding a certificates to Java to accept it as secure is fairly straight forward:</p>

<p>sudo keytool -import -keystore /usr/lib/jvm/java-6-sun/jre/lib/security/cacerts -file cert.crt
Password: changeit</p>

<p>Of course acquiring the certificate file can be a little tricky as it&rsquo;s entirely dependant on your setup. Also /usr/lib/jvm/java-6-sun/jre/lib/security/cacerts is the default location for the keystore on Ubuntu, this may differ depending on your OS/distribution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixed Content HTTPS Red Line SSL Google Chrome]]></title>
    <link href="http://edmondscommerce.github.io/debugging/mixed-content-https-red-line-ssl-google-chrome.html"/>
    <updated>2012-02-13T17:11:45+00:00</updated>
    <id>http://edmondscommerce.github.io/debugging/mixed-content-https-red-line-ssl-google-chrome</id>
    <content type="html"><![CDATA[<p>If Chrome is displaying mix content errors this means that Chrome thinks that some of the resources on the page where loaded over HTTP rather than HTTPS. But one behaviour of Chrome that might catch you out is that if Chrome at any point on a domain encountered a page with mixed content, it will then treat the whole site as having mixed content even if a given single page does not have mixed content. Chrome is unlikely to tell you this is the reason a single page has mixed content, the best way to tell is to keep closing chrome, starting a new session and browse until you get mixed content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got the Insecure Content on a Secure HTTPs Page Problem - Easy Solution]]></title>
    <link href="http://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution.html"/>
    <updated>2012-01-12T12:28:54+00:00</updated>
    <id>http://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution</id>
    <content type="html"><![CDATA[<p>Often you will see SSL warnings or errors related to insecure content being displayed on a secure page.</p>

<p>This could be as simple as one javascript file or image that is being included via http rather than https, though some times this can be a bit tricky to track down.</p>

<p>The easiest solution is to hit this site:</p>

<p><a href="http://www.whynopadlock.com/"><a href="http://www.whynopadlock.com/">http://www.whynopadlock.com/</a></a></p>

<p>This will give you a clear report of the problems and should help you quickly find and fix them.</p>

<p>Alternatively if you use Chrome you may see the details in the Javascript console.</p>

<p>Once you know what elements are being called by http as opposed to https, you simply need to make them use https or remove them altogether.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax Silently Failing in HTTPS but fine in HTTP]]></title>
    <link href="http://edmondscommerce.github.io/javascript/ajax-silently-failing-in-https-but-fine-in-http.html"/>
    <updated>2011-03-07T16:41:21+00:00</updated>
    <id>http://edmondscommerce.github.io/javascript/ajax-silently-failing-in-https-but-fine-in-http</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>If you are struggling to debug why some ajax, perhaps using jquery etc is working fine when you access the page via http, but if you use https then it fails silently with very little error messaging to work on then this could be your solution.</p>

<p>Basically, although you have accessed the page over HTTPS, if there are any insecure elements on the page then your ajax call will default to http and will then fail silently thanks to cross domain policy problems.</p>

<p>If you debug in chrome, you do get a meaningful error message but if like me you generally prefer working in Firefox and Firebug then you are up the creek.</p>

<p>Double check your source code for <a href="http://">http://</a> and also check out live http headers for insecure calls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Htaccess Force SSL with Redirect (Non Standard SSL Port Compatible)]]></title>
    <link href="http://edmondscommerce.github.io/hosting/htaccess-force-ssl-with-redirect-non-standard-ssl-port-compatible.html"/>
    <updated>2009-04-28T11:07:26+01:00</updated>
    <id>http://edmondscommerce.github.io/hosting/htaccess-force-ssl-with-redirect-non-standard-ssl-port-compatible</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>Check out this little snippet of htaccess code to force SSL usage. Works regardless of port.</p>

<p>```</p>

<p>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) <a href="https://%">https://%</a>{HTTP_HOST}%{REQUEST_URI}</p>

<p>```<h4>More&hellip;</h4></p>

<pre><code>        &lt;div style="font-size: .6em;"&gt;&lt;a href="http://omelyn.com/top-10-wordpress-htaccess-hacks/" rel="nofollow"&gt;Top 10 Wordpress .&lt;b&gt;htaccess&lt;/b&gt; hacks | Omelyn.com&lt;/a&gt;&lt;br&gt;&lt;a href="http://xplus3.net/2009/04/25/naming-a-htaccess-file-in-windows/" rel="nofollow"&gt;x + 3 - Naming a .&lt;b&gt;htaccess&lt;/b&gt; File in Windows&lt;/a&gt;&lt;br&gt;&lt;a href="http://www.blogherald.com/2009/04/21/movable-type-monday-comment-via-twitter-and-htaccess-hacks/" rel="nofollow"&gt;Movable Type Monday: Comment via Twitter and .&lt;b&gt;htaccess&lt;/b&gt; Hacks | The &lt;b&gt;...&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="http://vladgh.com/2009/03/slackware-linux-apache2-mysql-php-ssl/" rel="nofollow"&gt;Slackware Linux, Apache2, MySQL, PHP, &lt;b&gt;SSL&lt;/b&gt; | Vlad&amp;#39;s and Alice&amp;#39;s Blog&lt;/a&gt;&lt;br&gt;&lt;a href="http://luxsci.com/blog/how-does-secure-socket-layer-ssl-or-tls-work.html" rel="nofollow"&gt;How Does &lt;b&gt;Secure Socket Layer&lt;/b&gt; (&lt;b&gt;SSL&lt;/b&gt;) Work? | LuxSci FYI&lt;/a&gt;&lt;br&gt;&lt;a href="http://whatwouldnickdo.com/wordpress/431/quick-tomcat-https-ssl-config/" rel="nofollow"&gt;Quick Tomcat https &lt;b&gt;SSL&lt;/b&gt; Config | /home/nick&lt;/a&gt;&lt;br&gt;&lt;/div&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
