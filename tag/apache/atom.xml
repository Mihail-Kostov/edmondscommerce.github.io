<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: apache | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/apache/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-12-03T15:14:17+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blocking Direct IP Access in Apache]]></title>
    <link href="http://edmondscommerce.github.io/apache/blocking-direct-ip-access-in-apache.html"/>
    <updated>2014-12-03T15:08:37+00:00</updated>
    <id>http://edmondscommerce.github.io/apache/blocking-direct-ip-access-in-apache</id>
    <content type="html"><![CDATA[<p>If you are using Name based virtual hosts, you may want to simply block any bots etc that try to access your server by direct IP address. It&rsquo;s unlikely a real user would try to hit your server by using the actual IP address.</p>

<p>To do this, you can use this Virtual Host config:</p>

<p>```
<VirtualHost *:80></p>

<pre><code>ServerName 123.123.123.123
Redirect 403 /
ErrorDocument 403 "No"
DocumentRoot /dev/null/
UseCanonicalName Off
UserDir disabled
</code></pre>

<p></VirtualHost></p>

<p>```</p>

<p>Of course, please change the IP to the real server IP address(es)</p>

<p>And that&rsquo;s it, anyone trying to hit the server by IP address will get a simple 403 error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELinux and connecting to Mysql databases on Red Hat based distributions]]></title>
    <link href="http://edmondscommerce.github.io/linux/se-linux-and-connecting-to-a-mysql-database.html"/>
    <updated>2014-11-07T10:53:06+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/se-linux-and-connecting-to-a-mysql-database</id>
    <content type="html"><![CDATA[<p>SELinux can be restrictive by defult but prevent alot of security issues. One thing we found while trying it is that by default it will block network connections from being made via the httpd daemon. This is an issue if say on a development system you are running php via the apache module.</p>

<p>To resolve this simply login via root or sudo to root privilige and run the following command:</p>

<pre><code>setsebool -P httpd_can_network_connect on
</code></pre>

<p>You should now be able to connect to connect to your database. This will also enable things like web api, curl calls and other php that requires network access.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELinux Configuration for Alternative Document Root]]></title>
    <link href="http://edmondscommerce.github.io/linux/selinux-configuration-for-alternative-document-root.html"/>
    <updated>2014-10-04T12:19:52+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/selinux-configuration-for-alternative-document-root</id>
    <content type="html"><![CDATA[<p>SELinux provides a secure and fine grained way of controlling permissions for applications running on Linux. It moves beyond simple users and groups to something a lot more granular.</p>

<p>By default SELinux is configured expecting Apache to be using /var/www as its document root.</p>

<p>If you are using an alternative document root then you might find that Apache is unable to write to folders, even though permissions are correctly configured.</p>

<p>If this is the case, you might think that you should disable SELinux, however a better solution is to correctly configure it.</p>

<p>First of all you should double check what types http has:</p>

<p><code>bash
semanage fcontext -l | grep http
</code></p>

<p>We specifically need read/write access so lets grep for that:</p>

<p><code>bash
semanage fcontext -l | grep http | grep rw
</code></p>

<p>For me that shows the type: httpd_sys_rw_content_t</p>

<p>We now need to add this to our custom document root:</p>

<p><code>bash
semanage fcontext -a -t httpd_sys_rw_content_t ‘/opt/Projects(/.*)?’
restorecon -R -v /opt/Projects/
</code>
And then you should be able to run your sites from any folder you like without having to resort to disabling SELinux</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Mod Rewrite and Escaped Hashes (and other characters)]]></title>
    <link href="http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters.html"/>
    <updated>2013-04-22T13:57:49+01:00</updated>
    <id>http://edmondscommerce.github.io/apache/apache-mod-rewrite-and-escaped-hashes-and-other-characters</id>
    <content type="html"><![CDATA[<p>If you are having issues with mod rewrite apparently abandoning sections of variables after encoded hashes then this could be your solution.</p>

<p>The use case is particularly clear when using mod_rewrite in front of a search engine (such as Solr which I am really enjoying working with at the moment).</p>

<p>Imagine someone search for a partcode ABC#123</p>

<p>This gets encoded to search/abc%23123</p>

<p>Your rewritten search term will then be mangled by Apache and your search script will only actually see ABC. That is of course a problem and the solution is not really clear.</p>

<p>After a bit of searching around I found the solution is to add a B flag to your mod_rewrite rule so that mod_rewrite will escape these characters so that they are cleanly passed through.</p>

<p>For example:</p>

<p>```php</p>

<p>RewriteRule ^(.<em>)search/(.</em>)$ advanced_search_result.php?keywords=$2 [L,B]</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Mod Rewrite Escaped Slashes Problem + Solution]]></title>
    <link href="http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution.html"/>
    <updated>2013-04-11T11:05:20+01:00</updated>
    <id>http://edmondscommerce.github.io/apache/apache-mod-rewrite-escaped-slashes-problem-solution</id>
    <content type="html"><![CDATA[<p>As part of our Magento SEO service, the first thing we do is to make sure there are no issues with the crawlability and general health of the clients web site.</p>

<p>Whilst working on the Google Webmaster Tools crawl errors for a client I noticed one specific and intruiging problem for which I couldn&rsquo;t immediately see the reason, everything looked to be set up perfectly.</p>

<p>Certain URLs were getting 404 responses. The URL was being parsed by mod_rewrite but everything looked fine so why was apache giving a 404?</p>

<p>The problem turns out to be that the URLs contain escaped slashes (eg search/KTA-mb667k2%2F2g),</p>

<p>The problem is that Apache actually handles the escaped slash and helpfully converts it to a real slash. That then means that it is trying to look in a sub folder that does not exist and hence the 404.</p>

<p>Chances are you don&rsquo;t want escaped slashes to really be thought of as real directory separating slashes, especially if you are using mod_rewrite.</p>

<p>The answer is a simple one liner to be added to your vhost.conf or httpd.conf.</p>

<p>```</p>

<p>AllowEncodedSlashes On</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
