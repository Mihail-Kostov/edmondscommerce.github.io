<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: shell | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/shell/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-10-16T11:46:06+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finding out the biggest folders in a Magento or other website root]]></title>
    <link href="http://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root.html"/>
    <updated>2014-03-04T16:10:19+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root</id>
    <content type="html"><![CDATA[<p>Often pulling down a Magento or other site you&rsquo;ll find a load of files that have been dumped in the web root. Downloading these is often pointless and takes extra time, so you&rsquo;ll want to exclude them from an rsync (using the <code>--exclude 'path'</code> paramter).</p>

<p>A simple bash command for this is:</p>

<p>```bash</p>

<p>du -m &mdash;max-depth=1 &mdash;exclude media | sort -n</p>

<p>```</p>

<p>This invokes <code>du</code> to show each direct subfolder&rsquo;s contents' size, and pipes it through to <code>sort</code> to rank them in increasing size. The sizes are in MB. See <a href="http://explainshell.com/explain?cmd=du+-m+--max-depth%3D1+--exclude+media+|+sort+-n">a more broken down explanation here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab Complete for SSH and SCP]]></title>
    <link href="http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp.html"/>
    <updated>2013-07-26T10:31:41+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp</id>
    <content type="html"><![CDATA[<p>If you are required to connect to different servers, then remembering and typing in all of the details can become tiresome.</p>

<p>Thankfully there is simple solution to this, using the SSH config file.</p>

<p>To make use of this, create the following file ~/.ssh/config</p>

<p>In there add the following details</p>

<p>```bash</p>

<p>Host easyToRememberName</p>

<pre><code>HostName 127.0.0.1
Port 2020
User ross
</code></pre>

<p>```</p>

<p>You will then can tab completion on ssh and scp commands. You can see more of the options that can be set in the file <a href="http://linux.die.net/man/5/ssh_config" title="ssh config man page">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Bash Single Process Enforcement]]></title>
    <link href="http://edmondscommerce.github.io/bash/simple-bash-single-process-enforcement.html"/>
    <updated>2013-02-21T15:06:39+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/simple-bash-single-process-enforcement</id>
    <content type="html"><![CDATA[<p>If you have a bash script that you want to make sure there is only ever one instance of, for example something triggered by cron that might not have finished the next time cron tries to trigger it then you might like this little snippet:</p>

<p>This is built for running Magento shell scripts (if you don&rsquo;t know about these, check them out) that are run on cron.</p>

<p>Also note the logging that keeps log files</p>

<p>Note the use of a character class in grep means it wont match itself &ndash; nice eh :)</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>HOUR=<code>date +'%H:%M'</code>
RUNNING=<code>ps waux | grep "longrunner[.]php"</code>
if [ &ldquo;&rdquo; == &ldquo;$RUNNING&rdquo; ]
then</p>

<pre><code>echo "Its not running, we can now run it"
php -f /home/my/public_html/shell/longrunner.php -- import &gt; /home/my/public_html/var/log/mylog.txt 2&gt;&amp;1
cp -f  /home/my/public_html/var/log/my.txt /home/my/public_html/var/log/${HOUR}.my.txt
echo "COMPLETED"
</code></pre>

<p>else</p>

<pre><code>echo "It is running, aborting running this time"
</code></pre>

<p>fi</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Shell Scripts and Memory Limit Woes + Solution]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-shell-scripts-and-memory-limit-woes-solution.html"/>
    <updated>2012-12-19T11:53:48+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-shell-scripts-and-memory-limit-woes-solution</id>
    <content type="html"><![CDATA[<p>OK so you love Magento&rsquo;s shell scripts! They are great for quickly putting together bulk processes that have full access to the Magento ORM.</p>

<p>These kinds of shell scripts will often require above normal amounts of RAM for the kind of heavy lifting they lend themselves well to. If you are finding your script is banging against some mysterious memory limit that really shouldn&rsquo;t be there then perhaps this is your answer:</p>

<p>You might see an error message such as this:</p>

<p>```</p>

<p>Fatal error:  Allowed memory size of 134217728 bytes exhausted (tried to allocate 20 bytes)</p>

<p>```</p>

<p>The reason this might be happening is that one of the things the abstract shell class does is parse the .htaccess file and apply any PHP configuration it finds. This is pretty slick and I can definitely see the value of it however if you are not aware its happening and you have a memory limit defined in a .htaccess file then it will be applied to your shell environment.</p>

<p>The solution is up to you, edit the htaccess file or override this method in your shell class so that it doesn&rsquo;t do things you do not want:</p>

<p>```php</p>

<pre><code>/**
 * Parse .htaccess file and apply php settings to shell script
 *
 */
protected function _applyPhpVariables()
{
    $htaccess = $this-&gt;_getRootPath() . '.htaccess';
    if (file_exists($htaccess)) {
        // parse htaccess file
        $data = file_get_contents($htaccess);
        $matches = array();
        preg_match_all('#^\s+?php_value\s+([a-z_]+)\s+(.+)$#siUm', $data, $matches, PREG_SET_ORDER);
        if ($matches) {
            foreach ($matches as $match) {
                @ini_set($match[1], $match[2]);
            }
        }
        preg_match_all('#^\s+?php_flag\s+([a-z_]+)\s+(.+)$#siUm', $data, $matches, PREG_SET_ORDER);
        if ($matches) {
            foreach ($matches as $match) {
                @ini_set($match[1], $match[2]);
            }
        }
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xdebug PHP and Command Line Scripts]]></title>
    <link href="http://edmondscommerce.github.io/php/xdebug-php-and-command-line-scripts.html"/>
    <updated>2012-08-21T16:31:15+01:00</updated>
    <id>http://edmondscommerce.github.io/php/xdebug-php-and-command-line-scripts</id>
    <content type="html"><![CDATA[<p>I had a requirement to use Xdebug to step through a PHP script that is being run on the command line.</p>

<p>Oh no I thought, this is bound to be really complicated to figure out because I normally use the web browser and I have never done this before.</p>

<p>Pleasant surprise, its actually really easy to do this, all you need to do on the command line is run the following command:</p>

<p>```bash</p>

<p>export XDEBUG_CONFIG=&quot;idekey=netbeans-xdebug&quot;</p>

<p>```</p>

<p>Then get your IDE (PHPStorm for me) listening for Xdebug and then run your PHP file on the command line.</p>

<p>```bash</p>

<p>php ./myfile.php</p>

<p>```</p>

<p>That&rsquo;s it, it just works.</p>

<p>One caveat (which I actually quite like) is that it will now ALWAYS get picked up by xdebug which could get in your way. To stop this, simply unset the variable like this:</p>

<p>```bash</p>

<p>unset XDEBUG_CONFIG</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
