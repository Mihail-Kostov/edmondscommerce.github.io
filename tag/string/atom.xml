<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: string | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/string/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-11-10T11:40:03+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP Base64 Decode if Encoded Otherwise Leave Intact]]></title>
    <link href="http://edmondscommerce.github.io/php/php-base64-decode-if-encoded-otherwise-leave-intact.html"/>
    <updated>2013-07-25T15:05:08+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-base64-decode-if-encoded-otherwise-leave-intact</id>
    <content type="html"><![CDATA[<p>I had a scenario where an API I was working with would sometimes base64 encode data (instead of using CDATA which is the more usual approach).</p>

<p>However to really make things interesting, they didn&rsquo;t always do this so you couldn&rsquo;t just go and decode everything.</p>

<p>Here is the solution I came up with:</p>

<p>First of all, take the raw response and run preg_replace_callback on it to grab all of the XML contents:</p>

<p>```php</p>

<p>preg_replace_callback(&lsquo;%>([^&lt;]+?)&lt;%&rsquo;, array($this, &lsquo;_decode&rsquo;), $response)</p>

<p>```</p>

<p>Then the callback function is a method on the same object hence the use of array($this, &lsquo;_decode&rsquo;)</p>

<p>```php</p>

<pre><code>/**
 * Decode from bas64 if it actually is base64 encoded in the first place
 *
 * If not return the raw string
 *
 * @param $matches
 * @return string
 */
protected function _decode($matches)
{
    $raw=$matches[1];
    $decoded = base64_decode($raw, true);
    $return=$decoded;
    if(false === $decoded){
        $return=$raw;
    }elseif(base64_encode($decoded) != $raw){
        $return=$raw;
    }
    return '&gt;&lt;![CDATA[' . $return . ']]&gt;&lt;';
}
</code></pre>

<p>```</p>

<p>What this method does is first of all try calling decode with the optional strict flag. This makes the function return false if it thinks it isn&rsquo;t base64 encoded. It would be great if this was enough but unfortunately you need to do more.</p>

<p>If it doesn&rsquo;t return false at that stage, we do the real test which is to try encoding it back to base64 and make sure that the rencoded string matches the raw (before original decoding) string. If it was base64 encoded in the first place then this should match.</p>

<p>By doing this we can handle any kind of mixture of base64 encoded and plain text xml string and get it ready for simpleXMl.</p>

<p>Notice I am also wrapping the data in CDATA tags to help avoid XML issues when creating the simpleXml object.</p>

<p>However &ndash; one last trick. The reason they were using base64 encoding is because there was some dodgy non XML friendly characters in there. The solution here (if you don&rsquo;t mind compromising the data a little which I didn&rsquo;t for my purposes) then you can do the following:</p>

<p>```php</p>

<p>//have to utf8 encode it to fix the fact its not properly encoded at their end
$xml = simplexml_load_string(utf8_encode($response));</p>

<p>```</p>

<p>And that&rsquo;s it, another crazy API defeated and bent to my will!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Replace "Malformed Replacement String"]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html"/>
    <updated>2013-01-24T17:39:08+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string</id>
    <content type="html"><![CDATA[<p>If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.</p>

<p>The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.</p>

<p>Take the following example code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$input-&gt;name]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$textarea-&gt;name]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>And trying to replace the key being used in the data array with a processed one calling a method $this->dataName($key) to generate the following code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$this-&gt;dataName($textarea-&gt;name)]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>You might try the find pattern:</p>

<p>```</p>

<p>\$data[\$([^&ndash;]+)&ndash;>name]</p>

<p>```</p>

<p>And the replace pattern:
```</p>

<p>\$data[\$this->dataName(\$$1->name)]</p>

<p>```</p>

<p>However this will give you the dreaded <b>&ldquo;malformed replacement string&rdquo;</b> Error</p>

<p>The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:</p>

<p>```</p>

<p>\\$data[\\$this->dataName(\\$$1->name)]</p>

<p>```</p>

<p>And it works, woot!</p>

<p>Also when it does work, PHP Storms replacement preview feature is really quite nice</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP List Function Silently Failing? Solution]]></title>
    <link href="http://edmondscommerce.github.io/php/php-list-function-silently-failing-solution.html"/>
    <updated>2012-03-28T12:01:50+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-list-function-silently-failing-solution</id>
    <content type="html"><![CDATA[<p>If you use PHP&rsquo;s <a href="http://php.net/manual/en/function.list.php">list</a> function to quickly extract array values out into dollar variables then you might have an issue where it just doesn&rsquo;t work for some reason.</p>

<p>The problem is that list only works with numeric arrays. If you are using an associative array (with strings for keys instead of numbers) then list will not work.</p>

<p>There is any easy solution though, simply change:</p>

<p>```php</p>

<p>$array = array(&lsquo;a&rsquo;=>1, &lsquo;b&rsquo;=>2, &lsquo;c&rsquo;=>3);
list($a, $b, $c) = $array;</p>

<p>```</p>

<p>To:</p>

<p>```php</p>

<p>$array = array(&lsquo;a&rsquo;=>1, &lsquo;b&rsquo;=>2, &lsquo;c&rsquo;=>3);
list($a, $b, $c) = array_values($array);</p>

<p>```</p>

<p>And it will work as you expect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Split String on Word Break (No Regex or Arrays, Dead Simple)]]></title>
    <link href="http://edmondscommerce.github.io/php/php-split-string-on-word-break-no-regex-or-arrays-dead-simple.html"/>
    <updated>2012-01-03T17:32:27+00:00</updated>
    <id>http://edmondscommerce.github.io/php/php-split-string-on-word-break-no-regex-or-arrays-dead-simple</id>
    <content type="html"><![CDATA[<p>Need to take a string of text and shorten it down but make sure you split on a word break?</p>

<p>This little snippet might be exactly what you are looking for.</p>

<p>```php</p>

<p>$text=substr($text, 0, strpos($text, &lsquo; &rsquo;, 50));</p>

<p>```</p>

<p>effectively you are saying give me the position of the first space after character 50 and then chop the string there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Search History for Specific Line of Code or String]]></title>
    <link href="http://edmondscommerce.github.io/git/git-search-history-for-specific-line-of-code-or-string.html"/>
    <updated>2011-12-09T11:18:51+00:00</updated>
    <id>http://edmondscommerce.github.io/git/git-search-history-for-specific-line-of-code-or-string</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you need to track down exactly how and when a particular change happened and you are not even sure exactly where it is (perhaps because its no longer present but you are not totally sure where it was supposed to be) then this little trick can be a life saver.</p>

<p>You can search git log for a specific string with the -S flag</p>

<p>eg, searching for a constant definition</p>

<p>git -log -SCONSTANT_NAME</p>

<p>very handy indeed :)</p>
]]></content>
  </entry>
  
</feed>
