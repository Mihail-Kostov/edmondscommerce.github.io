<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: coding standards | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/coding-standards/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-01-23T15:55:45+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP error checking in Vim with Syntastic]]></title>
    <link href="http://edmondscommerce.github.io/Vim/php-error-checking-in-vim-with-syntastic.html"/>
    <updated>2014-10-16T11:27:40+01:00</updated>
    <id>http://edmondscommerce.github.io/Vim/php-error-checking-in-vim-with-syntastic</id>
    <content type="html"><![CDATA[<p>If you are using Vim for any kind of PHP development work, then you may miss the sanity checking that is included in some IDEs.</p>

<p>However, it possible to add this in using the <a href="https://github.com/scrooloose/syntastic">Syntastic</a>
plug-in. Installation is quite simple and can be handled by any of the common plug-in managers.</p>

<p>It should be noted that the plug-in just calls external checkers, so you will need to have these setup and configured,
but you should have this done already&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically convert old PHP file to camelCase ]]></title>
    <link href="http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase.html"/>
    <updated>2013-10-17T10:53:15+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been working with an old project that uses a combination of different coding styles.</p>

<p>One of the more trivial annoyances with this is that the variables used through the project are a combination of $camelCase and $snake_case which throws of the coding standards tools that I use.</p>

<p>To get round this I have put a little script together that will convert $snake_case to $camelCase automatically.</p>

<p>Obviously, you will need to check the results of this to make sure that there are not variables that should not be changed, but it has saved me a lot of time doing this manually.</p>

<p>I&rsquo;ve added this to my .bash_allias file, though it could easily be turned into a standalone script if required</p>

<p>```bash</p>

<h1>Fix legacy code</h1>

<p> cammelCase() {
   vim -E -s $@ &lt;&lt;-EOF
   :%s#\%($\%(\k+))\@&lt;=_(\k)#\u\1#g
   :update
   :quit
EOF</p>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
