<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: data | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/data/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-11-28T13:20:54+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS + Sun Java + Amazon AMTU 2]]></title>
    <link href="http://edmondscommerce.github.io/amazon/centos-sun-java-amazon-amtu-2.html"/>
    <updated>2012-08-14T17:33:31+01:00</updated>
    <id>http://edmondscommerce.github.io/amazon/centos-sun-java-amazon-amtu-2</id>
    <content type="html"><![CDATA[<p>In a follow up to our popular blog post describing the process of getting AMTU 1 set up on a Centos server, this post describes how to get the latest version 2 of AMTU running.</p>

<p>Things have moved on and thankfully it is a lot easier than it was.</p>

<p>Firstly get Sun Java installed. You will need to get the URL for downloading the RPM from here:
<a href="http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1637588.html">http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1637588.html</a></p>

<p>Accept the agreement, download the correct RPM version and then pause it. Copy the download URL and paste it into this command:
```bash</p>

<p>cd /tmp
wget [paste-url]-here]
rpm &ndash; jre [hit tab to complete]</p>

<p>```</p>

<p>Now check the correct java version is being used:</p>

<p>```bash</p>

<p>java -version</p>

<p>```</p>

<p>You should get something looking like:</p>

<p>```</p>

<p>[root@94 tmp]# java -version
java version &quot;1.7.0_05&quot;
Java&trade; SE Runtime Environment (build 1.7.0_05-b06)
Java HotSpot&trade; 64-Bit Server VM (build 23.1-b03, mixed mode)</p>

<p>```</p>

<p>Now you can install AMTU</p>

<p>```bash</p>

<p>wget <a href="https://d28hcfptedr5ia.cloudfront.net/install/AMTU_unix.sh">https://d28hcfptedr5ia.cloudfront.net/install/AMTU_unix.sh</a>
chmod +x AMTU_unix.sh
./AMTU_unix.sh</p>

<p>```</p>

<p>Keep hitting enter to get to the bottom of the terms and then agree, agree to all the other options. That is AMTU installed.</p>

<p>The final step is to configure this using the CLI configure utitlity.</p>

<p>You need to create an xml file for the AMTU configuration. You can see a sample file in /opt/amtu/xml/sample.xml.</p>

<p>Lets copy that file and then edit it accordingly.</p>

<p>```bash</p>

<p>cd /opt/amtu/xml
cp sample.xml configuration.xml
vim configuration.xml</p>

<p>```</p>

<p>You do need to be signed up for MWS to get some of the keys etc that are required. If not already, go to this page and hit the sign up button.
<a href="https://developer.amazonservices.co.uk/index.html">https://developer.amazonservices.co.uk/index.html</a></p>

<p>Once you have updated the XML configuration you run this command to apply it:
```bash</p>

<p>/opt/amtu/Utilities/configure SETUP /opt/amtu/xml/configuration.xml</p>

<p>```</p>

<p>If you get some error messages at this point, edit the configuration and try again. Once you have the configuration set you can start the daemon.</p>

<p>```bash</p>

<p>/opt/AMTU/Utilities/amtu_daemon start</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic XML to CSV Converter]]></title>
    <link href="http://edmondscommerce.github.io/php/generic-xml-to-csv-converter.html"/>
    <updated>2011-10-12T11:02:59+01:00</updated>
    <id>http://edmondscommerce.github.io/php/generic-xml-to-csv-converter</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>Some times you might have a legacy system that is built around csv or similar and you need to import an XML data source into this system.</p>

<p>Of course one possibility is to build full XML handling capabilities into the system. Perhaps a more sane solution is to simply convert the XML to CSV so that the legacy system does not have to be touched.</p>

<p>This little snippet will generally take an XML file and create a CSV file that should be useable. Of course its impossible to guarantee this for every XML file as its such a widely varied format, however in general this should work.</p>

<p>```php</p>

<p>$xml = simplexml_load_file(&lsquo;feed.xml&rsquo;);
$outstream = fopen(&lsquo;feed.csv&rsquo;,&lsquo;w&rsquo;);
$header=false;
foreach($xml as $k=>$details){</p>

<pre><code>if(!$header){
    fputcsv($outstream,array_keys(get_object_vars($details)));
    $header=true;
}
fputcsv($outstream,get_object_vars($details));
</code></pre>

<p>}
fclose($outstream);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Merchant Centre/Froogle/Google Shopping/Base Changes, Problems and Solutions]]></title>
    <link href="http://edmondscommerce.github.io/ecommerce/google-merchant-centrefrooglegoogle-shoppingbase-changes-problems-and-solutions.html"/>
    <updated>2011-10-11T17:05:20+01:00</updated>
    <id>http://edmondscommerce.github.io/ecommerce/google-merchant-centrefrooglegoogle-shoppingbase-changes-problems-and-solutions</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>So now that everyone uses Google Shopping, Google are making life difficult for the merchants and they all have to jump through hoops.</p>

<p>The current push from Google is enforcing some things that are very difficult for small companies to conform with :&ndash;</p>

<p><strong> * EAN Numbers</strong> &ndash; This is the BIG one, Google are making EAN Numbers required &ndash; for some retailers, they just don&rsquo;t exist, and for a lot of older or cheaper shopping cart systems, they don&rsquo;t have anywhere to enter them.
<strong> * Google Category</strong> &ndash; This is a fairly obvious one, they are attempting to enable shoppers to browse products and find a motherboard for instance with a 1156 socket rather than a CPU that fits an 1156 socket.  The answer is to add an extra field to a site&rsquo;s category system to map site categories to Google categories, or to restructure your products into google&rsquo;s categorisations.
<strong> * Product Images</strong> &ndash; Google are making this mandatory as well, which most people are getting round by using stock or illustration-only images.
<strong> * Availability</strong> &ndash; This one actually helps retailers, putting orderable products that are out of stock in front of customers, and is a small change to most scripts exporting to Google</p>

<p>The above changes are being phased in now but should your feed suddenly stop working, how big is the impact on your business?  Whilst some of the changes are little tweaks, such as the availability flag, others require fairly substantial changes in the back-end of many cart systems.  We are getting many aggrieved businesses contacting us asking for fast turnaround on their Google products feed as they are loosing money all the time that Google are rejecting their products.</p>

<p>What normally (given past changes) has been little tweaks for feeds to be compatible has lately become hours and hours of work both on developers and store-owners.  Are you ready to jump through the latest burning hoop Google is holding out for you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Triggers - A Quick Guide]]></title>
    <link href="http://edmondscommerce.github.io/mysql/mysql-triggers-a-quick-guide.html"/>
    <updated>2011-01-15T12:26:09+00:00</updated>
    <id>http://edmondscommerce.github.io/mysql/mysql-triggers-a-quick-guide</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>MySQL has a nice feature that you may well not have used called Triggers.</p>

<p>These are little SQL statements that are tied to events on table and then perform some extra work.</p>

<p>The idea being that you will check the values for a row and if they meet some conditions you will take some further action. You might usually do this kind of thing in code but if you really must be certain that in a certain circumstance a certain action will be taken, then triggers are a good option because regardless which bit of code makes the change you can be sure your rules will be enforced.</p>

<p>Of course this ties you to a specific DB platform so its not something you should over use. There can also be performance issues so you need to bear that in mind.</p>

<p>Anyway, assuming you know what you are letting yourself in for and have read the <a href="http://www.google.com/search?hl=en&q=site%3Adev.mysql.com+triggers+5.0&aq=f&aqi=&aql=&oq=">documentation</a> here is my little summary.</p>

<p>First you need to give your trigger a name. Choose something descriptive.</p>

<p>Then you need to associate it to an even (UPDATE, INSERT etc) and also decide whether to do it BEFORE or AFTER. If you are not sure, use BEFORE &ndash; it&rsquo;s generally the one you want to use.</p>

<p>```sql</p>

<p>CREATE TRIGGER do_something BEFORE UPDATE ON table
&hellip;</p>

<p>```</p>

<p>The next bit is boiler plate as far as I can gather, just whack it in. It delimits your actual statement and tells it to be run for each updated row.</p>

<p>```sql</p>

<p>  FOR EACH ROW BEGIN</p>

<p>```</p>

<p>Then do your test</p>

<p>```sql</p>

<p>IF ((NEW.column &lt; 1) AND (OLD.column >=1)) THEN</p>

<p>```</p>

<p>Note the NEW and OLD keywords there.</p>

<p>You have a choice of using the NEW and OLD keyword to access existing (OLD) and about to be set (NEW) data for each column.</p>

<p>Note also, this is only possible if you use the BEFORE event as opposed to AFTER, hence generally just sticking to using BEFORE</p>

<p>Now, enforce your requirements
```sql</p>

<p>SET NEW.another_column = 0;
SET NEW.and_another_column = 0;
SET NEW.and_another = &lsquo;cheese&rsquo;;</p>

<p>```</p>

<p>Then wrap it up</p>

<p>```sql</p>

<p> END IF;
END;</p>

<p>```</p>

<p>That&rsquo;s it&hellip;</p>

<p>BUT WAIT</p>

<p>There&rsquo;s another bit that I totally missed which caused me issues &ndash; you need to wrap the whole thing in a delimiter statement:</p>

<p>```sql</p>

<p>delimiter //
&hellip; the statement
END;//
delimiter;</p>

<p>```</p>

<p>So the full final thing should look like this:</p>

<p>```sql</p>

<p>delimiter //
CREATE TRIGGER do_something BEFORE UPDATE ON table
  FOR EACH ROW BEGIN</p>

<pre><code>IF ((NEW.column &lt; 1) AND (OLD.column &gt;=1)) THEN
    SET NEW.another_column = 0;
    SET NEW.and_another_column = 0;
    SET NEW.and_another = 'cheese';
END IF;
</code></pre>

<p>END; //
delimiter;</p>

<p>```</p>

<p>Another point to mention is &ndash; just use the CLI for handling these, don&rsquo;t try to use phpMyAdmin etc &ndash; it doesn&rsquo;t really work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Government Commitment to Opening Up Public Data]]></title>
    <link href="http://edmondscommerce.github.io/misc/government-commitment-to-opening-up-public-data.html"/>
    <updated>2010-06-03T09:29:20+01:00</updated>
    <id>http://edmondscommerce.github.io/misc/government-commitment-to-opening-up-public-data</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>The new Government led by David Cameron has recently made clear its intentions to open up public data as part of the ongoing campaign to make public data public.</p>

<p>You can read the full letter here:
<a href="http://www.number10.gov.uk/news/statements-and-articles/2010/05/letter-to-government-departments-on-opening-up-data-51204"><a href="http://www.number10.gov.uk/news/statements-and-articles/2010/05/letter-to-government-departments-on-opening-up-data-51204">http://www.number10.gov.uk/news/statements-and-articles/2010/05/letter-to-government-departments-on-opening-up-data-51204</a></a></p>
]]></content>
  </entry>
  
</feed>
