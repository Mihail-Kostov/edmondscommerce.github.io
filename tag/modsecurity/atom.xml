<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: modsecurity | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/modsecurity/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-05-07T14:56:57+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compile NGINX with PageSpeed and ModSecurity on CentOS]]></title>
    <link href="http://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos.html"/>
    <updated>2014-11-11T14:06:37+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos</id>
    <content type="html"><![CDATA[<p>ModSecurity is a brilliant addition to web servers to block any nefarious requests before they hit your application.
This improves security and reduces load if your server comes under attack as the requests are killed very quickly.</p>

<p>PageSpeed is a module provided by Google to automatically improve the performance of your web pages in the browser. In a stroke it can offer a much more responsive front end with just a few configuration options.</p>

<p>Nginx is a very fast and lightweight web server ideal for using with back end servers such as PHP-FPM.</p>

<p>Here is a script that will download and compile Nginx with the two modules and also apply the correct ModSecurity configuration.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>echo &ldquo;Please run as root&rdquo;
yum install gcc-c++ pcre-dev pcre-devel zlib-devel make unzip</p>

<p>NPS_VERSION=1.9.32.2;</p>

<p>NGINX_VERSION=1.7.7;</p>

<p>MODSEC_VERSION=2.8.0</p>

<p>NGINX_EXTRA_MODULES=&ldquo; &mdash;with-http_realip_module &mdash;with-http_ssl_module &rdquo;;</p>

<p>NGINX_ADD_MODULES=&lsquo;&rsquo;</p>

<p>WORKING_DIRECTORY=/opt/nginx_with_pagespeed_and_mod_security</p>

<p>mkdir -p $WORKING_DIRECTORY</p>

<h1>echo "</h1>

<p>Mod Security</p>

<p>Installing dependencies, grabbing the repo, checking out the tag for our version and building it
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ldquo;
cd $WORKING_DIRECTORY
yum install libtool httpd-devel libxml2 libxml2-devel
git clone <a href="https://github.com/SpiderLabs/ModSecurity.git">https://github.com/SpiderLabs/ModSecurity.git</a>
cd ModSecurity
git checkout tags/v${MODSEC_VERSION}
./autogen.sh
./configure &mdash;enable-standalone-module &mdash;disable-mlogc
make
make install
NGINX_ADD_MODULES=&rdquo;$NGINX_ADD_MODULES &mdash;add-module=$WORKING_DIRECTORY/ModSecurity/nginx/modsecurity &ldquo;
echo &rdquo;</p>

<h2>Mod Security Config and Rules</h2>

<p>For nginx, we have to get all the config and cat it all into one single config file
&ldquo;
wget <a href="https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended">https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended</a>
cat modsecurity.conf-recommended  > /etc/nginx/modsecurity.conf
wget <a href="https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master">https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master</a> -O owasp-modsecurity-crs.tar.gz
tar -xvzf owasp-modsecurity-crs.tar.gz
CRS_DIR=$(find . -type d -name SpiderLabs-owasp-modsecurity-crs<em>)
cat ${CRS_DIR}/modsecurity_crs_10_setup.conf.example >> /etc/nginx/modsecurity.conf
cat ${CRS_DIR}/base_rules/modsecurity_</em>.conf >> /etc/nginx/modsecurity.conf
for f in $(find $CRS_DIR -type f -name *.data)
do</p>

<pre><code>FILE=$(basename $f)
CMD="cp $f /etc/nginx/$FILE"
echo ${CMD}
${CMD}
</code></pre>

<p>done
cp ModSecurity/unicode.mapping /etc/nginx/unicode.mapping</p>

<h1>echo "</h1>

<h2>Page Speed</h2>

<p>Downlading the pagespeed version and building this
&ldquo;
cd $WORKING_DIRECTORY
wget <a href="https://github.com/pagespeed/ngx_pagespeed/archive/release-$">https://github.com/pagespeed/ngx_pagespeed/archive/release-$</a>{NPS_VERSION}-beta.zip
unzip release-${NPS_VERSION}-beta.zip
cd ngx_pagespeed-release-${NPS_VERSION}-beta/
wget <a href="https://dl.google.com/dl/page-speed/psol/$">https://dl.google.com/dl/page-speed/psol/$</a>{NPS_VERSION}.tar.gz
tar -xzvf ${NPS_VERSION}.tar.gz  # extracts to psol/
NGINX_ADD_MODULES=&rdquo;$NGINX_ADD_MODULES &mdash;add-module=$WORKING_DIRECTORY/ngx_pagespeed-release-${NPS_VERSION}-beta "</p>

<h1>echo "</h1>

<h2>Nginx</h2>

<p>Finally, compiling Nginx with our extra modules and the added modules and installing it
&ldquo;
cd $WORKING_DIRECTORY
wget <a href="http://nginx.org/download/nginx-$">http://nginx.org/download/nginx-$</a>{NGINX_VERSION}.tar.gz
tar -xvzf nginx-${NGINX_VERSION}.tar.gz
cd nginx-${NGINX_VERSION}/
./configure $NGINX_ADD_MODULES $NGINX_EXTRA_MODULES
make
sudo make install</p>

<h1>echo "</h1>

<p>COMPLETED INSTALL &ndash; CHECKING</p>

<p>checking the nginx version now, should be $NGINX_VERSION and you should see our modules
&ldquo;
nginx -V</p>

<p>echo &ldquo;
And now doing a config test&rdquo;
/etc/init.d/nginx configtest</p>

<h1>echo "</h1>

<p>SCRIPT COMPLETED</p>

<p>However, you are not there yet</p>

<p>You need to go and look at the /etc/nginx/modsecurity.conf file and change settings there as appropriate</p>

<p>Also you need to modify your nginx vhost config &ndash; see:
<a href="https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Configuration_Steps">https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Configuration_Steps</a>
&ldquo;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Checkout, 501 Error with Mod Security + Solution]]></title>
    <link href="http://edmondscommerce.github.io/security/google-checkout-501-error-with-mod-security-solution.html"/>
    <updated>2009-03-26T10:48:57+00:00</updated>
    <id>http://edmondscommerce.github.io/security/google-checkout-501-error-with-mod-security-solution</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you are pulling your hair out trying to figure out why you are seeing a 501 error in your Google Checkout integration console I may well have the answer and solution for you.</p>

<p>This is the error message you will see in the integration console.</p>

<p>```</p>

<pre><code>We encountered an error trying to access your server at https://domain.co.uk/googlecheckout/api/ -- the error we got is Sending failed with HTTP response code: 501. Response body was: &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;501 Not Implemented&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;H1&gt;Not Implemented&lt;/H1&gt; The page you are looking for cannot be displayed because a header value in the request does not match certain configuration settings on the Web server.&lt;P&gt; &lt;HR&gt; &lt;ADDRESS&gt; Web Server at domain.co.uk &lt;/ADDRESS&gt; &lt;/BODY&gt; &lt;/HTML&gt; &lt;!-- - Unfortunately, Microsoft has added a clever new - "feature" to Internet Explorer. If the text of - an error's message is "too small", specifically - less than 512 bytes, Internet Explorer returns - its own error message. You can turn that off, - but it's pretty tricky to find switch called - "smart error messages". That means, of course, - that short error messages are censored by default. - IIS always returns error messages that are long - enough to make Internet Explorer happy. The - workaround is pretty simple: pad the error - message with a big comment like this to push it - over the five hundred and twelve bytes minimum. - Of course, that's exactly what you're reading - right now. --&gt; 
</code></pre>

<p>```</p>

<p>The first thing to do is log into your server via SSH and examine the error logs.</p>

<p>find the error logs, open the file up in vi using this command:</p>

<p>```</p>

<p>vi error_log</p>

<p>```</p>

<p>Then go to the bottom of the file using the ```shift
 + [g] shortcut. Then to search backwards in the log use the following command:</p>

<p>[code]
?ModSecurity</p>

<p>```</p>

<p>If you find something with this error message then you have mod security installed. If you search around you may well find an error message like this:</p>

<blockquote>
[Thu Mar 26 10:22:11 2009] [error] [client 94.229.166.12] ModSecurity: Access denied with code 501 (phase 2). Match of "rx (?:^(?:application\\/x-www-form-urlencoded(?:;(?:\\s?charset\\s?=\\s?[\\w\\d\\-]{1,18})?)??$|multipart/form-data;)|text/xml)" against "REQUEST_HEADERS:Content-Type" required. [file "/etc/httpd/modsecurity.d/modsecurity_crs_30_http_policy.conf"] [line "71"] [id "960010"] [msg "Request content type is not allowed by policy"] [severity "WARNING"] [tag "POLICY/ENCODING_NOT_ALLOWED"] [hostname "247electrical.co.uk"] [uri "/googlecheckout/api"] [unique_id "-UMIen8AAAEAAFsDLH4AAAAB"]
</blockquote>


<p>This error message tells us which particular rule is causing it to fail. What we need to do now is either edit this rule or disable it altogether. I will first try to edit it so that the request can get through, but the rule is still active. The rule we need to edit is in this rules file:</p>

<p>modsecurity_crs_30_http_policy.conf</p>

<p>and is on line 71.</p>

<p>I&rsquo;m no mod security expert. Having had a quick look through the documentation I am not sure how to edit this rule to allow Google Checkout callbacks through. So for the time being I am going to disable this particular rule altogether by adding a  # in front of lines 70,71 and 72.</p>

<p>If any mod security experts out there read this blog and know a better solution please do post it in the comments.</p>
]]></content>
  </entry>
  
</feed>
