<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: exception | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/exception/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-04-24T19:57:05+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP Custom Error and Exception Handler - Make PHP Stricter]]></title>
    <link href="http://edmondscommerce.github.io/php/php-custom-error-and-exception-handler-make-php-stricter.html"/>
    <updated>2011-05-12T11:20:58+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-custom-error-and-exception-handler-make-php-stricter</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you prefer a coding style that doesn&rsquo;t let you get away with as much as PHP does by default then you may like this trick.</p>

<p>As standard PHP will let you get away with quite a lot of things that are probably not a good idea. Some times that can be great, allowing you to quickly prototype things or achieve results quickly without having to go through nit picking your code.</p>

<p>However on the other hand if you are working on a production system that you would really rather complained as much as possible in the dev stage to help to minimise the likelihood that bugs will creep through to production then this looseness can work against you.</p>

<p>For this reason I often use this trick to make PHP much more fussy and strict and make errors much more obvious and easier to deal with.</p>

<p>First of all, we need to create a custom error handler. This will override the standard error handling in PHP and allow us to do what we want. What I am going to do is convert all of the standard PHP errors into exceptions.</p>

<p><b>Error Handler</b>
```php</p>

<p>function ec_error_handler($severity, $message, $filename, $lineno) {</p>

<pre><code>if (error_reporting() == 0) {
    return;
}
//if (error_reporting() &amp; $severity) {
throw new ErrorException($message, 0, $severity, $filename, $lineno);
//}
</code></pre>

<p>}</p>

<p>```</p>

<p>You will notice that 2 lines are commented out. If uncommented, this will respect the error reporting settings of PHP. Commented out it throws an exception regardless of PHP error reporting settings.</p>

<p>To make PHP use this function as my error handler we do the following:</p>

<p>```php</p>

<p>set_error_handler(&lsquo;ec_error_handler&rsquo;);</p>

<p>```</p>

<p>So now every PHP error, notice etc is being converted into an exception. This gives me the ability to view stack traces and see exactly which file, line etc is involved so tracking issues down is a snap.</p>

<p>Now though I want a nice system to capture these exceptions and dump this info to the screen.</p>

<p><b>Exception Handler</b>
```php</p>

<p>function ec_exceptions_handler(Exception $e) {</p>

<pre><code>ob_start();
h(1, 'Uncaught Exception');
h(2, $e-&gt;getMessage());
h(3, 'Line ' . $e-&gt;getLine() . ' of ' . $e-&gt;getFile());
foreach ($e-&gt;getTrace() as $t) {
    var_dump($t);
}
dumpObjects();
$exceptionMessage = ob_get_clean();
echo $exceptionMessage;
exit(1);
</code></pre>

<p>}</p>

<p>```</p>

<p>This function starts the output buffer then dumps a large amount of information including the message, line and file for the exception. The full stack trace.</p>

<p>It&rsquo;s also dumping all global objects using another function.</p>

<p>This output is captured into a variable with ob_get_clean(). At this point, you might decide to log this variable to a file, database, ticketing system etc &ndash; I leave that bit to you. Finally the info is dumped to the screen and the program exits.</p>

<p>Of course this is not something you should do in a production environment, this level of information on a production system is a welcome invitation to hackers to exploit you. However in a secure local dev environment its exactly what you need.</p>

<p>To get PHP to use this exception handler, we do the following:</p>

<p>```php</p>

<p>set_exception_handler(&lsquo;ec_exceptions_handler&rsquo;);</p>

<p>```</p>

<p>Here are the other functions you will need:</p>

<p><b>Dump Objects</b>
This one simply var dumps all the objects as they are at the time of the exception. This may be overkill for your situation, I leave that up to you.
```php</p>

<p>function dumpObjects() {</p>

<pre><code>h(1, 'Dumping Objects');
foreach ($GLOBALS as $g) {
    if (is_object($g)) {
        h(2, get_class($g));
        var_dump($g);
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p><b>H Tag Helper</b>
And this is just a html helper to create H tags
```php</p>

<p>function h($n, $m){</p>

<pre><code>echo "&lt;h$n&gt;$m&lt;/h$n&gt;";
flush();
</code></pre>

<p>}</p>

<p>```</p>

<p>I hope you find this useful. Feel free to add any comments etc below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Dataflow Images Not Working + Solution]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-dataflow-images-not-working-solution.html"/>
    <updated>2011-02-17T16:03:49+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-dataflow-images-not-working-solution</id>
    <content type="html"><![CDATA[<p>If you are struggling to understand why Magento is not finding images that are definitely there, the problem may well be that you are not prefixing your image with a slash, i.e for a new image we would put:</p>

<p>/image.jpg</p>

<p>and the image would be in</p>

<p>media/import/image.jpg</p>

<p>Unfortunately whoever wrote the Dataflow product importer though it would be a good idea to silently capture all exceptions on image imports which removes any useful error messages that might occur (such as no image at media/importimage.jpg)</p>

<p>If you would prefer to fix this, you can override Mage_Catalog_Model_Convert_Adapter_Product</p>

<p>Copy the saveRow() method into your overriding class and then change this bit</p>

<p>```php</p>

<p>foreach ($imageData as $file => $fields) {</p>

<pre><code>        try {
            $filepath = Mage::getBaseDir('media') . DS . 'import' . trim($file);
            $product-&gt;addImageToMediaGallery($filepath, $fields);
        } catch (Exception $e) {}
    }
</code></pre>

<p>```</p>

<p>To something like this</p>

<p>```php</p>

<p>foreach ($imageData as $file => $fields) {</p>

<pre><code>        //try {
            $filepath = Mage::getBaseDir('media') . DS . 'import' . trim($file);
            $product-&gt;addImageToMediaGallery($filepath, $fields);
       //} catch (Exception $e) {}
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Detailed Exception Dump - Version 3]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-detailed-exception-dump-version-3.html"/>
    <updated>2011-02-08T13:17:04+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-detailed-exception-dump-version-3</id>
    <content type="html"><![CDATA[<p>Continuing with trying to improve the developer experience with Magento a key element has been my quest for a detailed exception dump that can also handle the various object recursion issues in Magento that can cause all kinds of issues when developing.</p>

<p>Here is my most up to date version of the detailedExceptionDump method.</p>

<p>Its designed to go into a customised version of Mage that you should ONLY use on development environemnts. I will leave the particular usage of this method to you, though it would make sense to also modify the printException method as a starting point.</p>

<script type="text/javascript" src="http://snipt.net/embed/a72f23e55dd732511c71a0d72260ab8b"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Debugging - An Introduction to Magento Exception Logging and Developer Mode]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-debugging-an-introduction-to-magento-exception-logging-and-developer-mode.html"/>
    <updated>2010-11-29T10:18:58+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-debugging-an-introduction-to-magento-exception-logging-and-developer-mode</id>
    <content type="html"><![CDATA[<p>One of the first stumbling blocks newcomers to Magento might find is that when things go wrong, they don&rsquo;t know how to find out what it is that&rsquo;s actually going wrong.</p>

<p>This is because Magento does an excellent job of keeping all of the error information away from people browsing the site. This is without a doubt a very good thing. Error messages can often contain information that would help an attacker compromise your system.</p>

<p>What Magento does instead (if you have it enabled) is to log all error information to log files which you can then access via FTP etc to view the error information. This is in much the same way as a well configured web server will not display error information generated by PHP itself but will instead display the &ldquo;white screen of death&rdquo; and log the error information to a file.</p>

<p>Magento exceptions can range from minor notices to major issues but not fatal errors. If PHP has a fatal error then this will be handled by PHP itself.</p>

<h2>Magento Exception Logging</h2>


<p>If you are experiencing errors with Magento, the first thing you need to do is to make sure exception logging is enabled.</p>

<p>In the admin go to:</p>

<p>System->Configuration > Developer > Log Settings > Enabled = Yes</p>

<p>You can also set custom locations for your error log files, though the defaults are normally fine. Make sure the folder is writeable.</p>

<p>Now if you are having errors, you can look in var/log at the exception.log and/or system.log files that have been generated.</p>

<h2>Magento Developer Mode</h2>


<p>If you are developing locally and you would like to make Magento dump error information to screen instead of logging to a file, this is very easy to do. You simply need to set the site to run in Developer Mode.</p>

<p>The most secure way to do this (in the sense that you won&rsquo;t accidently set your live store in Developer Mode) is to edit your local apache configuration and add this line:</p>

<p>```</p>

<p>SetEnv MAGE_IS_DEVELOPER_MODE &ldquo;true&rdquo;</p>

<p>```</p>

<p>You need to set this up in the directory you are running Magento, for example:
```</p>

<p><Directory "/opt/lampp/htdocs"></p>

<pre><code>#
# Possible values for the Options directive are "None", "All",
# or any combination of:
#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
#
# Note that "MultiViews" must be named *explicitly* --- "Options All"
# doesn't give it to you.
#
# The Options directive is both complicated and important.  Please see
# http://httpd.apache.org/docs/2.2/mod/core.html#options
# for more information.
#
#Options Indexes FollowSymLinks
# XAMPP
Options Indexes FollowSymLinks ExecCGI Includes
    SetEnv MAGE_IS_DEVELOPER_MODE "true"
</code></pre>

<p>```</p>

<p>Now any Magento site you run from within that folder (or any sub folder) will be running in Developer Mode when you are working locally, but will still be in the much more secure normal mode on the live server, without you having to edit any files within Magento itself.</p>

<p>If you prefer, you can add this line to your .htaccess file, or you can edit the index.php file to force Developer Mode however with either of these approaches there is always the risk you will accidently upload this file and set your live store into Developer Mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Enable Exception Logging]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-enable-exception-logging.html"/>
    <updated>2010-11-15T14:55:19+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-enable-exception-logging</id>
    <content type="html"><![CDATA[<p>Magento has some great exception logging functionality which is invaluable when trying to figure out why things aren&rsquo;t working.</p>

<p>However, like a lot of settings in Magento, its tucked away in the configuration and its not always easy to remember how to enable it.</p>

<p>So here it is:</p>

<p>System->Configuration->Developer->Log Settings</p>

<p>Once its enabled, the log files will be created in /var/logs/</p>
]]></content>
  </entry>
  
</feed>
