<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: header | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/header/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-10-16T11:28:49+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento Warning: Header may not contain more than a single header, new line detected + Solution]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-warning-header-may-not-contain-more-than-a-single-header-new-line-detected-solution.html"/>
    <updated>2012-10-30T14:08:10+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-warning-header-may-not-contain-more-than-a-single-header-new-line-detected-solution</id>
    <content type="html"><![CDATA[<p>If you are puzzled by the error message:</p>

<p><code>
Warning: Header may not contain more than a single header, new line detected
</code>
When dealing with a Magento migration, you might want to double check you have not accidentally added a new line character to the end of your base_url field when you were updating the core_config_data table.</p>

<p>I just did this using phpMyadmin&rsquo;s nifty ajax editing feature however I must have hit return by accident. Simply editing them again and making sure there is absolutely no white space at the end of the URL and the problem is solved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Controller Action Return Json (for AJAX, API etc)]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc.html"/>
    <updated>2012-02-15T14:15:01+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc</id>
    <content type="html"><![CDATA[<p>If you have a controller action that is designed to be accessed by AJAX requests or perhaps as part of a custom API system then you might like this snippet.</p>

<p>If you are working with the above scenario you likely would like to return pure JSON without any HTML etc. Also serving up the correct content type headers is going to be helpful, its not HTML, its JSON.</p>

<p>```php</p>

<pre><code>public function searchAction(){
    $query = $this-&gt;getRequest()-&gt;getParam('query');
    $json = Mage::getModel('mymodule/mymodel')-&gt;getSearchJson($query);
    $this-&gt;getResponse()-&gt;setHeader('Content-type', 'application/json');
    $this-&gt;getResponse()-&gt;setBody($json);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Force Download with Custom Filename]]></title>
    <link href="http://edmondscommerce.github.io/php/php-force-download-with-custom-filename.html"/>
    <updated>2012-01-23T15:22:03+00:00</updated>
    <id>http://edmondscommerce.github.io/php/php-force-download-with-custom-filename</id>
    <content type="html"><![CDATA[<p>If you want to serve up text files for download (perhaps product feeds etc) then you might like this little snippet.</p>

<p>Not only will it force the file to be downloaded but it allows you to specify a custom filename that it should be saved as.</p>

<p>```php</p>

<p>if(isset($_GET[&lsquo;download_file&rsquo;])){</p>

<pre><code>header("Content-type: application/octet-stream");
header("Content-Disposition: attachment; filename=Export.txt");
readfile('Export.txt');
die;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
