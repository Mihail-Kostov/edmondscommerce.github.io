<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Cascading Style Sheets | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/cascading-style-sheets/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-12-10T17:28:33+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending a Modules CSS within a Theme in PrestaShop]]></title>
    <link href="http://edmondscommerce.github.io/prestashop/extending-a-modules-css-within-a-theme-in-prestashop.html"/>
    <updated>2012-11-28T17:26:39+00:00</updated>
    <id>http://edmondscommerce.github.io/prestashop/extending-a-modules-css-within-a-theme-in-prestashop</id>
    <content type="html"><![CDATA[<p>PrestaShop has a really nice structure for handling all the CSS that will appear in a site. It starts by splitting the CSS so that the CSS is split up per modules. There is a global CSS sheet but this should only be used for things that genuinely appear on all pages.</p>

<p>Extending the CSS of a module in PrestaShop is easy. All you need to do is create a CSS file that matches the naming convention of the module you are looking to extend.</p>

<p>For example if you wanted to change the CSS of the “Wishlist block” module (a.k.a. blockwishlist) in your theme, you would create the file themes/mytheme/css/modules/blockwishlist/blockwishlist.css. This file will then be included on every page that the CSS from the blockwishlist module appears on.</p>

<p>This system is good because it minimises the amount of CSS the browser has to load and also splits the concern of CSS into separate files making it much easier to manage. It also makes adding to a modules CSS with in a theme much easier.</p>

<p>One problem with this method of handling CSS is that by default a PrestaShop site may want the browser to download ten or more individual CSS files which is quite a overhead. Fortunately since PrestaShop 1.4 it has supported CCS merging (referred to as CCC in the admin) which causes the CSS for a page to be merged into a single file on the server to prevent the client having to download tens of CSS files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Copy CSS Selector in chrome]]></title>
    <link href="http://edmondscommerce.github.io/chrome/tip-copy-css-selector-in-chrome.html"/>
    <updated>2012-03-29T16:14:21+01:00</updated>
    <id>http://edmondscommerce.github.io/chrome/tip-copy-css-selector-in-chrome</id>
    <content type="html"><![CDATA[<p>Okay, this is hacky but it really works, and saves a lot of time!</p>

<p>To copy the css selector of an element in chrome, you need your developer tools open popped-out of chrome, not docked but here is the trick :&ndash;</p>

<p>Inspect the element that you want, be sure it&rsquo;s selected in developer tools, then press F12.  This will open a second developer tools window inspecting the first developer tools.</p>

<p>Then, insert the following two lines of javascript magic, one at a time &ndash; the first pulls jQuery into the developer tools and the second runs a function to build the css path and output it into the console!</p>

<p>First jQuery :
<code>
var script = document.createElement('script');script.src = "https://ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js";document.getElementsByTagName('head')[0].appendChild(script);
</code>
Then the path :
<code>
path=""; function addtopath(str) { if(typeof(str) != 'undefined') {path = str+' '+path} } jQuery('.crumbs span').each(function(){addtopath(jQuery(this).attr('title'))}); path;
</code></p>

<p>You can try stringing them together into one command, but sometimes jQuery doesn&rsquo;t seem to load fast enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restore lessc -w functionality, extendable to anything that needs to watch a file.]]></title>
    <link href="http://edmondscommerce.github.io/linux/restore-lessc-w-functionality-extendable-to-anything-that-needs-to-watch-a-file.html"/>
    <updated>2012-03-02T12:25:46+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/restore-lessc-w-functionality-extendable-to-anything-that-needs-to-watch-a-file</id>
    <content type="html"><![CDATA[<p>The latest version of the less compiler in ruby has reduced the functionality of watching a file, so we wrote this little script (which we put in ~/bin/lessc-w) to restore the old functionality :</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>LESSFILE=$1
CSSFILE=<code>basename $1 .less</code>.css</p>

<p>if [ &ldquo;$2&rdquo; != &ldquo;-f&rdquo; ]; then</p>

<pre><code>if [ "`file -b $LESSFILE`" != "ASCII text" ]; then
    echo "file $1 doesn't look like a less file...., looks like a `file -b $LESSFILE`";
    echo "usage: lessc-w lessfile.less [-f]";
    exit
fi
</code></pre>

<p>fi</p>

<p>while true; do</p>

<pre><code>inotifywait -e modify $LESSFILE &amp;&amp; \
echo "Rebuilding styles" &amp;&amp; \
lessc $LESSFILE &gt; $CSSFILE
</code></pre>

<p>done</p>

<p>```</p>

<p>As you can see it&rsquo;s very simple to tweak this to any program that needs to be run when a file is changed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rapid CSS Development in Chrome]]></title>
    <link href="http://edmondscommerce.github.io/Cascading%20Style%20Sheets/rapid-css-development-in-chrome.html"/>
    <updated>2012-02-23T14:28:37+00:00</updated>
    <id>http://edmondscommerce.github.io/Cascading%20Style%20Sheets/rapid-css-development-in-chrome</id>
    <content type="html"><![CDATA[<p>I do a lot front end development with Magento, and one of the biggest time sinks for this is waiting for a page to load when you want to change a line of CSS.</p>

<p>Whilst you can use Firebug / Chrome to edit CSS rules on the page, you still need check that the file is saved correctly. As this is Magento, this can take some time due to caching being disabled.</p>

<p>Thankfully there is an extension for Chrome which will just reload you CSS files and not the entire page. You can install it <a href="https://chrome.google.com/webstore/detail/dnfpcpfijpdhabaoieccoclghgplmpbd">here</a> and save a lot of time during development!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a scrollable menu with an onHover effect]]></title>
    <link href="http://edmondscommerce.github.io/jquery/create-a-scrollable-menu-with-an-onhover-effect.html"/>
    <updated>2012-01-31T14:51:37+00:00</updated>
    <id>http://edmondscommerce.github.io/jquery/create-a-scrollable-menu-with-an-onhover-effect</id>
    <content type="html"><![CDATA[<p>I was recently asked by a client to create a scrollable, navigation menu for their site. However, they wanted it to have an onHover submenu that expanded to the side, over the top of the scrollbar.</p>

<p>The problem with this is that there is noway to do this using normal css, over the overflow:scroll hides the sub menu. If you put the submenus into a different div outside the scrollable area, then you can run into problems with the onHover thinking you&rsquo;ve left the target.</p>

<p>To get round this I put together the following jQuery, HTML and CSS, which I hope will help someone.</p>

<p>```html</p>

<div class="categories">
    <ul>
        <li class="level0 first parent">
            <a href="path/to/link">
            <p>First Item</p>
            </a>
            <ul style="display:none">
                <li class="level1 first parent">
                    <a href="path/to/link">
                        <p>sublevel-1</p>
                    </a>
                    <ul style="display:none">
                        <li class="level2 first">
                            <a href="path/to/link">
                                <p>sub-sublevel1</p>
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
        <li class="level0">
            <a href="path/to/link">
                <p>Second Item</p>
            </a>
        </li>
    </ul>
    <div id="hoverMenu" style="display: none; ">
        <div id="subHoverMenu" style="display: none; "></div>
    </div>
</div>


<p>```</p>

<p>```css</p>

<p>.categories{background:white;height:310px;overflow:scroll;overflow-x:hidden;}
.categories .active{background:red;}
.categories ul{padding:9px 10px 0 10px;}
.categories ul li a{color:black;height:21px;line-height:21px;}
.categories ul li a p{font-size:13px;padding:0 0 0 0;margin:0 0 0 0;white-space:nowrap;}
.categories #hoverMenu{background:white;height:auto;position:absolute;width:auto;z-index:150;}
.categories #hoverMenu .active{background:red;}
.categories #hoverMenu li{padding:5px 10px 5px 20px;}
.categories #hoverMenu p{color:black;font-size:13px;white-space:nowrap;}
.categories #hoverMenu #subHoverMenu{background:white;width:auto;height:auto;position:absolute;z-index:150;}
.categories #hoverMenu #subHoverMenu .active{background:red;}</p>

<p>```</p>

<p>```javascript</p>

<pre><code>jQuery(document).ready(function() {
    jQuery(".categories li.level0").mouseenter(function() {
        jQuery(this).siblings().removeClass('active');
        jQuery(this).addClass('active');
        if(jQuery(this).hasClass('parent')) {
            jQuery('#hoverMenu ul').remove();
            var pos = jQuery(this).position(); 
            var mouseX = pos.left + 175;
            var mouseY = pos.top; 
            var subMenu=jQuery(this).children('ul:first')
            subMenu.clone(true, true).show().appendTo('#hoverMenu');
            jQuery('#hoverMenu').css({'top':mouseY,'left':mouseX});
            jQuery('#hoverMenu').show();
        } else {
            jQuery('#hoverMenu ul').remove();
            jQuery('#hoverMenu').hide();
        }
    })

    jQuery(".categories li.level1").bind('mouseenter', function() {
        jQuery(this).siblings().removeClass('active');
        jQuery(this).addClass('active');
        if(jQuery(this).children('ul').length) {
            jQuery('#subHoverMenu').empty();
            var subPos = jQuery(this).position();
            var subMouseX = jQuery(this).outerWidth();
            var subMouseY = subPos.top; 
            var subSubMenu=jQuery(this).children('ul:first')
            subSubMenu.clone(true, true).show().appendTo('#subHoverMenu');
            jQuery('#subHoverMenu').css({'top':subMouseY,'left':subMouseX});
            jQuery('#subHoverMenu').show();
        } else {
            jQuery('#subHoverMenu').empty().hide();
        }
    })

    jQuery(".categories li.level2").bind('mouseenter', function() {
        jQuery(this).siblings().removeClass('active');
        jQuery(this).addClass('active');
    })

    jQuery('#hoverMenu').mouseleave(function(){
        jQuery('#hoverMenu ul').remove();
        jQuery('#hovermenu').hide();
        jQuery('#subHoverMenu').empty().hide();
    })

    jQuery('#subHoverMenu').mouseleave(function(){
        jQuery(this).empty().hide();
    })

    jQuery('.categories').mouseleave(function() {
        jQuery('#hoverMenu ul').remove();
        jQuery('#hoverMenu').hide();
        jQuery('#subHoverMenu').empty().hide();
        jQuery(".col-left .category-list .categories li").removeClass('active');
    })
})
</code></pre>

<p>```</p>

<p>Obviously, change styles and content as required</p>
]]></content>
  </entry>
  
</feed>
