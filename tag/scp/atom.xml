<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: scp | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/scp/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-10-03T12:36:28+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rsync For Beginners]]></title>
    <link href="http://edmondscommerce.github.io/linux/rsync-for-beginners-2.html"/>
    <updated>2012-11-05T16:42:47+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/rsync-for-beginners-2</id>
    <content type="html"><![CDATA[<h3>What is Rsync in general ?</h3>


<p>Rsync works like the <a href="http://linux.about.com/od/commands/l/blcmdl1_rcp.htm" rel="nofollow">rcp</a> command in linux. It is used to copy files across machines. It uses efficient checksum algorithm that looks for modified files by time and size. It is used for two purposes:</p>

<h2>Backup</h2>


<p>Rsync is used to transfer file from the local to a remote machine. By default Rsync will use rsh, however you can instead use <a href="http://linux.about.com/od/commands/l/blcmdl1_ssh.htm" rel="nofollow">ssh</a> for high security. Compressed files are transferred to save file transfer time and reduce the load on the network. It helps to transfer bulk files in minutes.</p>

<h2>Mirroring</h2>


<p>Rsync can synchronize file between two servers location(i.e) local and remote. By using the checksum algorithm it updates local files only if it is updated in remote server.</p>

<h3>How to use Rsync</h3>


<p>
```php</p>

<p>rsync -avze ssh -p2020 root@server.com:/sitepath/files   /localdata</p>

<p>```
This command transfer files from remote server to local machine.</p>

<p>a  Archive. It is denotes all related files and documents.
v  Verbose.It will display status message as it is processing.
z  Compression.It achives better compression ratio.
e  It allows to chose alternative remote shell program for communication.</p>

<p>```php</p>

<p>rsync -avze ssh -p2020 &mdash;exclude home/var/cache root@server.com:/sitepath/files /localdata</p>

<p>```</p>

<p>This command will transfer files from remote server to local machine by excluding cache folder.</p>

<p>```php</p>

<p>rsync -avz /sitepath/files root@server.com:/localdata</p>

<p>```
This command will  transfer all file from local to remote server. It is uses default remote shell protocol.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Server Migration Using SSH + SCP]]></title>
    <link href="http://edmondscommerce.github.io/hosting/basic-server-migration-using-ssh-scp.html"/>
    <updated>2009-04-23T13:50:57+01:00</updated>
    <id>http://edmondscommerce.github.io/hosting/basic-server-migration-using-ssh-scp</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>The scenario here is that you have access to two servers &ndash; old and new &ndash; and you want to copy a site + database from old server to new server directly.</p>

<p>You have root SSH access to both servers.</p>

<p><strong>1. Create  a TAR archive of the document root for the site on the old server.</strong>
Log into SSH on the old server.</p>

<p>Navigate to your vhost root (the folder just above httpdocs) then use the following command to make a tar archive of your entire httpdocs folder:
```</p>

<p>tar -cvvf httpdocs.tar httpdocs/</p>

<p>```</p>

<p><strong>2. Gzip the TAR archive</strong>
<code>
 gzip httpdocs.tar
</code></p>

<p><strong>3. Transer the File to the New Server</strong>
Log into SSH on the new server</p>

<p>This bit may change according to your specific server setups. The way I approached this was to log into the new server  at the vhost root where I want to import the old httpdocs folder. I then use the following SCP command to log into the old server, find my archive and copy it to the current location.</p>

<p>I am using a custom port (not the real one in the example of course) for SSH so that must be specified. Unlike SSH, you must use a capital P to specify a custom port</p>

<p><em><strong>Note the space and full stop at the end &ndash; they are very important!</strong></em></p>

<p>```</p>

<p>scp -P 1111 old_server_username@123.123.123.123:/path/to/file/on/old/server/archive.tar.gz .</p>

<p>```</p>

<p><strong>4. Dump all DB&rsquo;s and Transfer</strong>
To dump all of the databases into one single file we can use the following mysqldump syntax. Note you can simply use the &mdash;all-databases switch but this will backup database that you probably don&rsquo;t want to include. Better to declare a list of all the DB&rsquo;s that you do want.
```</p>

<p>mysqldump -u SomeUser -p &mdash;databases mydb1 mydb2 mydb3 > myDbs.sql</p>

<p>```</p>

<p>Once you have this dump file you can Gzip it and transfer it via SCP using the same kind of commands as above.</p>
]]></content>
  </entry>
  
</feed>
