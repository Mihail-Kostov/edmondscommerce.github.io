<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: phpstorm | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/phpstorm/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-11-28T13:35:12+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Convert Array to Object Syntax]]></title>
    <link href="http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax.html"/>
    <updated>2013-08-27T14:40:35+01:00</updated>
    <id>http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax</id>
    <content type="html"><![CDATA[<p>If you are converting some code from using array syntax to object property syntax then you might like this little snippet of regex.</p>

<p>This is design to paste straight into the find/replace dialogue in PHPStorm</p>

<p>Find:
```</p>

<p>\$(\w+)[&lsquo;([^&rsquo;]+)&lsquo;]</p>

<p>```</p>

<p>Replace:
```</p>

<p>\\$$1->$2</p>

<p>```</p>

<p>And that is it</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magicento has a super quick way to enable Template Path Hints in Magento]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/magicento/magicento-has-a-super-quick-way-to-enable-template-path-hints-in-magento.html"/>
    <updated>2013-05-17T13:58:20+01:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/magicento/magicento-has-a-super-quick-way-to-enable-template-path-hints-in-magento</id>
    <content type="html"><![CDATA[<p>Magento&rsquo;s Template Path Hints feature can be super handy for working out which templates are in use, but <em>logging into the Admin, navigating to System, Configuration, Developer, Debug, Change Store Scope, Change to Yes, Press Save, Reload</em> is an arduous process. So much so that often it&rsquo;s easier to just suss it out from the folder structure.</p>

<p>No more! Magicento has an entry in its menu to enable these at the click of a menu item.</p>

<p><img src="/assets/MagicentoMenu.png"></p>

<p>There&rsquo;s a couple of settings which need to be enabled (see below) but once set up, it works great.</p>

<p><img src="/assets/MagicentoSettings-600x317.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Implementation of Jewellery Site (White Label)]]></title>
    <link href="http://edmondscommerce.github.io/featured/magento-implementation-of-jewellery-site-white-label.html"/>
    <updated>2013-02-20T20:19:01+00:00</updated>
    <id>http://edmondscommerce.github.io/featured/magento-implementation-of-jewellery-site-white-label</id>
    <content type="html"><![CDATA[<p>As part of our white label service we provided the development and design implementation requirements for a large London agency to deliver a high quality Magento site on budget and time.</p>

<p>The site required some customised functionality along with a full bespoke design implementation.</p>

<p><img src="/assets/screenshot-thumb1.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Replace "Malformed Replacement String"]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html"/>
    <updated>2013-01-24T17:39:08+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string</id>
    <content type="html"><![CDATA[<p>If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.</p>

<p>The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.</p>

<p>Take the following example code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$input-&gt;name]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$textarea-&gt;name]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>And trying to replace the key being used in the data array with a processed one calling a method $this->dataName($key) to generate the following code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$this-&gt;dataName($textarea-&gt;name)]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>You might try the find pattern:</p>

<p>```</p>

<p>\$data[\$([^&ndash;]+)&ndash;>name]</p>

<p>```</p>

<p>And the replace pattern:
```</p>

<p>\$data[\$this->dataName(\$$1->name)]</p>

<p>```</p>

<p>However this will give you the dreaded <b>&ldquo;malformed replacement string&rdquo;</b> Error</p>

<p>The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:</p>

<p>```</p>

<p>\\$data[\\$this->dataName(\\$$1->name)]</p>

<p>```</p>

<p>And it works, woot!</p>

<p>Also when it does work, PHP Storms replacement preview feature is really quite nice</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm: Get More Info on Auto-Complete (like netbeans)]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-get-more-info-on-auto-complete-like-netbeans.html"/>
    <updated>2012-12-13T17:00:20+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-get-more-info-on-auto-complete-like-netbeans</id>
    <content type="html"><![CDATA[<p>All developers love code completion, but sometimes the minimalist info that can come up in PHPStorm can be not quite enough.</p>

<p>Netbeans gave an excerpt that gave plenty of information from the docblock, and PHPStorm can do too, it just defaults to off.</p>

<p>The setting is under Editor->Code Completion and is &ldquo;Show full signatures&rdquo;.  The good news is it is an &ldquo;IDE Setting&rdquo; so it persists for all projects, the bad news is that that means the setting will be forgotten about before you next reinstall and want it again.</p>
]]></content>
  </entry>
  
</feed>
