<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: soap | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/soap/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-09-25T15:37:55+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP SOAP Client Basic Template]]></title>
    <link href="http://edmondscommerce.github.io/php/php-soap-client-basic-template.html"/>
    <updated>2013-07-08T08:28:17+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-soap-client-basic-template</id>
    <content type="html"><![CDATA[<p>Often when integrating with SOAP services I find myself doing the same old moves. I have a deep suspicion of API&rsquo;s written by others. They always tend to be in ASP.net, have error message pages that have default messages and generally be really badly documented and coded. Maybe I&rsquo;m just unlucky?</p>

<p>In my experience decent API&rsquo;s don&rsquo;t use SOAP.</p>

<p>Anyway if I do have to use SOAP, starting out with this class as a template to get the ball rolling with some useful debugging methods (so you can email the API owners and show them that their API doesn&rsquo;t work), I&rsquo;ve blogged it for my own archive and retrieval reasons but if it helps anyone else out then that is great!</p>

<p>```php</p>

<p>&lt;?php
/<em>*
 * Class Template Soap Client Consuming Class
 </em>/</p>

<p>class EdmondsCommerceSoap
{</p>

<pre><code>protected $username = 'edmondscommerce';

protected $pass = 'NotReallyMyPassw0rd';


public function test($wsdl)
{
    $options["connection_timeout"] = 25;
    $options["location"] = $wsdl; 
    $options['trace'] = 1; //this is important if you want to be able to use the soapDebug method
    try {
        $client = new SoapClient($wsdl, $options);
        $client = $this-&gt;setAuthHeader($client);
        $client-&gt;Method();
    } catch (SoapFault $e) {
        echo '&lt;h1&gt;SoapFault: ' . $e-&gt;getMessage() . '&lt;/h1&gt;';
        echo '&lt;pre&gt;' . $e-&gt;getTraceAsString() . '&lt;/pre&gt;';
    }
    echo '&lt;h2&gt;Debug Info:&lt;/h2&gt;';
    var_dump($this-&gt;soapDebug($client));
}

/**
* This method is only a template, will change depending on the service you are using but its a good starting point demonstrating how to set headers
**/
protected function setAuthHeader(SoapClient $client)
{
    $auth = array(
        'username' =&gt; $this-&gt;username,
        'MessageId' =&gt; md5(time()),
        'password' =&gt; $this-&gt;password
    );
    foreach($auth as $k=&gt;$v){
        $headers[] = new SoapHeader('Header', $k, $v, false);
    }
    $client-&gt;__setSoapHeaders($headers);
    return $client;
}

/**
 *  This method gathers all debug info into a handy array ready for var_dump, log etc etc
 **/
protected function soapDebug(SoapClient $client)
{
    $debug = array();
    $debug['request']['headers'] = $client-&gt;__getLastRequestHeaders();
    $debug['request']['body'] = $client-&gt;__getLastRequest();
    $debug['request']['body_formatted'] = $this-&gt;formatXmlString($client-&gt;__getLastRequest());
    $debug['response']['headers'] = $client-&gt;__getLastResponseHeaders();
    $debug['response']['body'] = $client-&gt;__getLastResponse();
    $debug['response']['body_formatted'] = $this-&gt;formatXmlString($client-&gt;__getLastResponse());
    return $debug;
}


/**
 * This method is purely to assist the debug method and simply makes generated XML readable
 **/
protected function formatXmlString($xml)
{
    $xml = preg_replace('/(&gt;)(&lt;)(\/*)/', "$1\n$2$3", $xml);
    $token = strtok($xml, "\n");
    $result = '';
    $pad = 0;
    $matches = array();
    while ($token !== false) :
        if (preg_match('/.+&lt;\/\w[^&gt;]*&gt;$/', $token, $matches)) :
            $indent = 0; elseif (preg_match('/^&lt;\/\w/', $token, $matches)) :
            $pad--;
            $indent = 0; elseif (preg_match('/^&lt;\w[^&gt;]*[^\/]&gt;.*$/', $token, $matches)) :
            $indent = 1; else :
            $indent = 0;
        endif;
        $line = str_pad($token, strlen($token) + $pad, ' ', STR_PAD_LEFT);
        $result .= $line . "\n";
        $token = strtok("\n");
        $pad += $indent;
    endwhile;
    return $result;
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
