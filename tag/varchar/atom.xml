<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: varchar | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/varchar/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-11-10T11:40:03+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento Inline Translate Not Working + Solution]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-inline-translate-not-working-solution.html"/>
    <updated>2012-05-04T09:04:03+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-inline-translate-not-working-solution</id>
    <content type="html"><![CDATA[<p>If you are puzzled as to why inline translate in Magento is not saving a particular translation, this could be your issue.</p>

<p>Inline translate uses the table core_translation to store the translations.</p>

<p>The fields that store the data are set to VARCHAR(255) fields.</p>

<p>If your source string is longer than 255 characters, it will fail silently to save the translation.</p>

<p>The simplest solution is to shorten the source string and stick to using inline translate on strings that are shorter than 255 characters.</p>

<p>You could alternatively modify the table but we prefer not to do that kind of thing unless we really have to.</p>

<p>Another workaround for text sections that need to be long is to simply use a static block instead.</p>
]]></content>
  </entry>
  
</feed>
