<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: cache | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/cache/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-05T12:25:08+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento Block Caching Cache Key Helper Method - Generate Safe Unique Cache Keys]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys.html"/>
    <updated>2012-12-04T12:21:44+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys</id>
    <content type="html"><![CDATA[<p>If you do any work at all on Magento performance optimisation with a view to making pages load faster then you must have come across block caching. To understand block caching you need to first of all understand that a Magento page is actually made up of a lot of nested chunks called blocks.</p>

<p>Blocks can have their HTML generated dynamically every time though it is also possible to make Magento cache the block HTML output so that it loads a LOT faster, especially with heavy and slow blocks such as best sellers etc.</p>

<p>When setting up block caching, you need to specify a cache key. If your cache key is not unique enough then there is a risk that you will display the wrong cache for a particular scenario.</p>

<p>For this reason I created a block caching helper with this method that can generate a very unique cache key based on the current block usage.
/app/code/local/EdmondsCommerce/Helper/Data.php
```php</p>

<p>/**</p>

<pre><code> * Generate a nice unique block cache key
 *
 * @param Mage_Core_Block_Abstract $block
 * @return string
 */
public function ecCacheKey(Mage_Core_Block_Abstract $block){
    $class = get_class($block);
    $template = $block-&gt;getTemplateFile();
    $md5 = md5(var_export($block-&gt;getData(), true));
    $params = trim(implode(",", $block-&gt;getRequest()-&gt;getParams()), ',');
    $category=($block-&gt;getCurrentCategory())?$block-&gt;getCurrentCategory()-&gt;getName():'no-category';
    $store_id = Mage::app()-&gt;getStore()-&gt;getId();
    return 'edmondscommerce-'. $params . '-'. $category . '-' . $store_id . '-' . $class.'-'.$template.'-'.$md5;
}
</code></pre>

<p>```</p>

<p>You would use this in the following way:</p>

<p>In a block class, set up the following:
```php</p>

<pre><code>public function _construct(){
    parent::_construct();
    $this-&gt;addData(array(
        'cache_lifetime' =&gt; 999999999,
        'cache_tags' =&gt; array(Mage_Catalog_Model_Product::CACHE_TAG, Mage_Catalog_Model_Category::CACHE_TAG),
        'cache_key' =&gt; Mage::helper('blockcaching')-&gt;ecCacheKey($this)
    ));

}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Profiler Improved - Aoe_Profiler by Fabrizio Branca]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca.html"/>
    <updated>2012-08-17T15:31:32+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-profiler-improved-aoe_profiler-by-fabrizio-branca</id>
    <content type="html"><![CDATA[<p>The Magento profiler is useful when you are trying to discover what potential bottlenecks are in place in a specific Magento implementation that are slowing down the performance of the site. Often when doing this kind of analysis you might find that a particular block or extension is responsible for more than 70% of the total page load time. At this point you would choose to either optimise, cache or disable the block altogether to remove this performance bottleneck and improve page speed significantly.</p>

<p>If you have ever tried to use Magento&rsquo;s built in profiler you will no doubt agree with Fabrizio&rsquo;s comments that, when you have it working, the output is hard to read and not really very useful in terms of seeing what is actually going on.</p>

<p>To aid with this process and give us a nice colourful and friendly user interface to the Magento profiler, Fabrizio has built a Magento module that extends the default profiler and makes it a much more useful tool.</p>

<p>You can download the extension from <a href="https://github.com/fbrnc/Aoe_Profiler" title="Magento Aoe Profiler on Git Hub" target="_blank">git hub here</a>.</p>

<p>Read the full blog story <a href="http://www.fabrizio-branca.de/magento-profiler.html" title="Fabrizio Branch blog" target="_blank">here</a>.</p>

<p>If you would like some help optimising the performance of your Magento store, feel free to get in touch with Edmonds Commerce today and we can assist in getting the very best performance from your Magento web site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Flush Everything Cache, Index, Images, JS, CSS in One Go]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-flush-everything-cache-index-images-js-css-in-one-go.html"/>
    <updated>2012-03-03T16:26:59+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-flush-everything-cache-index-images-js-css-in-one-go</id>
    <content type="html"><![CDATA[<p>If you are developing a Magento store and you would like a method you can call to completely clear everything out that might be cached or indexed etc then you will like this little snippet:</p>

<p>```php</p>

<p>public function flushEverything() {</p>

<pre><code>    Mage::app()-&gt;getCacheInstance()-&gt;flush();
    Mage::getModel('core/design_package')-&gt;cleanMergedJsCss();
    Mage::getModel('catalog/product_image')-&gt;clearCache();
    $indexer    = Mage::getSingleton('index/indexer');
    /* @var $indexer Mage_Index_Model_Indexer */
    foreach($indexer-&gt;getProcessesCollection() as $process){
          $process-&gt;reindexEverything();
    }  
}
</code></pre>

<p>```</p>

<p>This flushes the cache storage, removes merged JS/CSS files, flushes the product image cache then loops through each index and reindexes.</p>

<p>Perhaps overkill but sometimes there&rsquo;s nothing like the use of excessive force!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Merged CSS Clear Not Working + Solution]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-merged-css-clear-not-working-solution.html"/>
    <updated>2011-11-18T18:42:27+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-merged-css-clear-not-working-solution</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>If you are having an issue with Magento and the optional Merge CSS Files (beta) turned on and it not updating with recent CSS changes, you may appreciate this.</p>

<p>Unlike other cached elements that are stored in var/cache, Magento stores the cached and minified CSS files in media/css</p>

<p>If you simply delete the contents of this folder, your CSS changes should kick in as Magento is forced to rebuild these files.</p>

<p>There is an option in cache management to flush CSS storage but for some reason this wasn&rsquo;t working for me. Could be a permissions issue or something else I am not sure, we simply needed to get this change implemented (emergency live site fix) so flushing this folder manually did the trick.</p>

<p>Hope it helps someone else looking for Magento merged CSS clear not working, Magento CSS cache, Magento CSS Files beta</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP DomPDF Bug - page_cache.cls.php on line 66 dompdf + Solution]]></title>
    <link href="http://edmondscommerce.github.io/php/php-dompdf-bug-page_cache-cls-php-on-line-66-dompdf-solution.html"/>
    <updated>2011-06-24T15:29:39+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-dompdf-bug-page_cache-cls-php-on-line-66-dompdf-solution</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>If you are struggling with a weird bug with DomPDF, something about it trying to connect to a postgres database..</p>

<p>well here is the solution that will get you up and running:</p>

<p>open the file and make the init method just return false</p>

<p>```php</p>

<p>class Page_Cache {</p>

<pre><code>const DB_USER = "dompdf_page_cache";
const DB_PASS = "some meaningful password";
const DB_NAME = "dompdf_page_cache";

static private $__connection = null;

function init() {
    return false;
    if (is_null(self::$__connection)) {
        $con_str = "host=" . DB_HOST .
                " dbname=" . self::DB_NAME .
                " user=" . self::DB_USER .
                " password=" . self::DB_PASS;

        if (!self::$__connection = pg_connect($con_str))
            throw new Exception("Database connection failed.");
    }
}
</code></pre>

<p>```</p>

<p>Not sure really why this is trying to do this, obviously some kind of hard coded postgres caching system but anyway this fixed it.</p>
]]></content>
  </entry>
  
</feed>
