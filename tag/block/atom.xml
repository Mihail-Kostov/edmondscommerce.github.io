<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: block | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/block/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-03-26T11:38:07+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento Block Caching Cache Key Helper Method - Generate Safe Unique Cache Keys]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys.html"/>
    <updated>2012-12-04T12:21:44+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-block-caching-cache-key-helper-method-generate-safe-unique-cache-keys</id>
    <content type="html"><![CDATA[<p>If you do any work at all on Magento performance optimisation with a view to making pages load faster then you must have come across block caching. To understand block caching you need to first of all understand that a Magento page is actually made up of a lot of nested chunks called blocks.</p>

<p>Blocks can have their HTML generated dynamically every time though it is also possible to make Magento cache the block HTML output so that it loads a LOT faster, especially with heavy and slow blocks such as best sellers etc.</p>

<p>When setting up block caching, you need to specify a cache key. If your cache key is not unique enough then there is a risk that you will display the wrong cache for a particular scenario.</p>

<p>For this reason I created a block caching helper with this method that can generate a very unique cache key based on the current block usage.
/app/code/local/EdmondsCommerce/Helper/Data.php
```php</p>

<p>/**</p>

<pre><code> * Generate a nice unique block cache key
 *
 * @param Mage_Core_Block_Abstract $block
 * @return string
 */
public function ecCacheKey(Mage_Core_Block_Abstract $block){
    $class = get_class($block);
    $template = $block-&gt;getTemplateFile();
    $md5 = md5(var_export($block-&gt;getData(), true));
    $params = trim(implode(",", $block-&gt;getRequest()-&gt;getParams()), ',');
    $category=($block-&gt;getCurrentCategory())?$block-&gt;getCurrentCategory()-&gt;getName():'no-category';
    $store_id = Mage::app()-&gt;getStore()-&gt;getId();
    return 'edmondscommerce-'. $params . '-'. $category . '-' . $store_id . '-' . $class.'-'.$template.'-'.$md5;
}
</code></pre>

<p>```</p>

<p>You would use this in the following way:</p>

<p>In a block class, set up the following:
```php</p>

<pre><code>public function _construct(){
    parent::_construct();
    $this-&gt;addData(array(
        'cache_lifetime' =&gt; 999999999,
        'cache_tags' =&gt; array(Mage_Catalog_Model_Product::CACHE_TAG, Mage_Catalog_Model_Category::CACHE_TAG),
        'cache_key' =&gt; Mage::helper('blockcaching')-&gt;ecCacheKey($this)
    ));

}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Access Logs Find Spiders by Counting Requests to IP Addresses]]></title>
    <link href="http://edmondscommerce.github.io/linux/apache-access-logs-find-spiders-by-counting-requests-to-ip-addresses.html"/>
    <updated>2012-08-21T13:24:37+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/apache-access-logs-find-spiders-by-counting-requests-to-ip-addresses</id>
    <content type="html"><![CDATA[<p>If you would like a quick summary of the IP addresses that are beating the **** out of your server by firing lots of requests for quite possibly malicious or otherwise nefarious reasons then try this little bash script:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>LOG_FILE=/var/www/vhosts/DOMAIN.co.uk/statistics/logs/access_log
OUT_FILE=/tmp/spider_analysis</p>

<h1>This generates a file with the top 20 IP addresses by number of requests</h1>

<p>cat $LOG_FILE | awk &lsquo;{print $1}&rsquo; | sort | uniq -c | sort -nr | head -n 20 > $OUT_FILE</p>

<p>echo &ldquo;Top 20 IP addresses by number of request&rdquo;
cat $OUT_FILE</p>

<h1>allow for loop to split on new line</h1>

<p>IFS_BAK=$IFS
IFS=&ldquo;
&rdquo;</p>

<p>for i in <code>cat $OUT_FILE</code>
do</p>

<pre><code>COUNT=`echo $i | awk '{print $1}'`
IP_ADD=`echo $i | awk '{print $2}'`
echo ""
echo "---------------------------------"
echo ""
echo "$IP_ADD has made $COUNT requests"
echo "Whois Information"
whois $IP_ADD 
#lynx -dump http://who.cc/$IP_ADD # whois was blocked on the server i was using for some reason, use lynx as a work around
echo ""
echo "---------------------------------"
echo ""
</code></pre>

<p>done</p>

<h1>set that back</h1>

<p>IFS=$IFS_BAK
IFS_BAK=</p>

<p>```</p>

<p>You would use this to give you some idea of which IPs are hitting the server a lot.</p>

<p>Usually you would expect to see a lot of these being search engines which you likely want to allow. However if you see any domestic or other IP addresses then you may choose to block these.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Performance Problems]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-performance-problems.html"/>
    <updated>2012-04-16T08:56:48+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-performance-problems</id>
    <content type="html"><![CDATA[<p>If you are having performance issues with your Magento store and you are running on a dedicated or VPS server that you think should be up to the task of running your store properly but you continue to have performance problems then this post is for you.</p>

<p>Having decent server specification is only the first step on the road to having a high performance Magento store. Without proper configuration your server is not going to make the best use of its resources and that could make the difference of literally seconds or even tens of seconds of page load time.</p>

<p>The first and most important thing to check is that you are running a PHP opcode cacher such as APC. Opcode caching takes your PHP source code and compiles it to opcodes and then stores this in a cache. This opcode is actually what is run when people visit your store and the process of creating it, especially if you have a very large application with lots of file (like Magento), can be a real performance bottleneck. This problem is easily resolved by having APC installed and configured. If you are not sure, ring your hosting company and find out and if you don&rsquo;t have it running, ask them to set it up for you.</p>

<p>The next thing to check is MySQL configuration. The standard MySQL configuration defaults were set when server hardware and memory was a tiny fraction of what it is today and that means that the configuration is generally way too sparse with allocation of memory for caching and other optimisations. Tweaking MySQL can be a little tricky, its definitely not something you should do if you are not sure, but it is well worth getting someone to optimise your MySQL configuration.</p>

<p>After that, the next major performance gain with Magento is to make proper use of block caching. Magento has a brilliant built in feature where every block (page section) can be cached so that next time someone visits the page, the logic used to generate that section of page (for example a best sellers list) does not have to be run, we simply redisplay the cached copy of that block&rsquo;s HTML.</p>

<p>Beyond these three steps there are still many more things that can be done to improve the performance of your Magento store. If you would like professional help getting the best out of your server and Magento with a view to getting the lowest possible page load speeds then get in touch with Edmonds Commerce today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Controller Action Return Json (for AJAX, API etc)]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc.html"/>
    <updated>2012-02-15T14:15:01+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc</id>
    <content type="html"><![CDATA[<p>If you have a controller action that is designed to be accessed by AJAX requests or perhaps as part of a custom API system then you might like this snippet.</p>

<p>If you are working with the above scenario you likely would like to return pure JSON without any HTML etc. Also serving up the correct content type headers is going to be helpful, its not HTML, its JSON.</p>

<p>```php</p>

<pre><code>public function searchAction(){
    $query = $this-&gt;getRequest()-&gt;getParam('query');
    $json = Mage::getModel('mymodule/mymodel')-&gt;getSearchJson($query);
    $this-&gt;getResponse()-&gt;setHeader('Content-type', 'application/json');
    $this-&gt;getResponse()-&gt;setBody($json);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Block Caching - Get More Performance Easily in Magento]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-block-caching-get-more-performance-easily-in-magento.html"/>
    <updated>2010-11-23T14:22:22+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-block-caching-get-more-performance-easily-in-magento</id>
    <content type="html"><![CDATA[<p>If you dig a little deeper into Magento you will notice that there is a fully featured caching system lurking in there. However, as standard, it is quite under utilized.</p>

<p>I&rsquo;m sure that the primary reason for this is that caching dynamic systems can cause admin user confusion and generally make things trickier. However all the tools are there waiting to be used if you want to push things a bit further.</p>

<p>Pretty much any Magento block can be cached &ndash; its great for things like a &ldquo;best sellers&rdquo; block or anything else that requires some processing and doesn&rsquo;t really need to be up to the minute accurate for every page request.</p>

<p>To use block caching for a particular block, you just need to set three properties or methods. Note Magento&rsquo;s use of Magic methods allows us to mix and match properties and methods easily!</p>

<p>Check this out:</p>

<script type="text/javascript" src="http://snipt.net/embed/6188b31b89656245850183eaed4094ab"></script>


<p>We get asked a lot about optimising Magento performance and the first bit of advice is always to upgrade to the latest version. After that there are all kinds of things that can be done and implementing block caching like this is just one of them.</p>

<p>If you want to discuss optimising your Magento store for more speed and performance without necessarily having to upgrade your hosting environment, get in touch with Edmonds Commerce today!</p>
]]></content>
  </entry>
  
</feed>
