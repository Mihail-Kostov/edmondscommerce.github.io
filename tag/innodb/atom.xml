<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: innodb | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/innodb/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-05T20:04:47+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Failing to Create Foreign Keys (errno 150) + Solution]]></title>
    <link href="http://edmondscommerce.github.io/mysql/failing-to-create-foreign-keys-errno-150-solution.html"/>
    <updated>2010-10-19T16:32:25+01:00</updated>
    <id>http://edmondscommerce.github.io/mysql/failing-to-create-foreign-keys-errno-150-solution</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>If you are struggling to get some foreign keys set up on your MySQL InnoDB database then perhaps this is your problem and a pretty simple solution.</p>

<p>If you are getting errno 150 then take a look at the data types for the two fields that you are trying to relate to each other.</p>

<p>I had issues in Magento creating foreign keys against the customer_entity and sales_flat_order tables (entity_id columns). Turns out the issue was that these columns were set to UNSIGNED on the Magento tables, yet my tables columns did not have this attribute.</p>

<p>Set your columns to UNSIGNED (and otherwise double check the datatypes are the same) and I bet it will all work for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slow Truncating InnoDB Tables that have Foreign Keys set on them]]></title>
    <link href="http://edmondscommerce.github.io/mysql/slow-truncating-innodb-tables-that-have-foreign-keys-set-on-them.html"/>
    <updated>2010-08-10T17:12:34+01:00</updated>
    <id>http://edmondscommerce.github.io/mysql/slow-truncating-innodb-tables-that-have-foreign-keys-set-on-them</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>One of the advantages of using InnoDB as your storage engine in MySQL is that you can create a database structure that will automatically keep itself clean and tidy, by having deletes cascade through your tables as soon as you delete the main entity.</p>

<p>However, if you need to empty a large table, you will find that this process is really slow.</p>

<p>The solution is to first of all truncate all of the tables that have foreign key relations set on the main table and then only empty the main table once those child tables are emptied.</p>

<p>Yes this defeats the object a bit, but if you want speed, this is the solution. It is incredibly fast in comparison, and the end result is the same.</p>
]]></content>
  </entry>
  
</feed>
