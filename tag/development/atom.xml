<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: development | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/development/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-01-13T18:37:30+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Database Diagrams in PhpStorm]]></title>
    <link href="http://edmondscommerce.github.io/php/database-diagrams-in-phpstorm.html"/>
    <updated>2014-01-13T18:16:29+00:00</updated>
    <id>http://edmondscommerce.github.io/php/database-diagrams-in-phpstorm</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been handed a new project and wanted to get a better understanding of how everything was supposed to fit together.</p>

<p>As I&rsquo;m using PhpStorm, I decided to try the built in tools to see how they work and what they can generate.</p>

<p>To get these working you need to do a bit of set-up first, so the process is documented here:</p>

<p>There should be a Database option in the toolbar, click on this and then click the green cross &ndash;> Data Source and the Database engine you are using.</p>

<p>After this a new window will appear asking you to set-up the options needed to connect. Fill in the credentials that are required and then test the connection to ensure that everything is working correctly.</p>

<p>Once this has been done, the Database window should fill up with the different tables in you database. From here you can quickly see how each table is structured, browse the data that is there, bring up a console (Ctrl + Shift + F10) or generate a database diagram (Ctrl + Shift + Alt + U)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically convert old PHP file to camelCase ]]></title>
    <link href="http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase.html"/>
    <updated>2013-10-17T10:53:15+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been working with an old project that uses a combination of different coding styles.</p>

<p>One of the more trivial annoyances with this is that the variables used through the project are a combination of $camelCase and $snake_case which throws of the coding standards tools that I use.</p>

<p>To get round this I have put a little script together that will convert $snake_case to $camelCase automatically.</p>

<p>Obviously, you will need to check the results of this to make sure that there are not variables that should not be changed, but it has saved me a lot of time doing this manually.</p>

<p>I&rsquo;ve added this to my .bash_allias file, though it could easily be turned into a standalone script if required</p>

<p>```bash</p>

<h1>Fix legacy code</h1>

<p> cammelCase() {
   vim -E -s $@ &lt;&lt;-EOF
   :%s#\%($\%(\k+))\@&lt;=_(\k)#\u\1#g
   :update
   :quit
EOF</p>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable JavaScript alerts for a page]]></title>
    <link href="http://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page.html"/>
    <updated>2013-08-28T09:21:30+01:00</updated>
    <id>http://edmondscommerce.github.io/javascript/disable-javascript-alerts-for-a-page</id>
    <content type="html"><![CDATA[<p>If you encounter a webpage that is generating a lot of alerts, the following bookmark will prevent them from stealing focus but still allow you to see what is being said.</p>

<p>```js</p>

<p>javascript:alert = function ( text ) { console.log( text ); return true; };</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Side by Side diff on the command line]]></title>
    <link href="http://edmondscommerce.github.io/bash/side-by-side-diff-on-the-command-line.html"/>
    <updated>2013-07-09T17:25:18+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/side-by-side-diff-on-the-command-line</id>
    <content type="html"><![CDATA[<p>I have recently discovered a handy trick when comparing files on the command line.</p>

<p>Adding the -y command line options to diff will display the files side by side.</p>

<p>Using this with the <a href="http://www.colordiff.org/" title="Color Diff" target="_blank">Color Diff</a> tool will help you transform this</p>

<p><img src="/assets/normal-diff.png"></p>

<p>To this</p>

<p><img src="/assets/color-diff-600x200.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PrestaShop - Developer Notes]]></title>
    <link href="http://edmondscommerce.github.io/prestashop/prestashop-developer-notes.html"/>
    <updated>2013-03-19T17:47:26+00:00</updated>
    <id>http://edmondscommerce.github.io/prestashop/prestashop-developer-notes</id>
    <content type="html"><![CDATA[<p>PrestaShop is a fully featured shopping platform and offers much of the functionality that other eCommerce shopping platforms do. Compared to, for example, Magento PrestaShop is significantly simpler to develop for.</p>

<p>Here is the run down of the key aspects that any one building a web site on PrestaShop should be aware of.</p>

<h2>Modules</h2>


<p>PrestaShop is based around a modular design which is quite similar to Joomlas module system.
A modules presence and position on the front end is defined by hooking the module into a particular section on the frontend. There are loads of hooks that can be used. Most modules will add them selves to the hook they think is most appropriate on install. The ordering of modules also defines the order they appear in a given hook.
A key point of managing modules that can easily be over looked is that you can grab and drag modules in a given hook by clicking and holding the position change buttons.</p>

<h2>Themes</h2>


<p>Off the shelf themes are usually not simply a new set of templates and CSS but also modules as well. Quite allot of themes are built around specific modules being in specific hooks some times in a specific order.</p>

<h2>Creating your own module</h2>


<p>Defining your own module is really straight forward:
Create a folder in modules called my_module.
Create a file called my_module.php, in this file create a class called My_module which extends Module.
Create a config.xml with the following template:
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?>
<module></p>

<pre><code>&lt;name&gt;my_module&lt;/name&gt;
&lt;displayName&gt;My Module&lt;/displayName&gt;
&lt;version&gt;1&lt;/version&gt;
&lt;description&gt;A test module, it does nothing&lt;/description&gt;
&lt;author&gt;My self&lt;/author&gt;
&lt;tab&gt;front_office_features&lt;/tab&gt;
&lt;is_configurable&gt;0&lt;/is_configurable&gt;
&lt;need_instance&gt;1&lt;/need_instance&gt;
</code></pre>

<p></module>
Done, the module will appear in the module list but do nothing. You can look at the base module class to see all the function available that get called by PrestaShop are different times to do what you need to do.</p>
]]></content>
  </entry>
  
</feed>
