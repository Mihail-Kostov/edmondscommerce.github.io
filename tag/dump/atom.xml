<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: dump | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/dump/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-04-28T13:25:53+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magento Detailed Exception Dump - Version 3]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-detailed-exception-dump-version-3.html"/>
    <updated>2011-02-08T13:17:04+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-detailed-exception-dump-version-3</id>
    <content type="html"><![CDATA[<p>Continuing with trying to improve the developer experience with Magento a key element has been my quest for a detailed exception dump that can also handle the various object recursion issues in Magento that can cause all kinds of issues when developing.</p>

<p>Here is my most up to date version of the detailedExceptionDump method.</p>

<p>Its designed to go into a customised version of Mage that you should ONLY use on development environemnts. I will leave the particular usage of this method to you, though it would make sense to also modify the printException method as a starting point.</p>

<script type="text/javascript" src="http://snipt.net/embed/a72f23e55dd732511c71a0d72260ab8b"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento View SQL For Collection]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-view-sql-for-collection.html"/>
    <updated>2010-10-21T10:46:19+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-view-sql-for-collection</id>
    <content type="html"><![CDATA[<p>If you are working with collections and would like to verify that the actual SQL being used is what you expect it to be then this little tip might prove really handy.</p>

<p>For any collection you can call the method getSelect(). This retrieves the actual Select object that handles the query.</p>

<p>If you cast this select object to a string, you get the raw SQL query, so for example the following is pretty handy:</p>

<p>```php</p>

<p>die(var_dump((string)$collection->getSelect()));</p>

<p>```</p>

<p>This way you can tweak your collection filters etc and check that its doing what you expect it to be doing</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento DB Dump - Just Use the Admin Backup - Not phpMyAdmin]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-db-dump-just-use-the-admin-backup-not-phpmyadmin.html"/>
    <updated>2009-04-08T12:32:12+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-db-dump-just-use-the-admin-backup-not-phpmyadmin</id>
    <content type="html"><![CDATA[<p>This is as much a note to self as anything else. If you are migrating a Magento store or creating a copy of a store &ndash; if you use phpMyAdmin to create the database dump things can all go wrong.</p>

<p>Instead save yourself the hassle and just use the admin backups functionality. You can then import this using phpMyAdmin without any problems</p>
]]></content>
  </entry>
  
</feed>
