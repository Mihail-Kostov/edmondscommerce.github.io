<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: symfony2 | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/symfony2/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-10-16T11:42:51+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Symfony2 Twig  'DateTime could not be converted to string']]></title>
    <link href="http://edmondscommerce.github.io/symfony2/symfony2-twig-datetime-could-not-be-converted-to-string.html"/>
    <updated>2013-12-09T18:43:03+00:00</updated>
    <id>http://edmondscommerce.github.io/symfony2/symfony2-twig-datetime-could-not-be-converted-to-string</id>
    <content type="html"><![CDATA[<p>I just hit an interesting issue with a nice and easy solution once you understand what is going on.
On a current project I making heavy use of the <a href="https://github.com/sensiolabs/SensioGeneratorBundle">SensioGeneratorBundle</a> to generate CRUD etc. So far its working really nicely.</p>

<p>However I started to see an issue with one of my entities that Twig was not handling a DateTime column properly but others were being handled fine.</p>

<p>Looking through the Twig template I noticed this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html+jinja'><span class='line'>  {%<span class="ni">&amp;ndash;</span> for field, metadata in fields %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>        <span class="cp">{%</span>- <span class="k">if</span> <span class="nb">loop</span><span class="nv">.first</span> <span class="k">and</span> <span class="o">(</span><span class="s1">&#39;show&#39;</span> <span class="k">in</span> <span class="nv">actions</span><span class="o">)</span> <span class="cp">%}</span>
</span><span class='line'>
</span><span class='line'>            <span class="ni">&amp;lt;</span>td<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;<span class="cp">{{</span> <span class="s2">&quot;{{ path(&#39;&quot;</span> <span class="o">~</span> <span class="nv">route_name_prefix</span> <span class="o">~</span> <span class="s2">&quot;_show&#39;, { &#39;id&#39;: entity.id }) }}&quot;</span> <span class="cp">}}</span>&quot;<span class="ni">&amp;gt;</span><span class="cp">{{</span> <span class="s1">&#39;{{ entity.&#39;</span> <span class="o">~</span> <span class="nv">field</span><span class="o">|</span><span class="nf">replace</span><span class="o">({</span><span class="s1">&#39;_&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">})</span> <span class="o">~</span> <span class="s1">&#39; }}&#39;</span> <span class="cp">}}</span><span class="ni">&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/td<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cp">{%</span>- <span class="k">elseif</span> <span class="nv">metadata.type</span> <span class="k">in</span> <span class="o">[</span><span class="s1">&#39;date&#39;</span><span class="o">,</span> <span class="s1">&#39;datetime&#39;</span><span class="o">]</span> <span class="cp">%}</span>
</span><span class='line'>
</span><span class='line'>            <span class="ni">&amp;lt;</span>td<span class="ni">&amp;gt;</span><span class="cp">{{</span> <span class="s1">&#39;{% if entity.&#39;</span> <span class="o">~</span> <span class="nv">field</span><span class="o">|</span><span class="nf">replace</span><span class="o">({</span><span class="s1">&#39;_&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">})</span> <span class="o">~</span> <span class="s1">&#39; %}{{ entity.&#39;</span> <span class="o">~</span> <span class="nv">field</span><span class="o">|</span><span class="nf">replace</span><span class="o">({</span><span class="s1">&#39;_&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">})</span> <span class="o">~</span> <span class="s1">&#39;|date(\&#39;Y-m-d H:i:s\&#39;) }}{% endif %}&#39;</span> <span class="cp">}}</span><span class="ni">&amp;lt;</span>/td<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What this means is that the first entity will never have the DateTime handling. Of course you probably don&rsquo;t want a DateTime to be the first entity so I think this is reasonable.</p>

<p>To fix this, all you need to do is make sure that your Doctrine class does not declare the first property as a DateTime.</p>

<p>If you have a primary key or unique reference property then try to get this as the first declared property in your Doctrine entity class and then rebuild the CRUD and the problem goes away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faker Symfony2 Integration]]></title>
    <link href="http://edmondscommerce.github.io/symfony2/faker-symfony2-integration.html"/>
    <updated>2013-12-02T20:43:49+00:00</updated>
    <id>http://edmondscommerce.github.io/symfony2/faker-symfony2-integration</id>
    <content type="html"><![CDATA[<p>Generating test data is a crucial part of properly testing your code. If you have to hard code your test data or fixtures then you might be tempted to use only a small number of test entities.</p>

<p>To help with this you can use the brilliant <a href="https://github.com/fzaninotto/Faker">Faker</a> library to generate your test data. The Faker library is designed purely to generate test data and has a range of providers for all kinds of data.</p>

<p>As if that wasn&rsquo;t good enough, you can leverage all the power of this library in your Symfony2 development by simply installing this Symfony2 bundle, <a href="https://github.com/willdurand/BazingaFakerBundle/blob/master/Resources/doc/index.md">BazingaFakerBundle</a>.</p>

<p>Installation is a breeze with Composer and then simply reference your entities in the configuration and run the command</p>

<p><code>
app/console faker:populate
</code></p>

<p>To generate your entities programmatically rather than as a command line action (perhaps as part of a unit or functional test) you can use this code:</p>

<p>``` php
//Faker load test data
$populator = $this->getContainer()&ndash;>get(&lsquo;faker.populator&rsquo;);
$insertedPks = $populator->execute();
foreach ($insertedPks as $class => $pks) {</p>

<pre><code>$reflClass = new \ReflectionClass($class);
$shortClassName = $reflClass-&gt;getShortName();
printf("\nFaker: Inserted %s new %s objects\n", count($pks), $shortClassName);
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
