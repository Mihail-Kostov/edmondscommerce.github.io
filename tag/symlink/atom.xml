<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: symlink | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/symlink/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-10-16T11:13:12+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop Magento writing to /tmp]]></title>
    <link href="http://edmondscommerce.github.io/magento/stop-magento-writing-to-tmp.html"/>
    <updated>2012-08-14T13:54:17+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/stop-magento-writing-to-tmp</id>
    <content type="html"><![CDATA[<p>So some of us disagree when it comes to what should happen when magento cannot write to var/ in the webroot.  Magento itself chooses to try /tmp/magento/ if the var/ folder is not writable.  This can cause many issues and confusion.  Not least of which emptying var/ and making it writable does not make magento start using it, if there&rsquo;s already a /tmp/magento!</p>

<p>One preferable option is to force magento to just stop if it can&rsquo;t write to var/ &ndash; here&rsquo;s a simple way to do this, which is sneaky but really handy :&ndash;
```bash</p>

<p>cd /tmp
ln -s abracadabra-dangling-symlink magento</p>

<p>```</p>

<p>What that does is create a dangling symlink in /tmp/ called magento, which cannot be overwritten by a directory.  Magento then simply stops.  Stopping because of permissions errors is often preferable to continuing and causing later confusion and problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Symlink chown]]></title>
    <link href="http://edmondscommerce.github.io/linux/linux-symlink-chown.html"/>
    <updated>2009-03-24T13:35:08+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/linux-symlink-chown</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you create a symlink via SSH then chances are you are logged in as the root user and the symlink will be created as root. Usually though you will want to the symlink to belong to another owner:group.</p>

<p>If you try to use chown it will silently fail to change the ownership of the symlink, though instead it will change the ownership of the file the symlink is pointing to.</p>

<p>If you want to make it actually change the owner:group of the symlink, us the switch -h.</p>

<p>For example:</p>

<p>```</p>

<p>chown -h user:group symlink</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
