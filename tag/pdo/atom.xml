<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: PDO | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/pdo/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-02-11T10:08:38+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP PDO Fetch Object and Columns with Spaces]]></title>
    <link href="http://edmondscommerce.github.io/php/php-pdo-fetch-object-and-columns-with-spaces.html"/>
    <updated>2013-05-24T17:39:35+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-pdo-fetch-object-and-columns-with-spaces</id>
    <content type="html"><![CDATA[<p>If you use PDO and Fetch Object, it might not be clear exactly to access row properties that are based on columns that have spaces.</p>

<p>I know I searched for things like:</p>

<p>PDO Columns with spaces
PDO::fetchObject spaces
and PDO spaces in column names</p>

<p>I eventually found what I was looking for in the depths of the PHP.net comments however hopefully this post will be a little bit easier to find thanks to a bit of primitive SEO up there.</p>

<p>The solution to using columns with spaces is simply this:</p>

<p>```php</p>

<p>$sql=&ldquo;select * from table_with_spaces_in_column_names &rdquo;;
$statement = $myPDOObject->prepare($sql);
$statement->execute();
$row = $statement->fetchObject();
$ColumnWithSpaces = $row->{&lsquo;Column With Spaces&rsquo;}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPUnit and PDOException + Solution]]></title>
    <link href="http://edmondscommerce.github.io/php/phpunit-and-pdoexception-solution.html"/>
    <updated>2012-11-01T12:30:21+00:00</updated>
    <id>http://edmondscommerce.github.io/php/phpunit-and-pdoexception-solution</id>
    <content type="html"><![CDATA[<p>I recently needed to run a test suite against a couple of classes that were making use of PDO.</p>

<p>When I tried to run the I got the following errors in the output for every test</p>

<p>PDOException: You cannot serialize or unserialize PDO instances</p>

<p>There is a quick way around this you just need to add the following lines to the class level doc block</p>

<p>```php</p>

<p>/<em>*
 *
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 </em>/</p>

<p>```</p>

<p>A full explanation of these, and other annotations can be found <a title="PHP Unit Appendix B. Annotations" href="http://www.phpunit.de/manual/current/en/appendixes.annotations.html">here</a></p>
]]></content>
  </entry>
  
</feed>
