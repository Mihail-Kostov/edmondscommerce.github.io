<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: json | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/json/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-02-12T15:36:15+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reading JSON without Reading JSON!]]></title>
    <link href="http://edmondscommerce.github.io/programming/reading-json-without-reading-json.html"/>
    <updated>2013-02-08T16:16:19+00:00</updated>
    <id>http://edmondscommerce.github.io/programming/reading-json-without-reading-json</id>
    <content type="html"><![CDATA[<p>JSON is a well structure interoperable way of passing data between systems. It&rsquo;s a good way of passing large amount of data into a web page for JavaScript to process and between system on the internet regardless of there architecture or programming language.</p>

<p>JSON is one of the hardest data structure to read directly as a human in it&rsquo;s RAW format compared to other formal grammars such as XML, YAML or ini.</p>

<p>Fortunately there is an easy trick that you can do with Chrome, Firefox with Firebug and even Opera and IE9!</p>

<p>Take the JSON you have, wrap it in &ldquo;eval()&rdquo; the same as you would if you where writing a web page (because it is just JavaScript after all) run it and every modern browser this was tested with should allow you to inspect the resulting data structure.</p>

<p>Example JSON:
<code>
{&ldquo;glossary&rdquo;:{&ldquo;title&rdquo;:&ldquo;example glossary&rdquo;,&ldquo;GlossDiv&rdquo;:{&ldquo;title&rdquo;:&ldquo;S&rdquo;,&ldquo;GlossList&rdquo;:{&ldquo;GlossEntry&rdquo;:{&ldquo;ID&rdquo;:&ldquo;SGML&rdquo;,&ldquo;SortAs&rdquo;:&ldquo;SGML&rdquo;,&ldquo;GlossTerm&rdquo;:&ldquo;Standard Generalized Markup Language&rdquo;,&ldquo;Acronym&rdquo;:&ldquo;SGML&rdquo;,&ldquo;Abbrev&rdquo;:&ldquo;ISO 8879:1986&rdquo;,&ldquo;GlossDef&rdquo;:{&ldquo;para&rdquo;:&ldquo;A meta-markup language, used to create markup languages such as DocBook.&rdquo;,&ldquo;GlossSeeAlso&rdquo;:[&ldquo;GML&rdquo;,&ldquo;XML&rdquo;]},&ldquo;GlossSee&rdquo;:&ldquo;markup&rdquo;}}}}}
</code></p>

<table>
<tr>
<td>
Firefox with Firebug:
<img src="/assets/firefoxjson-600x328.png">
</td>
</tr>
<tr>
<td>
Chrome:
<img src="/assets/chromejson-600x313.png">
</td>
</tr>
<tr>
<td>
Opera:
<img src="/assets/bhtAjti.png">
</td>
</tr>
<tr>
<td>
Internet Explorer 9:
Note: To see this structure you need to click the "Add watcher" link displayed upon running the code.
<img src="/assets/ie9json.png">
</td>
</tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Controller Action Return Json (for AJAX, API etc)]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc.html"/>
    <updated>2012-02-15T14:15:01+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc</id>
    <content type="html"><![CDATA[<p>If you have a controller action that is designed to be accessed by AJAX requests or perhaps as part of a custom API system then you might like this snippet.</p>

<p>If you are working with the above scenario you likely would like to return pure JSON without any HTML etc. Also serving up the correct content type headers is going to be helpful, its not HTML, its JSON.</p>

<p>```php</p>

<pre><code>public function searchAction(){
    $query = $this-&gt;getRequest()-&gt;getParam('query');
    $json = Mage::getModel('mymodule/mymodel')-&gt;getSearchJson($query);
    $this-&gt;getResponse()-&gt;setHeader('Content-type', 'application/json');
    $this-&gt;getResponse()-&gt;setBody($json);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
