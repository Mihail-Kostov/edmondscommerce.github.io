<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: debug | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/debug/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-06-18T19:29:38+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP SOAP Client Basic Template]]></title>
    <link href="http://edmondscommerce.github.io/php/php-soap-client-basic-template.html"/>
    <updated>2013-07-08T08:28:17+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-soap-client-basic-template</id>
    <content type="html"><![CDATA[<p>Often when integrating with SOAP services I find myself doing the same old moves. I have a deep suspicion of API&rsquo;s written by others. They always tend to be in ASP.net, have error message pages that have default messages and generally be really badly documented and coded. Maybe I&rsquo;m just unlucky?</p>

<p>In my experience decent API&rsquo;s don&rsquo;t use SOAP.</p>

<p>Anyway if I do have to use SOAP, starting out with this class as a template to get the ball rolling with some useful debugging methods (so you can email the API owners and show them that their API doesn&rsquo;t work), I&rsquo;ve blogged it for my own archive and retrieval reasons but if it helps anyone else out then that is great!</p>

<p>```php</p>

<p>&lt;?php
/<em>*
 * Class Template Soap Client Consuming Class
 </em>/</p>

<p>class EdmondsCommerceSoap
{</p>

<pre><code>protected $username = 'edmondscommerce';

protected $pass = 'NotReallyMyPassw0rd';


public function test($wsdl)
{
    $options["connection_timeout"] = 25;
    $options["location"] = $wsdl; 
    $options['trace'] = 1; //this is important if you want to be able to use the soapDebug method
    try {
        $client = new SoapClient($wsdl, $options);
        $client = $this-&gt;setAuthHeader($client);
        $client-&gt;Method();
    } catch (SoapFault $e) {
        echo '&lt;h1&gt;SoapFault: ' . $e-&gt;getMessage() . '&lt;/h1&gt;';
        echo '&lt;pre&gt;' . $e-&gt;getTraceAsString() . '&lt;/pre&gt;';
    }
    echo '&lt;h2&gt;Debug Info:&lt;/h2&gt;';
    var_dump($this-&gt;soapDebug($client));
}

/**
* This method is only a template, will change depending on the service you are using but its a good starting point demonstrating how to set headers
**/
protected function setAuthHeader(SoapClient $client)
{
    $auth = array(
        'username' =&gt; $this-&gt;username,
        'MessageId' =&gt; md5(time()),
        'password' =&gt; $this-&gt;password
    );
    foreach($auth as $k=&gt;$v){
        $headers[] = new SoapHeader('Header', $k, $v, false);
    }
    $client-&gt;__setSoapHeaders($headers);
    return $client;
}

/**
 *  This method gathers all debug info into a handy array ready for var_dump, log etc etc
 **/
protected function soapDebug(SoapClient $client)
{
    $debug = array();
    $debug['request']['headers'] = $client-&gt;__getLastRequestHeaders();
    $debug['request']['body'] = $client-&gt;__getLastRequest();
    $debug['request']['body_formatted'] = $this-&gt;formatXmlString($client-&gt;__getLastRequest());
    $debug['response']['headers'] = $client-&gt;__getLastResponseHeaders();
    $debug['response']['body'] = $client-&gt;__getLastResponse();
    $debug['response']['body_formatted'] = $this-&gt;formatXmlString($client-&gt;__getLastResponse());
    return $debug;
}


/**
 * This method is purely to assist the debug method and simply makes generated XML readable
 **/
protected function formatXmlString($xml)
{
    $xml = preg_replace('/(&gt;)(&lt;)(\/*)/', "$1\n$2$3", $xml);
    $token = strtok($xml, "\n");
    $result = '';
    $pad = 0;
    $matches = array();
    while ($token !== false) :
        if (preg_match('/.+&lt;\/\w[^&gt;]*&gt;$/', $token, $matches)) :
            $indent = 0; elseif (preg_match('/^&lt;\/\w/', $token, $matches)) :
            $pad--;
            $indent = 0; elseif (preg_match('/^&lt;\w[^&gt;]*[^\/]&gt;.*$/', $token, $matches)) :
            $indent = 1; else :
            $indent = 0;
        endif;
        $line = str_pad($token, strlen($token) + $pad, ' ', STR_PAD_LEFT);
        $result .= $line . "\n";
        $token = strtok("\n");
        $pad += $indent;
    endwhile;
    return $result;
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prestashop Debug Mode using the Magento Environment Variable Method]]></title>
    <link href="http://edmondscommerce.github.io/prestashop/prestashop-debug-mode-using-the-magento-environment-variable-method.html"/>
    <updated>2013-04-25T10:14:30+01:00</updated>
    <id>http://edmondscommerce.github.io/prestashop/prestashop-debug-mode-using-the-magento-environment-variable-method</id>
    <content type="html"><![CDATA[<p>Magento developers are no doubt familiar with the concept of defining a server environment variable MAGE_IS_DEVELOPER_MODE so that when running Magento locally it is always in developer mode but there is no chance of accidently deploying a live site in developer mode.</p>

<p>This little trick will allow you to use the same environment variable to also have the same effect when working with PrestaShop.</p>

<p>To explain &ndash; developer mode generally means that things like error messages and debugging information are displayed clearly in the browser which makes things much easier when you are developing, to see what is going wrong.</p>

<p>On a live site you want to keep error information hidden and generally display to the customer a more friendly error message screen that perhaps helps them find their way back to a functional section of the site or gives them information to contact the site owner directly for assistance.</p>

<p>Anyway, to put PrestaShop in debug mode locally but have no risk of deployign this to live you can alter the file: config/defines.inc.php</p>

<p>from
```php</p>

<p>define(&lsquo;<em>PS_MODE_DEV</em>&rsquo;, false);</p>

<p>```</p>

<p>to
```php</p>

<p>define(&lsquo;<em>PS_MODE_DEV</em>&rsquo;, isset($_SERVER[&lsquo;MAGE_IS_DEVELOPER_MODE&rsquo;]));</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Stack traces you can click on! (in PhpStorm)]]></title>
    <link href="http://edmondscommerce.github.io/php/php-stack-traces-you-can-click-on-in-phpstorm.html"/>
    <updated>2012-09-07T14:35:37+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-stack-traces-you-can-click-on-in-phpstorm</id>
    <content type="html"><![CDATA[<p>Having a stack trace is very handy at times but wouldn&rsquo;t it be nice if you could click on the filename in the stack trace in your browser and your IDE take you to the file and line that it&rsquo;s talking about?</p>

<p>Well, with PhpStorm and kint, you can!  Using a plugin called Remote Call, the PhpStorm IDE can listen on a port and go to files and line numbers via an ajax call.</p>

<p>To configure this, grab the latest version of kint, and copy it&rsquo;s sample config to an actual config file, and edit the section about pathDisplayCallback to look like this :&ndash;
```php</p>

<p>$<em>kintSettings[&lsquo;pathDisplayCallback&rsquo;] = &ldquo;</em>kintLine&rdquo;;
function _kintLine( $file, $line = NULL ) {</p>

<pre><code>    if ( !$line ) { // means this is called from resource type dump
            return $file;
    }
    return "&lt;u&gt;&lt;a class=\"kint-ide-link\" href=\"http://localhost:8091/?message={$file}:{$line}\"&gt;" . $file . "&lt;/a&gt;&lt;/u&gt; line &lt;i&gt;{$line}&lt;/i&gt;";
</code></pre>

<p>}</p>

<p>```</p>

<p>You can even be clever with regex to make the filenames be relative &ndash; for instance, we run our projects from a directory below one called, oddly enough &ldquo;projects&rdquo; and our function looks like this :&ndash;
```php</p>

<p>function _kintLine( $file, $line = NULL )
{</p>

<pre><code>    $shortname = preg_replace('#.*/[Pp]rojects/[^/]*/#','',$file);
    if ( !$line ) { // means this is called from resource type dump
            return $shortname;
    }
    return "&lt;u&gt;&lt;a class=\"kint-ide-link\" href=\"http://localhost:8091/?message={$file}:{$line}\"&gt;" . $shortname . "&lt;/a&gt;&lt;/u&gt; line &lt;i&gt;{$line}&lt;/i&gt;";
</code></pre>

<p>}</p>

<p>```</p>

<p>Now, if you call Kint::trace(); from your file that you&rsquo;ve included Kint.class.php from, you get a clickable stacktrace!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Output Buffering Being Disabled]]></title>
    <link href="http://edmondscommerce.github.io/php/debugging-output-buffering-being-disabled.html"/>
    <updated>2012-08-21T17:09:55+01:00</updated>
    <id>http://edmondscommerce.github.io/php/debugging-output-buffering-being-disabled</id>
    <content type="html"><![CDATA[<p>If you are confused as to exactly which bit of code is killing your output buffer in PHP then you might love this little trick. Combined with Xdebug it can get you to the root of the problem quickly and easily.</p>

<p>The trick involves using the callback function capability of ob_start.</p>

<p>Firstly you need to make a callback handler, for example:</p>

<p>```php</p>

<p>function ob_callback(){</p>

<pre><code>echo 'wtf';
</code></pre>

<p>}</p>

<p>```</p>

<p>Then in your IDE, set a break point on the echo line. If you aren&rsquo;t using Xdebug, you could do something like this instead:</p>

<p>```php</p>

<p>function ob_callback(){</p>

<pre><code>echo '&lt;h1&gt;Output Buffer Has Been Killed&lt;/h1&gt;&lt;pre&gt;';
var_dump(debug_backtrace());
die;
</code></pre>

<p>}</p>

<p>```</p>

<p>Then where you are starting your output buffer, simply pass in the function name as a parameter like so:</p>

<p>```php</p>

<p>ob_start(&lsquo;ob_callback&rsquo;);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Display out-of-stock products part of a Configurable Product]]></title>
    <link href="http://edmondscommerce.github.io/magento/display-out-of-stock-products-part-of-a-configurable-product.html"/>
    <updated>2012-05-31T16:39:50+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/display-out-of-stock-products-part-of-a-configurable-product</id>
    <content type="html"><![CDATA[<p>In a situation where you want Magento to display out of stock product options of a configurable products, overriding getAllowProducts() function in Mage_Catalog_Block_Product_View_Type_Configurable is where you should be looking, change
```php</p>

<p>if ($product->isSaleable())
{</p>

<pre><code>     $products[] = $product;
</code></pre>

<p>}</p>

<p><code>
to
</code>php
$products[] = $product;
```</p>

<p>Bingo!!!</p>
]]></content>
  </entry>
  
</feed>
