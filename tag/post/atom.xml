<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: post | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/post/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-02-17T13:09:59+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running PHP Scripts on CLI and Faking a Web Request]]></title>
    <link href="http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request.html"/>
    <updated>2014-02-14T17:31:14+00:00</updated>
    <id>http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request</id>
    <content type="html"><![CDATA[<p>Some times you build a PHP script that is designed to run from a web request and you want to run it on the command line.
The problem is that you have used the standard PHP super globals and you would rather not refactor the script loads.</p>

<p>Here is a nice quick solution:</p>

<p>``` php
if(isset($argc)){</p>

<pre><code>for ($i = 1; $i &lt; $argc; $i++) {
    $things = explode("=", $argv[$i]);
    if (false !== stripos($things[0], 'POST:')) {
         $post = str_replace('POST:', '', $things[0]);
         $_POST[$post] = $things[1];
    } else {
         $_GET[$things[0]] = $things[1];
    }
}
</code></pre>

<p>}</p>

<p>echo &ldquo;\nGET:\n&rdquo;;
var_dump($<em>GET);
echo &ldquo;\nPOST:\n&rdquo;;
var_dump($</em>POST);</p>

<p><code>``
This will loop over the argc variable that is defined when running in CLI mode and will fake the</code>$<em>GET<code>and</code>$</em>POST` variables as required.</p>

<p>To run this with get and post variables you would do this:</p>

<p><code>
php -f script.php getvar1=test getvar2=foo POST:postvar1=bar
</code></p>

<p>And that&rsquo;s it. It is not particularly pretty but it can be pretty handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax Silently Failing in HTTPS but fine in HTTP]]></title>
    <link href="http://edmondscommerce.github.io/javascript/ajax-silently-failing-in-https-but-fine-in-http.html"/>
    <updated>2011-03-07T16:41:21+00:00</updated>
    <id>http://edmondscommerce.github.io/javascript/ajax-silently-failing-in-https-but-fine-in-http</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you are struggling to debug why some ajax, perhaps using jquery etc is working fine when you access the page via http, but if you use https then it fails silently with very little error messaging to work on then this could be your solution.</p>

<p>Basically, although you have accessed the page over HTTPS, if there are any insecure elements on the page then your ajax call will default to http and will then fail silently thanks to cross domain policy problems.</p>

<p>If you debug in chrome, you do get a meaningful error message but if like me you generally prefer working in Firefox and Firebug then you are up the creek.</p>

<p>Double check your source code for <a href="http://">http://</a> and also check out live http headers for insecure calls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Raw XML Posted to a Script]]></title>
    <link href="http://edmondscommerce.github.io/php/accessing-raw-xml-posted-to-a-script.html"/>
    <updated>2009-12-21T15:20:56+00:00</updated>
    <id>http://edmondscommerce.github.io/php/accessing-raw-xml-posted-to-a-script</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you have a script that is receiving posted XML for whatever reason and are trying to access this XML without any filtering, escaping etc then this is the solution you are looking for.</p>

<p>Instead of trying to access via $_POST etc, you can simply call the following:</p>

<p>```php</p>

<p>$xml = file_get_contents(&lsquo;php://input&rsquo;);</p>

<p>```</p>

<p>This will then allow you to load it into Simple XML for example for further processing</p>

<p>```php</p>

<p>$sx = simplexml_load_string($xml);
if($sx){
   &hellip;.
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Spiders: Grab Data, Post Forms and Interact with Web Sites Automatically]]></title>
    <link href="http://edmondscommerce.github.io/php/curl/spidering/firefox/programming/building-spiders-grab-data-post-forms-and-interact-with-web-sites-automatically.html"/>
    <updated>2008-02-14T11:56:16+00:00</updated>
    <id>http://edmondscommerce.github.io/php/curl/spidering/firefox/programming/building-spiders-grab-data-post-forms-and-interact-with-web-sites-automatically</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>One of the most useful and powerful things you can do with PHP is to create a programme which will simulate a web browser and can grab data, post data to forms and generally interact with other web sites &ndash; automatically.</p>

<p>For PHP to be able to work like this it must have the CURL library installed and active. It is the CURL library which actually handles all of the interaction and PHP is my scripting language of choice for interacting with CURL.</p>

<p>A simple CURL function is like this:</p>

<p>```php</p>

<p>function curl($url){</p>

<p>$timeout = &lsquo;300&rsquo;; //how long before CURL gives up on this page
$go = curl_init();
curl_setopt ($go, CURLOPT_URL, $url);
curl_setopt ($go, CURLOPT_RETURNTRANSFER, 1);
curl_setopt ($go, CURLOPT_FOLLOWLOCATION, 1);
curl_setopt ($go, CURLOPT_TIMEOUT, $timeout);
$page = curl_exec($go);
curl_close($go);
return $page;</p>

<p>}</p>

<p>```</p>

<p>This function when called and echoed will output the entire html of the $url specified.</p>

<p>For grabbing data from this page to be inserted into a database (for example when spidering a suppliers web site for product information to be inserted into your site) we then use regular expressions to find what we are looking for and then insert that into the database.</p>

<p>so for example if we wanted to grab the product title and we knew that this was wrapped in a h1 tag with the class &ldquo;product title&rdquo; we could use this regexp to grab this:</p>

<p>```php</p>

<p>$page = curl($url);</p>

<p>$pattern = &lsquo;%</p>

<h1 class="product_title">(.+?)</h1>


<p>%i';</p>

<p>preg_match($pattern,$page,$matches);</p>

<p>print_r($matches); //we can see the entire array of matches and choose which we want to insert into the database</p>

<p>```</p>

<p>We can also Post data to web sites using curl. This allows us to do all kinds of things including grabbing data that is displayed on the submission of post forms. Here is an example Curl Post Function:
```php</p>

<p>function curl_post($url,$post_data){</p>

<p>$timeout = &lsquo;300&rsquo;; //how long before CURL gives up on this page
$go = curl_init();
curl_setopt ($go, CURLOPT_URL, $url);
curl_setopt ($go, CURLOPT_RETURNTRANSFER, 1);
curl_setopt ($go, CURLOPT_FOLLOWLOCATION, 1);
curl_setopt ($go, CURLOPT_TIMEOUT, $timeout);
//now for the post section
curl_setopt($go, CURLOPT_POST, true);</p>

<p>curl_setopt($go, CURLOPT_POSTFIELDS, $post_data);
$page = curl_exec($go);
curl_close($go);
return $page;
}</p>

<p>```</p>

<p>It can be tricky to figure out exactly what data should be in the post string. To help you out though is this incredibly handy addon for firefox: <a href="https://addons.mozilla.org/en-US/firefox/addon/3829" target="_blank">Live Http Headers</a>.</p>

<p>This addon lets you see exactly what is going on between your browser and the web site you are visiting. This can quickly and easily give you the information you need to replicate the same behaviour with your CURL script.</p>

<p>Edmonds Commerce specialise in working with PHP and CURL. If you have any spidering, screen scraping or other application that requires PHP to actively interact with other web sites &ndash; <a href="http://www.edmondscommerce.co.uk/contact-about-curl-and-php.html">get in touch today</a> to see how we can help you benefit from this incredibly powerful technique.</p>

<p>Related Resources</p>

<p><a href="http://www.phpfour.com/blog/2008/01/20/php-http-class/" rel="nofollow"><a href="http://www.phpfour.com/blog/2008/01/20/php-http-class/">http://www.phpfour.com/blog/2008/01/20/php-http-class/</a></a></p>

<p><a href="http://www.phpclasses.org/browse/package/1988.html" rel="nofollow"><a href="http://www.phpclasses.org/browse/package/1988.html">http://www.phpclasses.org/browse/package/1988.html</a></a></p>

<p><a href="http://www.phpit.net/article/using-curl-php/" rel="nofollow"><a href="http://www.phpit.net/article/using-curl-php/">http://www.phpit.net/article/using-curl-php/</a></a></p>

<p><a href="http://skeymedia.com/intro-to-curl-with-php/" rel="nofollow"><a href="http://skeymedia.com/intro-to-curl-with-php/">http://skeymedia.com/intro-to-curl-with-php/</a></a></p>
]]></content>
  </entry>
  
</feed>
