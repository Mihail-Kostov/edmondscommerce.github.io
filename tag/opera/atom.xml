<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: opera | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/opera/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-02-14T17:37:05+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reading JSON without Reading JSON!]]></title>
    <link href="http://edmondscommerce.github.io/programming/reading-json-without-reading-json.html"/>
    <updated>2013-02-08T16:16:19+00:00</updated>
    <id>http://edmondscommerce.github.io/programming/reading-json-without-reading-json</id>
    <content type="html"><![CDATA[<p>JSON is a well structure interoperable way of passing data between systems. It&rsquo;s a good way of passing large amount of data into a web page for JavaScript to process and between system on the internet regardless of there architecture or programming language.</p>

<p>JSON is one of the hardest data structure to read directly as a human in it&rsquo;s RAW format compared to other formal grammars such as XML, YAML or ini.</p>

<p>Fortunately there is an easy trick that you can do with Chrome, Firefox with Firebug and even Opera and IE9!</p>

<p>Take the JSON you have, wrap it in &ldquo;eval()&rdquo; the same as you would if you where writing a web page (because it is just JavaScript after all) run it and every modern browser this was tested with should allow you to inspect the resulting data structure.</p>

<p>Example JSON:
<code>
{&ldquo;glossary&rdquo;:{&ldquo;title&rdquo;:&ldquo;example glossary&rdquo;,&ldquo;GlossDiv&rdquo;:{&ldquo;title&rdquo;:&ldquo;S&rdquo;,&ldquo;GlossList&rdquo;:{&ldquo;GlossEntry&rdquo;:{&ldquo;ID&rdquo;:&ldquo;SGML&rdquo;,&ldquo;SortAs&rdquo;:&ldquo;SGML&rdquo;,&ldquo;GlossTerm&rdquo;:&ldquo;Standard Generalized Markup Language&rdquo;,&ldquo;Acronym&rdquo;:&ldquo;SGML&rdquo;,&ldquo;Abbrev&rdquo;:&ldquo;ISO 8879:1986&rdquo;,&ldquo;GlossDef&rdquo;:{&ldquo;para&rdquo;:&ldquo;A meta-markup language, used to create markup languages such as DocBook.&rdquo;,&ldquo;GlossSeeAlso&rdquo;:[&ldquo;GML&rdquo;,&ldquo;XML&rdquo;]},&ldquo;GlossSee&rdquo;:&ldquo;markup&rdquo;}}}}}
</code></p>

<table>
<tr>
<td>
Firefox with Firebug:
<img src="/assets/firefoxjson-600x328.png">
</td>
</tr>
<tr>
<td>
Chrome:
<img src="/assets/chromejson-600x313.png">
</td>
</tr>
<tr>
<td>
Opera:
<img src="/assets/bhtAjti.png">
</td>
</tr>
<tr>
<td>
Internet Explorer 9:
Note: To see this structure you need to click the "Add watcher" link displayed upon running the code.
<img src="/assets/ie9json.png">
</td>
</tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix for Magento Admin Menus Disappearing in Opera]]></title>
    <link href="http://edmondscommerce.github.io/magento/fix-for-magento-admin-menus-disappearing-in-opera.html"/>
    <updated>2013-02-01T18:08:17+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/fix-for-magento-admin-menus-disappearing-in-opera</id>
    <content type="html"><![CDATA[<p>Users of Opera might find that mousing down menus makes them disappear from underneath the cursor, making for a very frustrating experience.</p>

<p>From searching round the internet I understand the problem to be around the onmousevent on the li elements. So instead of using these events to show and hide menus we can just use CSS (as it should be) to show and hide the menus.</p>

<p>Methods to add the CSS include a custom user stylesheet (Right-click > Edit Site Preferences > Display tab), or the Stylish extension. The CSS to add is very simple:</p>

<p>```</p>

<h1>nav li:hover > ul {</h1>

<p>  left:auto;
  z-index:999999;
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Useful features of the Opera Browser for Web Developers]]></title>
    <link href="http://edmondscommerce.github.io/opera/useful-features-of-the-opera-browser-for-web-developers.html"/>
    <updated>2012-11-09T16:42:34+00:00</updated>
    <id>http://edmondscommerce.github.io/opera/useful-features-of-the-opera-browser-for-web-developers</id>
    <content type="html"><![CDATA[<h2>1. Remotely debugging mobile websites using your Android phone</h2>


<p><img src="/assets/remotedebug-600x352.png"></p>

<p>
Dragonfly, Opera's answer to Firebug and Chrome's Developer Tools has a killer feature: it's able to let you use your local desktop to debug a page on another instance of Opera - including Opera Mobile
</p>


<p>
What this means is that all the benefits you get from inspecting elements on your desktop can be done on your Android phone. You can have the full array of debugging: inspecting specific elements, checking the CSS being applied to elements, changing the CSS in real time, and editing the HTML. You can even tap specific elements on your phone and they'll be selected in your desktop's Dragonfly instance.
</p>


<ol>
<li>1. Connect your phone to the same wifi network as your desktop/laptop</li>
<img src="/assets/RemoteConnect.png">
<li>3. On your phone open Opera Mobile and go to opera:debug in your URL bar</li>
<li>4. Enter your desktop's IP address or hostname and tap Connect</li>
<img src="/assets/tabselect.png">
</ol>




<h2>2. Separating and grouping local, staging and live tabs for the site</h2>


<p><img src="/assets/tabstackingannotated2-600x191.png"></p>

<p>
You know the situation - you have three different versions of the site in your tabs - some for local, some on staging and maybe some for the live site too. Keeping track of which is which can be difficult with them having the same favicon, title etc
</p>


<p>
Tab Stacking is a way of grouping your tabs in various ways, including grouping all your local, staging and live tabs into their own respective groups - avoiding the confusion of which tab belongs to which instance
</p>




<h2>3. Validating Local Web Pages In 2 Clicks</h2>


<p><img src="/assets/validate2.png"></p>

<p>
The W3C validator is the standard place to validate your web pages, but of course you can't pass in your local URL to the validator. The only option you have is to right-click > view source, select all and copy, open a new tab for the validator, select Direct Input and press Validate - phew!
</p>


<p>
There are of course extensions for this in Chrome and Firefox, but I'm not aware of any which allow you to use the official W3C validator
</p>


<p>
Opera's right-click context menu allows you to simply right-click any page and click Validate. Opera will then automatically post the rendered HTML to the Validator and give you instant results
</p>




<h2>4. Site-Specific Preferences</h2>


<p><img src="/assets/Site-specific-preferences-600x466.png"></p>

<p>
Sometimes you'll want to have different settings for websites you're currently working on - maybe you want to enable a more liberal cookie policy, or you want to show Flash content automatically only on sites you're developing.
</p>


<p>
For other browsers this means multiple instances of the browser, or installing addons. In Opera you can set up a whole array of configurations on a per-site basis by simnply right-clicking the page and selecting Edit Site Preferences
</p>




<h2>5. Cross Browser Testing made easy</h2>


<p><img src="/assets/OpenWith-600x79.png"></p>

<p>
Cross-browser testing is important. When developing a specific page it's often useful to open the page in an array of browsers to check that it's consistent across the board.
</p>


<p>
Opera automatically looks for other browsers installed on your system and gives you quick access to opening the current URL in them. Simply right-click your page, select Open With and then pick your browser. Opera will then launch an instance of the selected browser already landed on the right page.
</p>

]]></content>
  </entry>
  
</feed>
