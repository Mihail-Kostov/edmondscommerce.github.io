<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: configuration | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/configuration/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-06T19:10:15+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Magento Database Migrations to Track Configuration Changes]]></title>
    <link href="http://edmondscommerce.github.io/magento/using-magento-database-migrations-to-track-configuration-changes.html"/>
    <updated>2013-05-21T09:11:44+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/using-magento-database-migrations-to-track-configuration-changes</id>
    <content type="html"><![CDATA[<p>Often when working on a Magento site, there is a requirement to build custom functionality or implement new themes etc but to finish the job, the final step will be to perform some admin configuration.</p>

<p>This manual step can introduce the possiblity of human error if a step is missed or not performed exactly correctly.</p>

<p>Also if the configuration is to be applied multiple times across staging, pre production and final production then these risks increase.</p>

<p>The only sure way to make sure that the correct configuration is applied and also to provide a proper audit trail for configuration changes is to use Magento&rsquo;s database migrations &ndash; install and upgrade scripts &ndash; to update the database programmatically with the required configuration changes.</p>

<p>To assist with this, there is a nice simple module you can find on Git Hub:</p>

<p><a href="https://github.com/danslo/MigrationHelper"><a href="https://github.com/danslo/MigrationHelper">https://github.com/danslo/MigrationHelper</a></a></p>

<p>This module will automatically create the migration files for you which can be a real time saver.</p>

<p>I would always suggest you create your own custom namespaced configuration migration module that is purely to track these configuration changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running PHP Scripts as Apache or a Shell User]]></title>
    <link href="http://edmondscommerce.github.io/linux/running-php-scripts-as-apache-or-a-shell-user.html"/>
    <updated>2012-08-14T14:05:32+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/running-php-scripts-as-apache-or-a-shell-user</id>
    <content type="html"><![CDATA[<p>If you have PHP scripts that need to be able to run via the web server as Apache and also be runnable directly on the command line then you may run into permissions issues, especially if those scripts are doing anything with files.</p>

<p>The scenario is that you run the script via the webserver and all of the files etc that are created are owned by Apache. Then you try to run on the command line and the script cannot run because it does not have permission to access Apache&rsquo;s files. The opposite scenario is also true.</p>

<p>There are a few possible solutions to this but the most elegant and simple is to do the follwing.</p>

<p>Assuming you are running Centos, you first of all need to set Apache to run with a umask of 002. This means that files it creates will have read/write permissions for the Apache group as well as the Apache user.</p>

<p>To do this, simply add a line to the file /etc/sysconfig/httpd. You can do this in one command like this:</p>

<p>```bash</p>

<p>echo &ldquo;umask 002&rdquo; >> /etc/sysconfig/httpd</p>

<p>```</p>

<p>Then you need to restart Apache to apply this.</p>

<p>```bash</p>

<p>service httpd restart</p>

<p>```</p>

<p>You then need to add your shell user to the apache group. To do this you need to do the following:</p>

<p>```bash</p>

<p>vigr</p>

<p>```</p>

<p>Then find the line with your shell user and at the end add a comma and the word apache. This will add that user to the apache group along with it&rsquo;s own group.</p>

<p>You will get a prompt to also edit etc/shadow. Agree to this and repeat the process.</p>

<p>You will then need to log out and log back in to apply those changes and that should resolve your permissions issues for good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Performance Problems]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-performance-problems.html"/>
    <updated>2012-04-16T08:56:48+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-performance-problems</id>
    <content type="html"><![CDATA[<p>If you are having performance issues with your Magento store and you are running on a dedicated or VPS server that you think should be up to the task of running your store properly but you continue to have performance problems then this post is for you.</p>

<p>Having decent server specification is only the first step on the road to having a high performance Magento store. Without proper configuration your server is not going to make the best use of its resources and that could make the difference of literally seconds or even tens of seconds of page load time.</p>

<p>The first and most important thing to check is that you are running a PHP opcode cacher such as APC. Opcode caching takes your PHP source code and compiles it to opcodes and then stores this in a cache. This opcode is actually what is run when people visit your store and the process of creating it, especially if you have a very large application with lots of file (like Magento), can be a real performance bottleneck. This problem is easily resolved by having APC installed and configured. If you are not sure, ring your hosting company and find out and if you don&rsquo;t have it running, ask them to set it up for you.</p>

<p>The next thing to check is MySQL configuration. The standard MySQL configuration defaults were set when server hardware and memory was a tiny fraction of what it is today and that means that the configuration is generally way too sparse with allocation of memory for caching and other optimisations. Tweaking MySQL can be a little tricky, its definitely not something you should do if you are not sure, but it is well worth getting someone to optimise your MySQL configuration.</p>

<p>After that, the next major performance gain with Magento is to make proper use of block caching. Magento has a brilliant built in feature where every block (page section) can be cached so that next time someone visits the page, the logic used to generate that section of page (for example a best sellers list) does not have to be run, we simply redisplay the cached copy of that block&rsquo;s HTML.</p>

<p>Beyond these three steps there are still many more things that can be done to improve the performance of your Magento store. If you would like professional help getting the best out of your server and Magento with a view to getting the lowest possible page load speeds then get in touch with Edmonds Commerce today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Catalog Prices Include Tax Not Working]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-catalog-prices-include-tax-not-working.html"/>
    <updated>2012-01-10T16:47:32+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-catalog-prices-include-tax-not-working</id>
    <content type="html"><![CDATA[<p>Magento will some times not treat catalogue prices as tax inclusive even if configured to do so. There can be a number of reasons for it but usually it&rsquo;s because the origin address is not configured correctly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grass Seed Store - Migration from OSCommerce]]></title>
    <link href="http://edmondscommerce.github.io/portfolio/grass-seed-store-migration-from-oscommerce.html"/>
    <updated>2011-06-09T16:53:49+01:00</updated>
    <id>http://edmondscommerce.github.io/portfolio/grass-seed-store-migration-from-oscommerce</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<h2>Grass Seed Store â€“ Migration from OSCommerce with Custom Functionality</h2>


<p>The Grass Seeds Store wants to migrate away from OSCommerce to Magento in order to improve stock management. They also need to maintain DEFRA compliance and have custom reports generated to do so. The custom reporting was based on the sales of seeds.</p>

<h3>The Grass Seed Store</h3>


<p>The Grass Seed Store specialises in the sale of a many different types of <a href="http://www.thegrassseedstore.co.uk/">grass seed, fertiliser and live stock pasture</a>.</p>

<p><img src="/assets/grassseed-300x205.png"></p>

<p>This project is a great example of customising Magento to be compliant with an industry governing body and shows that Magento can be used in almost any for the sale of any type of product. The project is currently a work in progress and the Magento implementation is currently only a wire frame demonstrating the functionality that is ultimately required.</p>
]]></content>
  </entry>
  
</feed>
