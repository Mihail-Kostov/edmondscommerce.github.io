<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: edmondscommerce | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/edmondscommerce/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-02-07T18:59:40+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up a Fedora 19 based PHP Development Installation]]></title>
    <link href="http://edmondscommerce.github.io/fedora/setting-up-a-fedora-19-based-php-development-installation.html"/>
    <updated>2013-10-31T10:25:52+00:00</updated>
    <id>http://edmondscommerce.github.io/fedora/setting-up-a-fedora-19-based-php-development-installation</id>
    <content type="html"><![CDATA[<p>I have decided to switch from Debian/Ubuntu/Mint which has served me very well over the last few years and move towards more of a RedHat based distribution as it seems that servers these days are more commonly CentOS or RedHat based and I always like to keep my development environment as close as I can to the server environment for all kinds of reason.</p>

<p>Also, I have decided that I really quite like Gnome Shell and it makes sense to pick a distribution that is properly bundled with Gnome Shell rather than bolting it into a distro after installation.</p>

<h3>1. Install Apache and PHP 5.5</h3>


<p>You need to become root first, stay as root for the rest of the steps.</p>

<p>```bash</p>

<p>su
rpm -Uvh <a href="http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm">http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm</a>
rpm -Uvh <a href="http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm">http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm</a>
rpm -Uvh <a href="http://rpms.famillecollet.com/remi-release-19.rpm">http://rpms.famillecollet.com/remi-release-19.rpm</a>
yum &mdash;enablerepo=remi install httpd php php-common
yum &mdash;enablerepo=remi install php-pecl-apc php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongo php-sqlite php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml</p>

<p>```</p>

<h3>2. Set that to start up automatically (you are going to be developing none stop right?)</h3>


<p>```bash</p>

<p>service httpd start
systemctl enable httpd.service</p>

<p>```</p>

<h3>3. Create a test PHP file to confirm thats all working</h3>


<p>Extra bit here, install <a href="http://vim.spf13.com/" target="_blank">this version of Vim</a>, its quite tasty:
```bash</p>

<p>curl <a href="http://j.mp/spf13-vim3">http://j.mp/spf13-vim3</a> -L -o &ndash; | sh</p>

<p>```</p>

<p>Now create your PHP file:
```bash</p>

<p>vim /var/www/html/test.php</p>

<p><code>
May as well just throw a phpinfo() in there
</code>php</p>

<p>&lt;?php
phpinfo();</p>

<p>```
And now check it: <a href="http://localhost/test.php"><a href="http://localhost/test.php">http://localhost/test.php</a></a></p>

<h3>4. Finally lets get a MySQL version installed. Lets choose MariaDB</h3>


<p>I tried Percona but it does not have a proper Fedora version. Then I discovered that Fedora have adopted MariaDB which is fine by me, lets go with the flow:</p>

<p>```bash</p>

<p>yum install mariadb mariadb-server
systemctl start mysqld.service
systemctl enable mysqld.service
/usr/bin/mysql_secure_installation</p>

<p>```</p>

<p>And that&rsquo;s it, next up is getting Java and PhpStorm installed and also phpMyAdmin</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Backorder Message on Magento's Product Page]]></title>
    <link href="http://edmondscommerce.github.io/magento/ssssssssssssss.html"/>
    <updated>2013-08-29T15:37:37+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/ssssssssssssss</id>
    <content type="html"><![CDATA[<p>Magento&rsquo;s use of backorders does notify the customer, but only once you actually reach the basket page, which can lead to disappointment and frustration from the customer. The better answer is to display this on the product page, in place of the &ldquo;In Stock&rdquo; message.</p>

<p>To acheive this, we just need to amend (read: override) the templates at</p>

<p>app/design/frontend/base/default/template/catalog/product/view/type/simple.phtml
app/design/frontend/base/default/template/catalog/product/view/type/grouped.phtml
app/design/frontend/base/default/template/catalog/product/view/type/configurable.phtml</p>

<p>And amend it to look like this:</p>

<p>```php</p>

<p>&lt;?php $<em>product = $this->getProduct() ?>
&lt;?php echo $this->getPriceHtml($</em>product) ?>
&lt;?php $stockLevel = (int)Mage::getModel(&lsquo;cataloginventory/stock_item&rsquo;)&ndash;>loadByProduct($_product)&ndash;>getQty(); ?></p>

<p>&lt;?php if($_product->isSaleable()<strong> &amp;&amp; $stockLevel > 0</strong>): ?></p>

<pre><code>&lt;p class="availability in-stock"&gt;&lt;?php echo $this-&gt;__('Availability:') ?&gt; &lt;span&gt;&lt;?php echo $this-&gt;__('In stock') ?&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre>

<p>&lt;?php elseif($_product->isSaleable() &amp;&amp; $stockLevel &lt;= 0): ?></p>

<pre><code>&lt;p class="availability in-stock"&gt;
    &lt;?php echo $this-&gt;__('Availability:') ?&gt; &lt;span&gt;&lt;?php echo $this-&gt;__('Available for Backorder') ?&gt;&lt;/span&gt;&lt;br /&gt;
    &lt;?php echo $this-&gt;__('Please allow up to two weeks for delivery') ?&gt;
&lt;/p&gt;
</code></pre>

<p>&lt;?php else: ?></p>

<pre><code>&lt;p class="availability out-of-stock"&gt;&lt;?php echo $this-&gt;__('Availability:') ?&gt; &lt;span&gt;&lt;?php echo $this-&gt;__('Out of stock') ?&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre>

<p>&lt;?php endif; ?></p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[13 Practices for Highly Effective Email Marketing]]></title>
    <link href="http://edmondscommerce.github.io/ecommerce/13-best-practices-to-highly-effective-newsletter.html"/>
    <updated>2013-05-30T11:52:30+01:00</updated>
    <id>http://edmondscommerce.github.io/ecommerce/13-best-practices-to-highly-effective-newsletter</id>
    <content type="html"><![CDATA[<p>Each email email must have specific and measurable goals defined. For example &ndash; to read an article, sell a product or sign up for an event. It&rsquo;s a Call to Action, a short but precise message which tells the recipient exactly what to do &ndash; no more, no less. The Call to Action is one of the most important email email elements; therefore it must be noticeable and inviting. This article will cover best practices on how to create a highly effective email.</p>

<p>If you are not sure on how to create a highly effective email that converts customers in to a successful sales leads, then here are the basic questions you need to ask yourself:</p>

<ul>
    <li>What I want my recipients to do?</li>

    <li>How will they know how to do it?</li>

    <li>How will they benefit from doing what I want?</li>
</ul>


<p>It sounds dead easy, but it&rsquo;s not that simple, because you don&rsquo;t want to scare away your customers with an overly insisting tone. On the other hand, if you don&rsquo;t give your recipient clear guidance on what to do it is most likely they will not do it.</p>

<p>Here are the core principles on how to create a highly effective email:</p>

<h3>1. The value of the email</h3>


<p>Your Call To Action must clearly communicate the benefits that the customer will receive. Benefits must be clearly visible, order them by priority.</p>

<h3>2. Use simple and convincing language</h3>


<p>Remember that your recipients are wise and most likely &ndash; very busy people. Therefore make the message as clear and simple as possible. Don&rsquo;t make their lives more complicated by using complex language and long paragraphs. Ease their decision and make the choice simple.</p>

<h3>3. Make the email urgent and limited</h3>


<p>When the message is urgent and somehow limited (for first 50 respondents or while product is in stock, etc), people are more motivated to act. Use words like Now, Today, Only, Limited, etc. Say why they must act now, explain the benefits.</p>

<h3>4. Catchy headlines</h3>


<p>Web users read by scanning the headlines, therefore they must be short, but catchy. The main point regarding the headline is not to sell the product (if you sell one), but to engage recipient to read the content of the email.</p>

<h3>5. Use numbers and make them meaningful</h3>


<p>Numbers deliver a clear message, they create an impression. However, numbers alone are meaningless, use them in context. For example, 4Gb of music storage is meaningless, say how many songs it can carry. Feel free to break it down even further.</p>

<h3>6. Ask questions</h3>


<p>Questions are great for attention grabbing. Especially, when you send a targeted email, you most likely know your audience and you know what they need. Make sure you ask. For example &ndash; Is your laptop too heavy? And follow with an immediate solution. Create questions so they are intriguing and recipients want to know more.</p>

<h3>7. Less is more. (Yes)</h3>


<p>Don&rsquo;t include too many Call To Actions. Don&rsquo;t over fill the email with products or offers. It is very easy for the recipient to get lost if there are too many adverts.</p>

<h3>8. Call To Action placement</h3>


<p>Remember to place your Call To Action in a highly visible location. If you have multiple Calls to Action make sure that the supporting information is clearly grouped. The primary message has to be as close to the top as possible with supporting information or offers taking position below the fold.</p>

<h3>9. Related design and style</h3>


<p>Your email email need to use represent your company and branding. Don&rsquo;t try to use different design, colours and overall style in your email. Recipients remember who you are (or at least they should), changing email design will only bring in confusion and most likely dramatically reduce the conversions.</p>

<h3>10. Use a consistent layout</h3>


<p>Your email must be well organized and content should be prioritized. Do this by placing elements within the layout. Once your email design is created, stick to it. Don&rsquo;t try to use different sizes and colours, unless you are testing various variations for better conversion rates.</p>

<h3>11. Use white space</h3>


<p>White space is good. It&rsquo;s not unused sales place. It actually helps the recipient to focus more on the proposal without distraction.</p>

<h3>12. Send relevant content to the right audience</h3>


<p>Emails shouldn&rsquo;t be generic. Most mistakes are made when a proposal is created that is very generic and sent out to everyone &ndash; it can apply to everybody on your list or none at all. Make sure that you know your audience and you send offers that are relevant to them. This can be done by automatically grouping customers by what they&rsquo;ve browsed or bought recently. This is normally called List Segmentation for example only emailing people who have bought a blue widget in the last six months.</p>

<h3>13. Don't send for the sake of it</h3>


<p>Add value to your emails. Send offers that are really beneficial to the target customer. Make them anticipate your offer. If you send overly frequent and generic emails, you risk simply loosing subscribers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting a Magento Store Design Programatically in Installer using PHP]]></title>
    <link href="http://edmondscommerce.github.io/magento/setting-a-magento-store-design-programatically-in-installer-using-php.html"/>
    <updated>2013-03-18T12:13:21+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/setting-a-magento-store-design-programatically-in-installer-using-php</id>
    <content type="html"><![CDATA[<p>I needed to set up a design change for a new store which I was programatically creating. One aspect which I was still doing manually was the design change. Lots of tutorials on the web suggest how to accomplish this in the Admin, but this wasn&rsquo;t what I was after.</p>

<p>I&rsquo;ve done this by updating the store&rsquo;s config as shown below. Hope it helps someone out there too</p>

<p>```php</p>

<p>$config = new Mage_Core_Model_Config();
$config->saveConfig(&lsquo;design/theme/template&rsquo;, <store name>, &lsquo;websites&rsquo;, storeId);
$config->saveConfig(&lsquo;design/theme/layout&rsquo;, <store name>, &lsquo;websites&rsquo;, storeId);
$config->saveConfig(&lsquo;design/theme/skin&rsquo;, <store name>, &lsquo;websites&rsquo;, storeId);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Upgrade to 1.7, Fix for Sales Order Tab Contents in Left Sidebar]]></title>
    <link href="http://edmondscommerce.github.io/php/magento-upgrade-to-1-7-fix-for-sales-order-tab-contents-in-left-sidebar.html"/>
    <updated>2012-10-15T14:44:29+01:00</updated>
    <id>http://edmondscommerce.github.io/php/magento-upgrade-to-1-7-fix-for-sales-order-tab-contents-in-left-sidebar</id>
    <content type="html"><![CDATA[<p>If following an upgrade to Magento 1.7 you&rsquo;re having a problem that the Sales Order View tab contents are stuck in the sidebar (see below) you&rsquo;re likely ripping your hair out as to why this is happening
<img src="/assets/Sales-Order-View-Problem-502x600.png"></p>

<p>In the page you&rsquo;ll find a line of Javascript:
<code>sales_order_view_tabsJsTabs = new varienTabs(&lsquo;sales_order_view_tabs&rsquo;, &lsquo;sales_order_view&rsquo;, &lsquo;sales_order_view_tabs_order_info&rsquo;, []);</code></p>

<h2>The problem</h2>


<p>This is the javascript which renders the tabs on the page, moving the tab contents to the main content area once the page has loaded. The second parameter here is the destination element. The issue I was having was that the element with the id &lsquo;sales_order_view&rsquo; wasn&rsquo;t in the HTML. This div is contained in app/design/adminhtml/default/default/template/sales/order/view/form.phtml, but this wasn&rsquo;t being loaded.</p>

<h3>The solution</h3>


<p>In my case this was a code/local overridden core class Mage_Sales_Model_Order. In Magento 1.7 the method canReorder() has been renamed to canReorderIgnoreSalable(). Renaming the overridden method fixed my problem</p>
]]></content>
  </entry>
  
</feed>
