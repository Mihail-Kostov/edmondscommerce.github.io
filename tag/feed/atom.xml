<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: feed | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/feed/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-02T19:56:22+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS + Sun Java + Amazon AMTU 2]]></title>
    <link href="http://edmondscommerce.github.io/amazon/centos-sun-java-amazon-amtu-2.html"/>
    <updated>2012-08-14T17:33:31+01:00</updated>
    <id>http://edmondscommerce.github.io/amazon/centos-sun-java-amazon-amtu-2</id>
    <content type="html"><![CDATA[<p>In a follow up to our popular blog post describing the process of getting AMTU 1 set up on a Centos server, this post describes how to get the latest version 2 of AMTU running.</p>

<p>Things have moved on and thankfully it is a lot easier than it was.</p>

<p>Firstly get Sun Java installed. You will need to get the URL for downloading the RPM from here:
<a href="http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1637588.html">http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1637588.html</a></p>

<p>Accept the agreement, download the correct RPM version and then pause it. Copy the download URL and paste it into this command:
```bash</p>

<p>cd /tmp
wget [paste-url]-here]
rpm &ndash; jre [hit tab to complete]</p>

<p>```</p>

<p>Now check the correct java version is being used:</p>

<p>```bash</p>

<p>java -version</p>

<p>```</p>

<p>You should get something looking like:</p>

<p>```</p>

<p>[root@94 tmp]# java -version
java version &quot;1.7.0_05&quot;
Java&trade; SE Runtime Environment (build 1.7.0_05-b06)
Java HotSpot&trade; 64-Bit Server VM (build 23.1-b03, mixed mode)</p>

<p>```</p>

<p>Now you can install AMTU</p>

<p>```bash</p>

<p>wget <a href="https://d28hcfptedr5ia.cloudfront.net/install/AMTU_unix.sh">https://d28hcfptedr5ia.cloudfront.net/install/AMTU_unix.sh</a>
chmod +x AMTU_unix.sh
./AMTU_unix.sh</p>

<p>```</p>

<p>Keep hitting enter to get to the bottom of the terms and then agree, agree to all the other options. That is AMTU installed.</p>

<p>The final step is to configure this using the CLI configure utitlity.</p>

<p>You need to create an xml file for the AMTU configuration. You can see a sample file in /opt/amtu/xml/sample.xml.</p>

<p>Lets copy that file and then edit it accordingly.</p>

<p>```bash</p>

<p>cd /opt/amtu/xml
cp sample.xml configuration.xml
vim configuration.xml</p>

<p>```</p>

<p>You do need to be signed up for MWS to get some of the keys etc that are required. If not already, go to this page and hit the sign up button.
<a href="https://developer.amazonservices.co.uk/index.html">https://developer.amazonservices.co.uk/index.html</a></p>

<p>Once you have updated the XML configuration you run this command to apply it:
```bash</p>

<p>/opt/amtu/Utilities/configure SETUP /opt/amtu/xml/configuration.xml</p>

<p>```</p>

<p>If you get some error messages at this point, edit the configuration and try again. Once you have the configuration set you can start the daemon.</p>

<p>```bash</p>

<p>/opt/AMTU/Utilities/amtu_daemon start</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Force Download with Custom Filename]]></title>
    <link href="http://edmondscommerce.github.io/php/php-force-download-with-custom-filename.html"/>
    <updated>2012-01-23T15:22:03+00:00</updated>
    <id>http://edmondscommerce.github.io/php/php-force-download-with-custom-filename</id>
    <content type="html"><![CDATA[<p>If you want to serve up text files for download (perhaps product feeds etc) then you might like this little snippet.</p>

<p>Not only will it force the file to be downloaded but it allows you to specify a custom filename that it should be saved as.</p>

<p>```php</p>

<p>if(isset($_GET[&lsquo;download_file&rsquo;])){</p>

<pre><code>header("Content-type: application/octet-stream");
header("Content-Disposition: attachment; filename=Export.txt");
readfile('Export.txt');
die;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Merchant Centre/Froogle/Google Shopping/Base Changes, Problems and Solutions]]></title>
    <link href="http://edmondscommerce.github.io/ecommerce/google-merchant-centrefrooglegoogle-shoppingbase-changes-problems-and-solutions.html"/>
    <updated>2011-10-11T17:05:20+01:00</updated>
    <id>http://edmondscommerce.github.io/ecommerce/google-merchant-centrefrooglegoogle-shoppingbase-changes-problems-and-solutions</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>So now that everyone uses Google Shopping, Google are making life difficult for the merchants and they all have to jump through hoops.</p>

<p>The current push from Google is enforcing some things that are very difficult for small companies to conform with :&ndash;</p>

<p><strong> * EAN Numbers</strong> &ndash; This is the BIG one, Google are making EAN Numbers required &ndash; for some retailers, they just don&rsquo;t exist, and for a lot of older or cheaper shopping cart systems, they don&rsquo;t have anywhere to enter them.
<strong> * Google Category</strong> &ndash; This is a fairly obvious one, they are attempting to enable shoppers to browse products and find a motherboard for instance with a 1156 socket rather than a CPU that fits an 1156 socket.  The answer is to add an extra field to a site&rsquo;s category system to map site categories to Google categories, or to restructure your products into google&rsquo;s categorisations.
<strong> * Product Images</strong> &ndash; Google are making this mandatory as well, which most people are getting round by using stock or illustration-only images.
<strong> * Availability</strong> &ndash; This one actually helps retailers, putting orderable products that are out of stock in front of customers, and is a small change to most scripts exporting to Google</p>

<p>The above changes are being phased in now but should your feed suddenly stop working, how big is the impact on your business?  Whilst some of the changes are little tweaks, such as the availability flag, others require fairly substantial changes in the back-end of many cart systems.  We are getting many aggrieved businesses contacting us asking for fast turnaround on their Google products feed as they are loosing money all the time that Google are rejecting their products.</p>

<p>What normally (given past changes) has been little tweaks for feeds to be compatible has lately become hours and hours of work both on developers and store-owners.  Are you ready to jump through the latest burning hoop Google is holding out for you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PHP to Stream SQL results dynamically as CSV, even to IE]]></title>
    <link href="http://edmondscommerce.github.io/php/using-php-to-stream-sql-results-dynamically-as-csv-even-to-ie.html"/>
    <updated>2011-06-06T10:49:46+01:00</updated>
    <id>http://edmondscommerce.github.io/php/using-php-to-stream-sql-results-dynamically-as-csv-even-to-ie</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>If you want to offer a csv feed and want the results to be on demand and like the idea of avoiding messing about righting to files on the server etc, you might like this little manuever.</p>

<p>You will notice I&rsquo;m using a non standard db_query function, just assume that this does all the sensible stuff it should.</p>

<p>Also the query needs to be modified to suit.</p>

<p>The trick is writing to PHP&rsquo;s built in php://output stream which is basically just STDOUT.</p>

<p>Note the headers which are specifically required to get IE to accept the file as a download. Other browsers will accept less headers but will also work fine with these.</p>

<p>```php</p>

<p>header(&ldquo;Pragma: public&rdquo;);
header(&ldquo;Expires: 0&rdquo;);
header(&ldquo;Cache-Control: must-revalidate, post-check=0, pre-check=0&rdquo;);
header(&ldquo;Cache-Control: private&rdquo;, false);
header(&ldquo;Content-Type: application/octet-stream&rdquo;);
header(&ldquo;Content-Disposition: attachment; filename=\"file.csv\&rdquo;;&ldquo;);
header("Content-Transfer-Encoding: binary&rdquo;);</p>

<p>$outstream = fopen(&ldquo;php://output&rdquo;, &lsquo;w&rsquo;);</p>

<p>$sql = &ldquo; select * from a_table&rdquo;;
$q = db_query(&ldquo;$sql&rdquo;);</p>

<p>$header = false;
while ($r = mysql_fetch_assoc($q)) {</p>

<pre><code>if (!$header) {
    fputcsv($outstream, array_keys($r));
    $header = true;
}
fputcsv($outstream, $r);
</code></pre>

<p>}
fclose($outstream);</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
