<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: module | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/module/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-11-12T14:02:06+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending a Modules CSS within a Theme in PrestaShop]]></title>
    <link href="http://edmondscommerce.github.io/prestashop/extending-a-modules-css-within-a-theme-in-prestashop.html"/>
    <updated>2012-11-28T17:26:39+00:00</updated>
    <id>http://edmondscommerce.github.io/prestashop/extending-a-modules-css-within-a-theme-in-prestashop</id>
    <content type="html"><![CDATA[<p>PrestaShop has a really nice structure for handling all the CSS that will appear in a site. It starts by splitting the CSS so that the CSS is split up per modules. There is a global CSS sheet but this should only be used for things that genuinely appear on all pages.</p>

<p>Extending the CSS of a module in PrestaShop is easy. All you need to do is create a CSS file that matches the naming convention of the module you are looking to extend.</p>

<p>For example if you wanted to change the CSS of the “Wishlist block” module (a.k.a. blockwishlist) in your theme, you would create the file themes/mytheme/css/modules/blockwishlist/blockwishlist.css. This file will then be included on every page that the CSS from the blockwishlist module appears on.</p>

<p>This system is good because it minimises the amount of CSS the browser has to load and also splits the concern of CSS into separate files making it much easier to manage. It also makes adding to a modules CSS with in a theme much easier.</p>

<p>One problem with this method of handling CSS is that by default a PrestaShop site may want the browser to download ten or more individual CSS files which is quite a overhead. Fortunately since PrestaShop 1.4 it has supported CCS merging (referred to as CCC in the admin) which causes the CSS for a page to be merged into a single file on the server to prevent the client having to download tens of CSS files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paypoint Magento Modules Vanished into Thin Air!]]></title>
    <link href="http://edmondscommerce.github.io/magento/paypoint-magento-modules-vanished-into-thin-air.html"/>
    <updated>2012-08-28T16:23:49+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/paypoint-magento-modules-vanished-into-thin-air</id>
    <content type="html"><![CDATA[<p>It appears that all the paypoint (formally secpay) modules have vanished from the magento connect site.</p>

<p>This is a pain for a lot of people who have chosen the gateway to service their payments, and leaves two options for most people :&ndash;</p>

<ul>
    <li>* Choose a different provider</li>
    <li>* Get a custom module written</li>
</ul>


<p>As Magento developers we&rsquo;re happy to quote for the latter option, but we expect a lot of people will go for the former.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Controller Action Return Json (for AJAX, API etc)]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc.html"/>
    <updated>2012-02-15T14:15:01+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc</id>
    <content type="html"><![CDATA[<p>If you have a controller action that is designed to be accessed by AJAX requests or perhaps as part of a custom API system then you might like this snippet.</p>

<p>If you are working with the above scenario you likely would like to return pure JSON without any HTML etc. Also serving up the correct content type headers is going to be helpful, its not HTML, its JSON.</p>

<p>```php</p>

<pre><code>public function searchAction(){
    $query = $this-&gt;getRequest()-&gt;getParam('query');
    $json = Mage::getModel('mymodule/mymodel')-&gt;getSearchJson($query);
    $this-&gt;getResponse()-&gt;setHeader('Content-type', 'application/json');
    $this-&gt;getResponse()-&gt;setBody($json);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Transactional Email Codes - Custom Emails]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-transactional-email-codes-custom-emails.html"/>
    <updated>2011-02-10T13:57:50+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-transactional-email-codes-custom-emails</id>
    <content type="html"><![CDATA[<p>If you need to send some custom emails as part of a custom Magento module development project, you will stumble into the Magento email template system and its confusing mixture of XML requirements.</p>

<p>Rather than go into too much detail here are some pointers about how to achieve what you want to do.</p>

<ol>
<li>You need to set up your admin options in your system.xml file.</li>
</ol>


<p>I&rsquo;m not going to go into the details on how to set up custom admin configuration, for that try <a href="http://www.magentocommerce.com/wiki/5_-_modules_and_development/admin/xml_structure_for_admin_configurations">here</a>.</p>

<p>Lets assume you have a custom module under the xml path:</p>

<p>config/sections/custom_module/groups/email/template</p>

<p>that section should look something like this:</p>

<p>```xml</p>

<p><template translate="label"></p>

<pre><code>&lt;label&gt;Custom Email Template&lt;/label&gt;
&lt;frontend_type&gt;select&lt;/frontend_type&gt;
&lt;source_model&gt;adminhtml/system_config_source_email_template&lt;/source_model&gt;
&lt;sort_order&gt;2&lt;/sort_order&gt;
&lt;show_in_default&gt;1&lt;/show_in_default&gt;
&lt;show_in_website&gt;1&lt;/show_in_website&gt;
&lt;show_in_store&gt;1&lt;/show_in_store&gt;
</code></pre>

<p></template></p>

<p>```</p>

<p>You need to set your default value in your config.xml file (inside the root config tag)
```xml</p>

<p> <!-- DEFAULTS For Admin System Configuration //--></p>

<pre><code>&lt;default&gt;
    &lt;custom_module&gt;
        &lt;email&gt;
            &lt;enabled&gt;1&lt;/enabled&gt;
            &lt;template&gt;custom_module_email_template&lt;/template&gt;                
            &lt;identity&gt;sales&lt;/identity&gt;
        &lt;/email&gt;
    &lt;/custom_module&gt;
&lt;/default&gt;
</code></pre>

<p>```</p>

<p>Now you also need to define your email template, which goes inside the config/global/ node</p>

<p>```xml</p>

<pre><code>   &lt;!-- EMAIL TEMPLATE //--&gt;
    &lt;template&gt;
        &lt;email&gt;
            &lt;custom_module_email_template translate="label" module="appliedsb"&gt;
                &lt;label&gt;Custom Template&lt;/label&gt;
                &lt;file&gt;appliedsb/download_links.html&lt;/file&gt;
                &lt;type&gt;html&lt;/type&gt;
            &lt;/custom_moduel_email_template&gt;
        &lt;/email&gt;
    &lt;/template&gt;
</code></pre>

<p>```</p>

<p>And then you need to make sure you put the email template inside the locale folder, en_us (or other locales as needed).</p>

<p>Now you need to clear cache and I recommend resaving the custom configuration group in the admin and double check that your Custom Template label is appearing properly in the email templates dropdown for your module.</p>

<p>And that should be it, your module now has a custom email template that has a locale file and is also over rideable with Magento&rsquo;s own transactional emails system &ndash; sweet!</p>

<p>If you get the exception <strong>Invalid transactional email code:</strong> then double check that all your xml nodes match up and that the locale file is in the correct place, clear your cache, resave the admin config and try again. This bug can be tricky to track down but if you respect the above xml and file layout it should all work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Template Path Hints - In Admin!]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-template-path-hints-in-admin.html"/>
    <updated>2010-09-25T10:37:22+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-template-path-hints-in-admin</id>
    <content type="html"><![CDATA[<p>If you love template path hints in Magento for quickly figuring out which template file or block you need to edit or override and have a requirement for some admin side coding, you are going to love this.</p>

<p>You might not have thought it was possible to enable template path hints in admin, but it is!</p>

<p>Just run this query:</p>

<p>```sql</p>

<p>INSERT INTO core_config_data (scope, scope_id, path, value)
VALUES (&lsquo;default&rsquo;, 0, &lsquo;dev/debug/template_hints&rsquo;, 1),
(&lsquo;default&rsquo;, 0, &lsquo;dev/debug/template_hints_blocks&rsquo;, 1);</p>

<p>```</p>

<p>To disable them again, run this query
```sql</p>

<p>UPDATE core_config_data set value = 0 where scope = &lsquo;default&rsquo; and scope_id = 0 and path =&lsquo;dev/debug/template_hints&rsquo;</p>

<p>```</p>

<p>To enable again run this query
```sql</p>

<p>UPDATE core_config_data set value = 1 where scope = &lsquo;default&rsquo; and scope_id = 0 and path =&lsquo;dev/debug/template_hints&rsquo;</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
