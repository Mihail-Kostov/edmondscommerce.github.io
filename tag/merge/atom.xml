<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: merge | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/merge/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-04-24T19:57:05+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clean Up Meld Files when Git Merging]]></title>
    <link href="http://edmondscommerce.github.io/git/clean-up-meld-files-when-git-merging.html"/>
    <updated>2014-01-29T11:39:19+00:00</updated>
    <id>http://edmondscommerce.github.io/git/clean-up-meld-files-when-git-merging</id>
    <content type="html"><![CDATA[<p>If you do a Git Merge using Meld (a brilliant Linux diff tool) then you might find that there are a bunch of files created that you need to clear up.</p>

<p>These files will be copies of the merged files and can be safely removed as everything you should need to know is already in Git.</p>

<p>I wrote the following quick function to find all of these files and remove them. You could add this as a function to your bashrc file if you need to do this regularly.</p>

<p>Here is the BASH snippet:</p>

<p><code>bash
git status -su | grep -P "\.BACKUP|BASE|LOCAL|REMOTE\." | cut -f2 -d" " | xargs rm
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merging Forks for Composer]]></title>
    <link href="http://edmondscommerce.github.io/composer/merging-forks-for-composer.html"/>
    <updated>2013-12-05T19:53:16+00:00</updated>
    <id>http://edmondscommerce.github.io/composer/merging-forks-for-composer</id>
    <content type="html"><![CDATA[<p>I am really enjoying using Composer with a Symfony2 project that I am currently working on.</p>

<p>Recently though I found an issue where I am using the FOSRest Bundle to provide JSON API functionality. This in turn uses the
JMS/SerializerBundle to handle the actual encoding into JSON.</p>

<p>The problem is that the JMS bundle converts camelCase to snake_case and I decided I really didn&rsquo;t want that. I want my property and entity names to be the same across formats.</p>

<p>A bit of digging and I found <a href="https://github.com/passkey1510/JMSSerializerBundle">this fork</a> which features a fix for exactly this problem, brilliant!</p>

<p>However on trying to get this to install with Composer I simply could not get it to work. Further investigation shows that the version of the JMS bundle that this fork does not meet
the minimum version requirements of the FOSRest bundle. Problem.</p>

<p>The solution in the end was to fork the JMSSerializerBundle Directly then pull this down locally. Once I had that locally I then added the fork with the fix I need as another remote:</p>

<p><code>
git remote add passkey1510 git@github.com:passkey1510/JMSSerializerBundle.git
git merge remote/passkey1510/master
git push
</code></p>

<p>Those three commands added the other fork as another remote allowing me to pull in the commits that feature the fix I need. Finally I pushed this back up to github.</p>

<p>I can now reference my fork in my composer.json file like this:</p>

<p>```
&ldquo;repositories&rdquo;: [</p>

<pre><code>    {
        "url": "https://github.com/edmondscommerce/JMSSerializerBundle.git",
        "type": "vcs"
    },
</code></pre>

<p>],
```</p>

<p>Now running a <code>composer update --dev</code> and composer successfully brought in my fork of the Serializerbundle with the extra fixes to allow the property names to stay in camelCase.</p>

<p>And that is it, problem solved :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Great Way to Simplify Git Merges]]></title>
    <link href="http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges.html"/>
    <updated>2013-09-26T17:34:04+01:00</updated>
    <id>http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges</id>
    <content type="html"><![CDATA[<p>If you are struggling with a git merge with a long list of failed merge files then this little trick might be helpful.</p>

<p>The standard approach is to go file by file and use git mergetool to open the files in a tool like Meld and then manually manage the differences. In many cases though you know exactly which version you want and this is simply a laborious process that doesn&rsquo;t really require human input.</p>

<p>The solution to this is deceptively simple. All you need to do is to check out the file from the branch you want to keep the version of. If you have an entire directory where you know that the branch (for example master) has the correct version then you can check out that entire directory.</p>

<p>You might find that sensible use of this technique can save you lots of time and really make the mergetool the one you use for the files where you really do need to merge.</p>

<p>Thanks to <a href="http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git?answertab=active#tab-top">this StackOverflow answer</a> for simplifying this for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Git Install 1.7.5 and Why]]></title>
    <link href="http://edmondscommerce.github.io/git/ubuntu-git-install-1-7-4-and-why.html"/>
    <updated>2011-06-09T12:42:13+01:00</updated>
    <id>http://edmondscommerce.github.io/git/ubuntu-git-install-1-7-4-and-why</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you use Git a lot, you probably want to run the latest version. Scroll down for some reasons why.</p>

<p>The standard repository version for Ubuntu is 1.7.1, the current latest is 1.7.5 and there are some significant differences.</p>

<h2>How to Upgrade Git</h2>


<p>To get 1.7.5 on Ubuntu without too much messing about you can do the following:</p>

<h3>1. Set up this PPA:</h3>


<p>```</p>

<p>sudo add-apt-repository ppa:pdoes/ppa/ubuntu</p>

<p>```</p>

<h3>2. Now run an aptitude update and upgrade git</h3>


<p>```</p>

<p>sudo apt-get update
sudo aptitude upgrade git</p>

<p>```</p>

<h3>3. Now check your git version</h3>


<p>```</p>

<p>git &mdash;version</p>

<p>```</p>

<h3>Full Script for the lazy</h3>


<p>```</p>

<p>sudo add-apt-repository ppa:pdoes/ppa/ubuntu &amp;&amp; sudo apt-get update &amp;&amp; sudo aptitude upgrade &amp;&amp; git &mdash;version</p>

<p>```</p>

<h2>Why Upgrade Git?</h2>


<p>We have been having lots of merge hassles casued purely by white space changes. Apparently with 1.7.4 new recursive merge strategies came into play that should alleviate this pain and make merging a lot less hassle.</p>

<h3>Merge Ignore Whitespace</h3>


<p>```</p>

<p>git merge -s recursive -Xignore-space-change $BRANCH_NAME</p>

<p>```</p>

<p>Less hassle equals more productive and happier developers :)</p>
]]></content>
  </entry>
  
</feed>
