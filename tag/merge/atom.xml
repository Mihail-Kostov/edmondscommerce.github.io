<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: merge | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/merge/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-02T19:56:22+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Great Way to Simplify Git Merges]]></title>
    <link href="http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges.html"/>
    <updated>2013-09-26T17:34:04+01:00</updated>
    <id>http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges</id>
    <content type="html"><![CDATA[<p>If you are struggling with a git merge with a long list of failed merge files then this little trick might be helpful.</p>

<p>The standard approach is to go file by file and use git mergetool to open the files in a tool like Meld and then manually manage the differences. In many cases though you know exactly which version you want and this is simply a laborious process that doesn&rsquo;t really require human input.</p>

<p>The solution to this is deceptively simple. All you need to do is to check out the file from the branch you want to keep the version of. If you have an entire directory where you know that the branch (for example master) has the correct version then you can check out that entire directory.</p>

<p>You might find that sensible use of this technique can save you lots of time and really make the mergetool the one you use for the files where you really do need to merge.</p>

<p>Thanks to <a href="http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git?answertab=active#tab-top">this StackOverflow answer</a> for simplifying this for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Git Install 1.7.5 and Why]]></title>
    <link href="http://edmondscommerce.github.io/git/ubuntu-git-install-1-7-4-and-why.html"/>
    <updated>2011-06-09T12:42:13+01:00</updated>
    <id>http://edmondscommerce.github.io/git/ubuntu-git-install-1-7-4-and-why</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>If you use Git a lot, you probably want to run the latest version. Scroll down for some reasons why.</p>

<p>The standard repository version for Ubuntu is 1.7.1, the current latest is 1.7.5 and there are some significant differences.</p>

<h2>How to Upgrade Git</h2>


<p>To get 1.7.5 on Ubuntu without too much messing about you can do the following:</p>

<h3>1. Set up this PPA:</h3>


<p>```</p>

<p>sudo add-apt-repository ppa:pdoes/ppa/ubuntu</p>

<p>```</p>

<h3>2. Now run an aptitude update and upgrade git</h3>


<p>```</p>

<p>sudo apt-get update
sudo aptitude upgrade git</p>

<p>```</p>

<h3>3. Now check your git version</h3>


<p>```</p>

<p>git &mdash;version</p>

<p>```</p>

<h3>Full Script for the lazy</h3>


<p>```</p>

<p>sudo add-apt-repository ppa:pdoes/ppa/ubuntu &amp;&amp; sudo apt-get update &amp;&amp; sudo aptitude upgrade &amp;&amp; git &mdash;version</p>

<p>```</p>

<h2>Why Upgrade Git?</h2>


<p>We have been having lots of merge hassles casued purely by white space changes. Apparently with 1.7.4 new recursive merge strategies came into play that should alleviate this pain and make merging a lot less hassle.</p>

<h3>Merge Ignore Whitespace</h3>


<p>```</p>

<p>git merge -s recursive -Xignore-space-change $BRANCH_NAME</p>

<p>```</p>

<p>Less hassle equals more productive and happier developers :)</p>
]]></content>
  </entry>
  
</feed>
