<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: tdd | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/tdd/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-03-10T14:43:30+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Behat and emulating mobile browsers using chrome]]></title>
    <link href="http://edmondscommerce.github.io/Behat/behat-and-emulating-mobile-browsers-using-chrome.html"/>
    <updated>2015-02-03T13:00:25+00:00</updated>
    <id>http://edmondscommerce.github.io/Behat/behat-and-emulating-mobile-browsers-using-chrome</id>
    <content type="html"><![CDATA[<p>Lets admit it not all mobile sites are responsive as they were created when responsive sites were in their infancy or just did not exist. Along with that and even if a site is responsive some elements, images, styles and javascript maybe exclusive to mobile user agents or excluded all together due to file size concerns.</p>

<p>It would be useful to test a site when it is dealing with a mobile user agent. However you don not always need a actual mobile browser thanks to chromes mobile device emulation. Although it is not useful it can at lest be used to do some testing when site responds to specific user agents. Chromes mobile emulation can be driven with behat using the following example:
``` yaml
default:
  extensions:</p>

<pre><code>Behat\MinkExtension: 
  base_url: "http://urltotest.com/"
  default_session: selenium_firefox_session
  goutte: ~
  sessions: 
    goutte_session: 
      goutte: 
        guzzle_parameters: 
          ssl.certificate_authority: false
    selenium_chrome_mobile_session: 
      selenium2: 
        browser: chrome
        capabilities: 
          extra_capabilities: 
            chromeOptions: 
              mobileEmulation: 
                deviceName: "Google Nexus 5"
    selenium_chrome_session: 
      selenium2: 
        browser: chrome
        capabilities: 
          extra_capabilities: 
            chromeOptions: 
              args: 
                - "--start-maximized"
                - "--test-type"
    selenium_firefox_session: 
      selenium2: 
        browser: firefox
</code></pre>

<p>  suites:</p>

<pre><code>my_suite: 
  contexts: 
    - FeatureContext
    - Behat\MinkExtension\Context\MinkContext
</code></pre>

<p>chrome_mobile:
  extensions:</p>

<pre><code>Behat\MinkExtension: 
  default_session: selenium_chrome_mobile_session
</code></pre>

<p>```</p>

<p>With Behat and Mink we are able to pass extra parameters to the chrome selnium driver using the extra_capabilities options. In the above example we enable mobile emulation using the &ldquo;Google Nexus 5&rdquo; profile. To drive tests using this we have two options.</p>

<p>Specify the profile at run time using:
<code>bash
bin/behat -p chrome
</code></p>

<p>Alternative you can tag specific scenarios to use a given profile by using the following tag above the scenario you want to affect:
<code>bash
@mink:selenium_chrome_mobile_session
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Behat and Mink profiles for testing multiple browsers]]></title>
    <link href="http://edmondscommerce.github.io/Behat/multiple-behat-and-mink-profiles-for-testing-multiple-browsers.html"/>
    <updated>2015-02-03T12:20:36+00:00</updated>
    <id>http://edmondscommerce.github.io/Behat/multiple-behat-and-mink-profiles-for-testing-multiple-browsers</id>
    <content type="html"><![CDATA[<p>Behat makes it easy to write and run automated testing in browser and in most cases where functionality is not javascript driven then testing in a single browser is fine.</p>

<p>However if you are testing Javascript driven functionality then it is best to have multiple profiles for multiple browsers without having to write the scenario multiple times with different tagsi for different sessions. Luckily behat support defination of multiple profiles which inherit from a single default profile for all your browser needs. You simply need to set up your bhat yaml config file like so:
``` yaml
default:
  extensions:</p>

<pre><code>Behat\MinkExtension: 
  base_url: "http://someurl.com"
  default_session: selenium_firefox_session
  goutte: ~
  sessions: 
    goutte_session: 
      goutte: 
        guzzle_parameters: 
          ssl.certificate_authority: false
    selenium_chrome_session: 
      selenium2: 
        browser: chrome
    selenium_firefox_session: 
      selenium2: 
        browser: firefox
</code></pre>

<p>  suites:</p>

<pre><code>my_suite: 
  contexts: 
    - FeatureContext
    - Behat\MinkExtension\Context\MinkContext
</code></pre>

<p>chrome:
  extensions:</p>

<pre><code>Behat\MinkExtension: 
  default_session: selenium_chrome_session
</code></pre>

<p>firefox:
  extensions:</p>

<pre><code>Behat\MinkExtension: 
  default_session: selenium_firefox_session
</code></pre>

<p>```</p>

<p>The to run the crome profile for example use the -p option flag on the behat command as show:
<code>bash
bin/behat -p chrome
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faker Symfony2 Integration]]></title>
    <link href="http://edmondscommerce.github.io/symfony2/faker-symfony2-integration.html"/>
    <updated>2013-12-02T20:43:49+00:00</updated>
    <id>http://edmondscommerce.github.io/symfony2/faker-symfony2-integration</id>
    <content type="html"><![CDATA[<p>Generating test data is a crucial part of properly testing your code. If you have to hard code your test data or fixtures then you might be tempted to use only a small number of test entities.</p>

<p>To help with this you can use the brilliant <a href="https://github.com/fzaninotto/Faker">Faker</a> library to generate your test data. The Faker library is designed purely to generate test data and has a range of providers for all kinds of data.</p>

<p>As if that wasn&rsquo;t good enough, you can leverage all the power of this library in your Symfony2 development by simply installing this Symfony2 bundle, <a href="https://github.com/willdurand/BazingaFakerBundle/blob/master/Resources/doc/index.md">BazingaFakerBundle</a>.</p>

<p>Installation is a breeze with Composer and then simply reference your entities in the configuration and run the command</p>

<p><code>
app/console faker:populate
</code></p>

<p>To generate your entities programmatically rather than as a command line action (perhaps as part of a unit or functional test) you can use this code:</p>

<p>``` php
//Faker load test data
$populator = $this->getContainer()&ndash;>get(&lsquo;faker.populator&rsquo;);
$insertedPks = $populator->execute();
foreach ($insertedPks as $class => $pks) {</p>

<pre><code>$reflClass = new \ReflectionClass($class);
$shortClassName = $reflClass-&gt;getShortName();
printf("\nFaker: Inserted %s new %s objects\n", count($pks), $shortClassName);
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
