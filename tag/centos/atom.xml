<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: centos | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/centos/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-11-14T13:45:08+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compile NGINX with PageSpeed and ModSecurity on CentOS]]></title>
    <link href="http://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos.html"/>
    <updated>2014-11-11T14:06:37+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos</id>
    <content type="html"><![CDATA[<p>ModSecurity is a brilliant addition to web servers to block any nefarious requests before they hit your application.
This improves security and reduces load if your server comes under attack as the requests are killed very quickly.</p>

<p>PageSpeed is a module provided by Google to automatically improve the performance of your web pages in the browser. In a stroke it can offer a much more responsive front end with just a few configuration options.</p>

<p>Nginx is a very fast and lightweight web server ideal for using with back end servers such as PHP-FPM.</p>

<p>Here is a script that will download and compile Nginx with the two modules and also apply the correct ModSecurity configuration.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>echo &ldquo;Please run as root&rdquo;
yum install gcc-c++ pcre-dev pcre-devel zlib-devel make unzip</p>

<p>NPS_VERSION=1.9.32.2;</p>

<p>NGINX_VERSION=1.7.7;</p>

<p>MODSEC_VERSION=2.8.0</p>

<p>NGINX_EXTRA_MODULES=&ldquo; &mdash;with-http_realip_module &mdash;with-http_ssl_module &rdquo;;</p>

<p>NGINX_ADD_MODULES=&lsquo;&rsquo;</p>

<p>WORKING_DIRECTORY=/opt/nginx_with_pagespeed_and_mod_security</p>

<p>mkdir -p $WORKING_DIRECTORY</p>

<h1>echo "</h1>

<p>Mod Security</p>

<p>Installing dependencies, grabbing the repo, checking out the tag for our version and building it
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ldquo;
cd $WORKING_DIRECTORY
yum install libtool httpd-devel libxml2 libxml2-devel
git clone <a href="https://github.com/SpiderLabs/ModSecurity.git">https://github.com/SpiderLabs/ModSecurity.git</a>
cd ModSecurity
git checkout tags/v${MODSEC_VERSION}
./autogen.sh
./configure &mdash;enable-standalone-module &mdash;disable-mlogc
make
make install
NGINX_ADD_MODULES=&rdquo;$NGINX_ADD_MODULES &mdash;add-module=$WORKING_DIRECTORY/ModSecurity/nginx/modsecurity &ldquo;
echo &rdquo;</p>

<h2>Mod Security Config and Rules</h2>

<p>For nginx, we have to get all the config and cat it all into one single config file
&ldquo;
wget <a href="https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended">https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended</a>
cat modsecurity.conf-recommended  > /etc/nginx/modsecurity.conf
wget <a href="https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master">https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master</a> -O owasp-modsecurity-crs.tar.gz
tar -xvzf owasp-modsecurity-crs.tar.gz
CRS_DIR=$(find . -type d -name SpiderLabs-owasp-modsecurity-crs<em>)
cat ${CRS_DIR}/modsecurity_crs_10_setup.conf.example >> /etc/nginx/modsecurity.conf
cat ${CRS_DIR}/base_rules/modsecurity_</em>.conf >> /etc/nginx/modsecurity.conf
for f in $(find $CRS_DIR -type f -name *.data)
do</p>

<pre><code>FILE=$(basename $f)
CMD="cp $f /etc/nginx/$FILE"
echo ${CMD}
${CMD}
</code></pre>

<p>done
cp ModSecurity/unicode.mapping /etc/nginx/unicode.mapping</p>

<h1>echo "</h1>

<h2>Page Speed</h2>

<p>Downlading the pagespeed version and building this
&ldquo;
cd $WORKING_DIRECTORY
wget <a href="https://github.com/pagespeed/ngx_pagespeed/archive/release-$">https://github.com/pagespeed/ngx_pagespeed/archive/release-$</a>{NPS_VERSION}-beta.zip
unzip release-${NPS_VERSION}-beta.zip
cd ngx_pagespeed-release-${NPS_VERSION}-beta/
wget <a href="https://dl.google.com/dl/page-speed/psol/$">https://dl.google.com/dl/page-speed/psol/$</a>{NPS_VERSION}.tar.gz
tar -xzvf ${NPS_VERSION}.tar.gz  # extracts to psol/
NGINX_ADD_MODULES=&rdquo;$NGINX_ADD_MODULES &mdash;add-module=$WORKING_DIRECTORY/ngx_pagespeed-release-${NPS_VERSION}-beta "</p>

<h1>echo "</h1>

<h2>Nginx</h2>

<p>Finally, compiling Nginx with our extra modules and the added modules and installing it
&ldquo;
cd $WORKING_DIRECTORY
wget <a href="http://nginx.org/download/nginx-$">http://nginx.org/download/nginx-$</a>{NGINX_VERSION}.tar.gz
tar -xvzf nginx-${NGINX_VERSION}.tar.gz
cd nginx-${NGINX_VERSION}/
./configure $NGINX_ADD_MODULES $NGINX_EXTRA_MODULES
make
sudo make install</p>

<h1>echo "</h1>

<p>COMPLETED INSTALL &ndash; CHECKING</p>

<p>checking the nginx version now, should be $NGINX_VERSION and you should see our modules
&ldquo;
nginx -V</p>

<p>echo &ldquo;
And now doing a config test&rdquo;
/etc/init.d/nginx configtest</p>

<h1>echo "</h1>

<p>SCRIPT COMPLETED</p>

<p>However, you are not there yet</p>

<p>You need to go and look at the /etc/nginx/modsecurity.conf file and change settings there as appropriate</p>

<p>Also you need to modify your nginx vhost config &ndash; see:
<a href="https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Configuration_Steps">https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Configuration_Steps</a>
&ldquo;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoAccess - Nice CLI Access Log Parsing Tool (and how to install on CentOS)]]></title>
    <link href="http://edmondscommerce.github.io/sysadmin/goaccess-nice-cli-access-log-parsing-tool-and-how-to-install-on-centos.html"/>
    <updated>2014-04-24T12:40:27+01:00</updated>
    <id>http://edmondscommerce.github.io/sysadmin/goaccess-nice-cli-access-log-parsing-tool-and-how-to-install-on-centos</id>
    <content type="html"><![CDATA[<p>Log files are probably the single most useful item on a web server when it comes to debugging. They are packed full of all the information you need to understand what is
happening on the server and detect any potential issues.</p>

<p>Reading log files by hand is basically imposssible for any meaningful overall monitoring. You can of course do some grepping and other bash tools to gain more insights but some times it&rsquo;s nice to just have a simple tool.</p>

<p>I am a big fan of tools like top, mytop, apachetop and ngxtop. GoAccess is a little bit different though, mainly it just seems a lot more fully featured.</p>

<p>Best thing to do is to try it. Here is how to install it on CentoOS</p>

<p>``` bash
yum install ncurses-devel glib2-devel geoip-devel
mkdir -p ~/goaccess
cd ~/goaccess
wget <a href="http://downloads.sourceforge.net/project/goaccess/0.7.1/goaccess-0.7.1.tar.gz">http://downloads.sourceforge.net/project/goaccess/0.7.1/goaccess-0.7.1.tar.gz</a>
tar -xzvf goaccess-0.7.1.tar.gz
cd goaccess-0.7.1/
./configure &mdash;enable-geoip &mdash;enable-utf8
make
make install</p>

<p>```</p>

<p>You can read more about GoAccess here:
<a href="http://goaccess.prosoftcorp.com/">http://goaccess.prosoftcorp.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Percona DB on a clean CentOS ]]></title>
    <link href="http://edmondscommerce.github.io/percona/installing-percona-db-on-a-clean-centos.html"/>
    <updated>2012-11-09T15:22:41+00:00</updated>
    <id>http://edmondscommerce.github.io/percona/installing-percona-db-on-a-clean-centos</id>
    <content type="html"><![CDATA[<p>Percona is a performance optimised fork of MySQL that has gained a lot of traction in the Magento-sphere as webmasters and sysadmins alike look to squeeze the most performance out of their hardware.</p>

<p>If you read the <a href="http://edmondscommerce.github.io/platforms/magento">Magento</a> performance whitepaper then you will see they mention Percona DB there.</p>

<p>To install Percona on a standard CentOS release 6.2 (Final) server you would need to run the following commands:</p>

<p>First set up the repo:
```bash</p>

<p>rpm -Uhv <a href="http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm">http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm</a></p>

<p>```</p>

<p>This should give you output like this:
```</p>

<p>Retrieving <a href="http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm">http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm</a>
Preparing&hellip;                ########################################### [100%]
   1:percona-release        ########################################### [100%]</p>

<p>```</p>

<p>Then installing should be a simple case of running:
```bash</p>

<p>yum install Percona-Server-client-55 Percona-Server-server-55</p>

<p>```</p>

<p>However I found that this generated the following error:
```</p>

<p>Error: Percona-XtraDB-Cluster-client conflicts with Percona-Server-client-55</p>

<p>```</p>

<p>The problem is because MySQL is already installed and needs to be removed. You can do this with this command:</p>

<p>```bash</p>

<p>yum remove mysql*</p>

<p>```</p>

<p>At which point running the install should work smoothly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating RPMs]]></title>
    <link href="http://edmondscommerce.github.io/linux/creating-rpms.html"/>
    <updated>2012-08-09T16:24:34+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/creating-rpms</id>
    <content type="html"><![CDATA[<p>One thing that I often get asked as a package maintainer is how hard is it to make rpms?</p>

<p>Well, here&rsquo;s a little secret, if you have the right tools, it&rsquo;s actually quite easy.</p>

<p>The main tool I use is mezzanine &ndash; one of the people I worked with on the cAos Linux distributions wrote this toolset in perl, and it is installable even on debian-based distros.  His website is experiencing issues at the moment but it is <a href="http://beta.kainx.org/" title="http://beta.kainx.org/"><a href="http://beta.kainx.org/">http://beta.kainx.org/</a></a>.  If it&rsquo;s still down and you want the rpm, rpm.pbone.net can find you an rpm.</p>

<p>The basics are that you need a folder that contains an &ldquo;F&rdquo; &ldquo;P&rdquo; and &ldquo;S&rdquo; directory, and yes, that is all uppercase.  The F folder contains a spec file similar to what&rsquo;s below, the S folder contains the source files and the P directory is a clever little patch making system.</p>

<p>The spec file is almost exactly the same as a normal rpmbuild spec file and looks like this :&ndash;
<code>
#</p>

<h1>spec file for safe-rm</h1>

<p>#
Summary: Don&rsquo;t rm various directorie
Name: safe-rm
Version: 0.8
Release: 1
License: GPL
Group: Applications/Utilities
Source: <a href="https://launchpad.net/safe-rm/trunk/0.8/+download/safe-rm-0.8.tar.gz">https://launchpad.net/safe-rm/trunk/0.8/+download/safe-rm-0.8.tar.gz</a>
URL: <a href="https://launchpad.net/safe-rm">https://launchpad.net/safe-rm</a>
Distribution: CentOS
Packager: Martyn Ranyard <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#105;&#x6e;&#x66;&#x6f;&#x40;&#x65;&#100;&#x6d;&#111;&#x6e;&#x64;&#x73;&#99;&#111;&#109;&#109;&#101;&#x72;&#99;&#101;&#x2e;&#99;&#x6f;&#46;&#x75;&#x6b;">&#105;&#110;&#x66;&#111;&#64;&#x65;&#x64;&#x6d;&#x6f;&#110;&#x64;&#x73;&#x63;&#x6f;&#109;&#109;&#101;&#114;&#99;&#101;&#46;&#x63;&#111;&#46;&#x75;&#x6b;</a>
Patch1000: safe-rm-0.8-example-conf.patch
Requires: perl</p>

<p>%description
Stop people accidentally removing directories with rm -rf</p>

<p>%changelog
* Thu Aug 09 2012 Martyn Ranyard <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#105;&#x6e;&#102;&#111;&#64;&#x65;&#x64;&#109;&#111;&#110;&#x64;&#115;&#99;&#x6f;&#109;&#109;&#x65;&#x72;&#99;&#101;&#x2e;&#99;&#x6f;&#46;&#117;&#107;">&#x69;&#110;&#x66;&#111;&#64;&#101;&#x64;&#109;&#111;&#x6e;&#100;&#x73;&#x63;&#111;&#x6d;&#109;&#101;&#x72;&#x63;&#x65;&#x2e;&#99;&#111;&#x2e;&#x75;&#x6b;</a>
&ndash; Used the debian example config for the default config</p>

<p>%prep
rm -rf $RPM_BUILD_ROOT/safe-rm-0.8
zcat $RPM_SOURCE_DIR/safe-rm-0.8.tar.gz | tar -xvf &ndash;
cd safe-rm-0.8
%patch1000 -p1</p>

<p>%build</p>

<p>%install
mkdir -p $RPM_BUILD_ROOT/usr/bin/
mkdir -p $RPM_BUILD_ROOT/etc/
mkdir -p $RPM_BUILD_ROOT/sbin/
install -m 0755 safe-rm-0.8/safe-rm $RPM_BUILD_ROOT/usr/bin/safe-rm
install -m 0644 safe-rm-0.8/safe-rm.conf $RPM_BUILD_ROOT/etc/safe-rm.conf
cd $RPM_BUILD_ROOT/usr/bin/
ln -s safe-rm rm
cd &ndash;
cd $RPM_BUILD_ROOT/sbin/
ln -s /usr/bin/safe-rm rm
cd &ndash;</p>

<p>%files
/etc
/etc/safe-rm.conf
/usr
/usr/bin
/usr/bin/safe-rm
/sbin
/sbin/rm
</code></p>

<p>You&rsquo;ll notice the patch1000 lines reference a patch file, which mezzanine handily creates for you, first you run mzprep, which creates a work dir, then you add/edit files in there to make whatever you&rsquo;re packaging build and install (to $RPM_BUILD_DIR) and then you run &ldquo;mzpatch mypatchname.patch&rdquo; and it creates the patch ready to be deployed.</p>

<p>To create the rpms, change back to the top level directory (the one containing F P &amp; S) and type mzbuild.</p>

<p>It takes a bit of getting used to and a fair bit of fiddling but the end result is good solid rpms.</p>

<p>Note: it can also make deb files and slackware package files but KainX is the guy to talk to on that front.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[safe-rm - saves you from rm -rf /*]]></title>
    <link href="http://edmondscommerce.github.io/linux/safe-rm-saves-you-from-rm-rf.html"/>
    <updated>2012-08-09T15:59:14+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/safe-rm-saves-you-from-rm-rf</id>
    <content type="html"><![CDATA[<p>Okay, so it&rsquo;s a sysadmin&rsquo;s nightmare that you might when tired miss out a dot from an rm -rf ./* and whilst you shouldn&rsquo;t run as root, there are times when permissions problems push you into it.</p>

<p>This little gem allows you to blacklist folders from rm (such as /etc /bin and other system directories, along with any custom ones you might want to protect).</p>

<p>It&rsquo;s in debian/ubuntu repositories so apt-get install safe-rm is quite useful, but it seems to be nowhere to be found for CentOS/RHEL, so we packaged it up (one of our employees used to be a package maintainer for a linux distro) for CentOS servers.</p>

<p>The original url for safe-rm is <a href="https://launchpad.net/safe-rm" title="https://launchpad.net/safe-rm"><a href="https://launchpad.net/safe-rm">https://launchpad.net/safe-rm</a></a> and our rpm is available <a href="http://www.edmondscommerce.co.uk/stuff/safe-rm-0.8-1.x86_64.rpm" title="here">here</a> &ndash; Feel free to mirror this elsewhere.</p>

<p>Next up: <a href="http://www.edmondscommerce.co.uk/linux/creating-rpms/" title="how we created the rpm">how we created the rpm</a></p>
]]></content>
  </entry>
  
</feed>
