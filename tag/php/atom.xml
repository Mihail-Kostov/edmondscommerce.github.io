<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: php | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/php/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-09-25T15:23:21+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Database Migrations]]></title>
    <link href="http://edmondscommerce.github.io/php/simple-database-migrations.html"/>
    <updated>2014-04-28T13:22:34+01:00</updated>
    <id>http://edmondscommerce.github.io/php/simple-database-migrations</id>
    <content type="html"><![CDATA[<p>Some times you just need something simple to manage database versions. This few lines of PHP is something I have used on various projects to assist with database versioning.</p>

<p>It is definitely not a fully featured migrations system, there is no downgrade functionality, it is purely for versioning up a DB to the latest version.</p>

<p>Largely how it works is up to you as it is simply a way of requiring PHP files in numerical order.</p>

<p>Here is the code:</p>

<p>``` php
&lt;?php
$res = mysql_fetch_assoc(db_query(&ldquo;select version from db_migrations order by version desc limit 0,1&rdquo;));
$current_version = ($res[&lsquo;version&rsquo;]) ? $res[&lsquo;version&rsquo;] : 0;
$di = new DirectoryIterator(<strong>DIR</strong> . &lsquo;/migrations&rsquo;);
$torun = array();
foreach ($di as $f) {</p>

<pre><code>/* @var $f DirectoryIterator */
if ($f-&gt;isDot()) {
    continue;
}
if ('php' == pathinfo($f-&gt;getFilename(), PATHINFO_EXTENSION)) {
    $exp = explode('.', strval($f));
    if (2 != count($exp)) {
        throw new Exception('#1 Invalid migration file ' . strval($f) . ' in ' . __FILE__);
    }
    $version = $exp[0];
    if (!is_numeric($version)) {
        throw new Exception('#2 Invalid migration file ' . strval($f) . ' in ' . __FILE__);
    }
    if ($version &gt; $current_version) {
        $torun[$version] = strval($f);
    }
} else {
    throw new Exception('#3 Invalid migration file ' . strval($f) . ' in ' . __FILE__);
}
</code></pre>

<p>}</p>

<p>if (!empty($torun)) {</p>

<pre><code>ksort($torun, SORT_NUMERIC);
foreach ($torun as $v =&gt; $t) {
    require(__DIR__ . '/migrations/' . $t);
    h(3, 'Database Migrations - running migration ' . $t);
    db_query("insert into db_migrations set version = '$v' ");
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compare Text Chunks Quickly in PHPStorm]]></title>
    <link href="http://edmondscommerce.github.io/PHPStorm/compare-text-chunks-quickly-in-phpstorm.html"/>
    <updated>2014-03-26T11:34:50+00:00</updated>
    <id>http://edmondscommerce.github.io/PHPStorm/compare-text-chunks-quickly-in-phpstorm</id>
    <content type="html"><![CDATA[<p>Some times you just need to compare a few lines from one file to a few lines from somewhere else. Full blown file diffing will give you all kinds of false positive information, actually you just want to compare a few lines.</p>

<p>I had a look around and couldn&rsquo;t see an obvious way to do it but then I saw the &ldquo;Compare with Clipboard&rdquo; option in the right click menu.</p>

<p>To use this is really easy and super handy.</p>

<p>First of all, highlight one of the chunks of text and get it into your clipboard <code>[ctrl]+[c]</code></p>

<p>Now highlight your second chunk of text and simply select the &ldquo;Compare with Clipboard&rdquo; option.</p>

<p>You will now get a standard PHPStorm diff viewer allowing you to compare the text chunks side by side.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running PHP Scripts on CLI and Faking a Web Request]]></title>
    <link href="http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request.html"/>
    <updated>2014-02-14T17:31:14+00:00</updated>
    <id>http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request</id>
    <content type="html"><![CDATA[<p>Some times you build a PHP script that is designed to run from a web request and you want to run it on the command line.
The problem is that you have used the standard PHP super globals and you would rather not refactor the script loads.</p>

<p>Here is a nice quick solution:</p>

<p>``` php
if(isset($argc)){</p>

<pre><code>for ($i = 1; $i &lt; $argc; $i++) {
    $things = explode("=", $argv[$i]);
    if (false !== stripos($things[0], 'POST:')) {
         $post = str_replace('POST:', '', $things[0]);
         $_POST[$post] = $things[1];
    } else {
         $_GET[$things[0]] = $things[1];
    }
}
</code></pre>

<p>}</p>

<p>echo &ldquo;\nGET:\n&rdquo;;
var_dump($<em>GET);
echo &ldquo;\nPOST:\n&rdquo;;
var_dump($</em>POST);</p>

<p><code>``
This will loop over the argc variable that is defined when running in CLI mode and will fake the</code>$<em>GET<code>and</code>$</em>POST` variables as required.</p>

<p>To run this with get and post variables you would do this:</p>

<p><code>
php -f script.php getvar1=test getvar2=foo POST:postvar1=bar
</code></p>

<p>And that&rsquo;s it. It is not particularly pretty but it can be pretty handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapping a List in Quotes in PHPStorm]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html"/>
    <updated>2013-12-06T11:35:58+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm</id>
    <content type="html"><![CDATA[<p>Some times you might find your self with a list of values you want to copy and paste from somewhere into your PHP code as an array of strings.</p>

<p>For example, take this list of carrier names that I need to use:</p>

<p><code>
Blue Package, USPS, UPS, UPSMI, FedEx, DHL, DHL Global Mail, Fastway, UPS Mail Innovations, Lasership, Royal Mail, FedEx SmartPost, OSM, OnTrac, Streamlite, Newgistics, Canada Post, City Link, GLS, GO!, Hermes Logistik Gruppe, Parcelforce, TNT, Target, SagawaExpress, NipponExpress, YamatoTransport, Other
</code></p>

<p>I really don&rsquo;t fancy wrapping each element of this list with quotes one by one, there must be a better way!</p>

<p>There is, you can use the regex replace functionality of PHPStorm to do this for you quickly and easily.</p>

<p>First of all paste the string into your PHPStorm editor and highlight it. Then hit <code>[ctrl]+[r]</code> to start your find and replace.</p>

<p>The &ldquo;In Selection&rdquo; tick box should be ticked already, you also need to tick the regex box.</p>

<p>Then in the find section, use this regex:
<code>
( |)([^,]+),
</code></p>

<p>And in your replace box, put this:</p>

<p><code>
\n'$2',
</code></p>

<p>This gets you nearly all the way there, you might just need to tidy up a bit you should now have something looking like this:</p>

<p><code>
'Blue Package',
'USPS',
'UPS',
'UPSMI',
'FedEx',
'DHL',
'DHL Global Mail',
'Fastway',
'UPS Mail Innovations',
'Lasership',
'Royal Mail',
'FedEx SmartPost',
'OSM',
'OnTrac',
'Streamlite',
'Newgistics',
'Canada Post',
'City Link',
'GLS',
'GO!',
'Hermes Logistik Gruppe',
'Parcelforce',
'TNT',
'Target',
'SagawaExpress',
'NipponExpress',
'YamatoTransport', Other
</code></p>

<p>The <code>Other</code> on the end has not been converted has it doesn&rsquo;t have a trailing comma. You could mess about with yoru regex trying to get this to also be converted, or you could say good enough and move on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically convert old PHP file to camelCase ]]></title>
    <link href="http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase.html"/>
    <updated>2013-10-17T10:53:15+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/automatically-convert-old-php-file-to-camelcase</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been working with an old project that uses a combination of different coding styles.</p>

<p>One of the more trivial annoyances with this is that the variables used through the project are a combination of $camelCase and $snake_case which throws of the coding standards tools that I use.</p>

<p>To get round this I have put a little script together that will convert $snake_case to $camelCase automatically.</p>

<p>Obviously, you will need to check the results of this to make sure that there are not variables that should not be changed, but it has saved me a lot of time doing this manually.</p>

<p>I&rsquo;ve added this to my .bash_allias file, though it could easily be turned into a standalone script if required</p>

<p>```bash</p>

<h1>Fix legacy code</h1>

<p> cammelCase() {
   vim -E -s $@ &lt;&lt;-EOF
   :%s#\%($\%(\k+))\@&lt;=_(\k)#\u\1#g
   :update
   :quit
EOF</p>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
