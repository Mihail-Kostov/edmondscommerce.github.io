<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: framework | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/framework/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-05-27T13:10:00+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concrete5 Developer UK]]></title>
    <link href="http://edmondscommerce.github.io/concrete5/concrete5-developer-uk.html"/>
    <updated>2012-11-05T16:48:08+00:00</updated>
    <id>http://edmondscommerce.github.io/concrete5/concrete5-developer-uk</id>
    <content type="html"><![CDATA[<p><a href="http://www.concrete5.org/">Concrete5</a> is a CMS system based on Zend Framework that uses Jquery for it&rsquo;s Javascript layer. Both of these are very popular and powerful frameworks that are really great to work with.</p>

<p>The thing that users really love though is the ability to edit Concrete5 pages on the fly making it very easy to use by non techies.</p>

<p>You can see the real ethos of the platform (from our techie point of view) <a href="http://www.concrete5.org/about/blog/client-work/an-open-letter-to-php-developers-about-concrete5/" target="_blank">here</a>.</p>

<p>If you are looking for some expert PHP developers to help you get your Concrete5 site off the ground then <a href="http://edmondscommerce.github.io/contact-us">get in touch with Edmonds Commerce today</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Security Patch Script]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-security-patch-script.html"/>
    <updated>2012-07-10T16:29:28+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-security-patch-script</id>
    <content type="html"><![CDATA[<p>We are currently offering a free service to apply the security patches for any Magento store. <a href="http://www.edmondscommerce.co.uk/magento/magento-security-vulnerability-free-assistance/">You can read all about that here</a>.</p>

<p>For those of you who are comfortable SSHing into your server and running things manually but would like this to be as easy as possible, you can use our bash script to automatically determine which Magento security patch you require and then apply it.</p>

<p>Simply run the following command:</p>

<p>```bash</p>

<p>wget -qO- <a href="http://www.edmondscommerce.co.uk/stuff/applysecuritypatch.sh">http://www.edmondscommerce.co.uk/stuff/applysecuritypatch.sh</a> | /bin/sh</p>

<p>```</p>

<p>For information, this is the source of the above file.</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>if [ ! -f app/Mage.php ]; then
  echo &ldquo;Not in the magento basedir. please run from public_html, httpdocs, www or wherever index.php is.&rdquo;
  exit 99
fi</p>

<p>WGET_BINARY=$(which wget)</p>

<p>if [ &ldquo;&rdquo; = &ldquo;$WGET_BINARY&rdquo; ]; then
  echo &ldquo;Can&rsquo;t find wget in path&hellip; can&rsquo;t continue&rdquo;
  exit 98
fi</p>

<p>MAGENTO_VERSION=$(grep &lsquo;function getVersionInfo()&rsquo; -A6 app/Mage.php | sed s/[^0-9]//g | tr &lsquo;\n&rsquo; &lsquo;.&rsquo; | sed s/&lsquo;..*&rsquo;// | sed s/&lsquo;.$&rsquo;//)
echo &ldquo;Your Magento version is $MAGENTO_VERSION&rdquo;</p>

<p>export $(grep &lsquo;function getVersionInfo()&rsquo; -A6 app/Mage.php | grep = | sed s/,// | sed s/>// | sed s/&lsquo;[\t ]&rsquo;//g | tr &ldquo;a-z&rdquo; &ldquo;A-Z&rdquo; | sed s/^/MAGENTO_/ | sed s/&ldquo;&lsquo;&rdquo;//g)</p>

<p>set | grep MAGENTO</p>

<p>#</p>

<h1>Community Edition 1.4.0.0 through 1.4.1.1 <a href="http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.4.0.0-1.4.1.1.patch">http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.4.0.0-1.4.1.1.patch</a></h1>

<h1>Community Edition 1.4.2.0 <a href="http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.4.2.0.patch">http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.4.2.0.patch</a></h1>

<h1>Community Edition 1.5.0.0 through 1.7.0.1 <a href="http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.5.0.0-1.7.0.1.patch">http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.5.0.0-1.7.0.1.patch</a></h1>

<p>#</p>

<p>if [ &ldquo;$MAGENTO_MAJOR&rdquo; -eq &ldquo;1&rdquo; ]; then
  if [ &ldquo;$MAGENTO_MINOR&rdquo; -eq &ldquo;4&rdquo; ]; then</p>

<pre><code>if [ $MAGENTO_PATCH -lt "2" ]; then
    CORRECT_PATCH='http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.4.0.0-1.4.1.1.patch'
  echo "Running Magento &lt; 1.4.2.0 - patch is $CORRECT_PATCH";
else
  CORRECT_PATCH='http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.4.2.0.patch'
  echo "Running Magento 1.4.2.0 - patch is $CORRECT_PATCH";
fi
</code></pre>

<p>  elif [ $MAGENTO_MINOR -gt &ldquo;4&rdquo; ]; then</p>

<pre><code>if [ $MAGENTO_MINOR -lt "7" ]; then
  CORRECT_PATCH='http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.5.0.0-1.7.0.1.patch'
  echo "Running Magento 1.5.0.0 or above - patch is $CORRECT_PATCH";
elif [ $MAGENTO_MINOR -eq "7" -a $MAGENTO_PATCH -eq "0" -a $MAGENTO_REVISION -lt "2" ]; then
  CORRECT_PATCH='http://www.magentocommerce.com/downloads/assets/1.7.0.2/CE_1.5.0.0-1.7.0.1.patch'
  echo "Running Magento 1.5.0.0 or above - patch is $CORRECT_PATCH";
else
  echo "Running Magento 1.7.0.2 - already patched."
  exit 1
fi
</code></pre>

<p>  fi
else
  echo &ldquo;You&rsquo;re not running version 1.x.x.x of Magento, I have no idea what to do!&rdquo;
  exit 97
fi</p>

<p>wget -O &ndash; $CORRECT_PATCH 2> /dev/null | patch -p0
if [ $? -eq 0 ]; then
  echo &ldquo;Patch succeeded.&rdquo;
else
  echo &ldquo;For some reason the patch failed.  See the output above.&rdquo;
  echo &ldquo;You could attempt to download the patch manually and apply it &ndash; the url is :&ndash; &rdquo;
  echo $CORRECT_PATCH
fi</p>

<p>```</p>

<p>Please note this script is supplied without any warranty, use at your own risk. We are not supplying the patch files simply making it easy to download and apply the correct one.</p>

<p>We strongly recommend you patch your store as soon as possible.</p>

<p><b><a href="http://www.edmondscommerce.co.uk/contact-us/?about=Free+Magento+Security+Fix"> If you need help, just ask!</a></b></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Security Vulnerability + Free Assistance]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-security-vulnerability-free-assistance.html"/>
    <updated>2012-07-10T13:07:02+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-security-vulnerability-free-assistance</id>
    <content type="html"><![CDATA[<p>The magento platform is based on a PHP framework called Zend Framework.</p>

<p>Recently a bug was found in Zend Framework which potentially allows attackers to read any file on your server. This could mean they could gain access to your mysql server credentials for example.</p>

<p>You can read the full details <a href="http://www.magentocommerce.com/blog/comments/update-zend-framework-vulnerability-security-update/">here</a>.</p>

<p>The actual bug details for Zend Framework are in this <a href="http://framework.zend.com/security/advisory/ZF2012-01">security advisory</a>.</p>

<h3>Free Security Patching Service</h3>


<p>In a nutshell this represents a serious security hole that you need to plug as soon as possible. Fixing this issue is very simple indeed if you know what you are doing.</p>

<p>For this reason Edmonds Commerce are happy to offer <b>FREE</b> assistance in applying this patch to any Magento store owner whether you are a current client or not. We will not charge you in any way for this service.</p>

<p>To request <b>FREE</b> assistance <a href="http://edmondscommerce.github.io/contact-us/?about=Free+Magento+Security+Fix"><b>contact us today</b></a></p>

<h3>Donation to Charity</h3>


<p>If you choose to, you could make a donation to cover this service here:
<a href="http://www.justgiving.com/EdmondsCommerce"><a href="http://www.justgiving.com/EdmondsCommerce">http://www.justgiving.com/EdmondsCommerce</a></a></p>

<h3>Please Note</h3>


<p>We will need you to give us shell (otherwise known as SSH) access to your server if available.</p>

<p>If you are on a shared hosting service that is not able to supply shell access, we would suggest you ask your hosting company to help you with this issue. Feel free to refer them to this page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento or Zend Framework Session issues with PHPUnit and session_start()]]></title>
    <link href="http://edmondscommerce.github.io/php/magento-or-zend-framework-session-issues-with-phpunit-and-session_start.html"/>
    <updated>2012-02-24T16:07:57+00:00</updated>
    <id>http://edmondscommerce.github.io/php/magento-or-zend-framework-session-issues-with-phpunit-and-session_start</id>
    <content type="html"><![CDATA[<p>If you are having issues running unit tests that work with sessions and call session_start(), you might see error messages like this:</p>

<p><strong>output started at &ldquo;PHPUnit/Util/Printer.php:173&rdquo;</strong></p>

<p>If you do, the solution is fairly simple. Just add the flag &mdash;stderr to PHPUnit eg</p>

<p>```</p>

<p> phpunit &mdash;stderr mytest.php</p>

<p>```</p>

<p>If you are using Netbeans, you simply need to add this to your PHPUnit script setting in</p>

<p>Tools->Options->PHP->Unit Test</p>

<p>eg /opt/lampp/bin/phpunit &mdash;stderr</p>

<p><img src="/assets/Screenshot-600x323.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework Rest HTTP Basic Authentication]]></title>
    <link href="http://edmondscommerce.github.io/zend%20framework/zend-framework-rest-http-basic-authentication.html"/>
    <updated>2012-02-21T12:43:44+00:00</updated>
    <id>http://edmondscommerce.github.io/zend%20framework/zend-framework-rest-http-basic-authentication</id>
    <content type="html"><![CDATA[<p>I have recently been working on a Magento project that required a custom API integration with Zen Desk.</p>

<p>Magento is based on Zend Framework which is nice because it means we can use the Zend_Rest_Client object to handle the API integration which provides a nice layer of abstraction and sorts out a lot of the heavy lifting required.</p>

<p>However I came across a terminal issue trying to get it working properly with HTTP Basic Authentication which the Zen Desk API uses.</p>

<p>I found some instructions which recommended creating a Zend_Uri_Http object and then setting the username and password against this. However as Zen Desk uses the email address as the username component, this failed completely.</p>

<p>In the end the solution I found was to grab the static HTTP client object that the REST client is built upon and call the public setAuth method on this. This way the Authorisation header is correctly created, encoded and appended to the headers.</p>

<p>Logically it feels like a dirty way to do things, grabbing the HTTP client statically to do this, but it works and I can&rsquo;t see how else you would do it.</p>

<p>For info here is the code:</p>

<p>```php</p>

<p>/**</p>

<pre><code> * @return Zend_Rest_Client 
 */
protected function getClient() {
    if (null === $this-&gt;_client) {
        $url = $this-&gt;getApiUrl();
        $uri = Zend_Uri_Http::fromString($url);
        $this-&gt;_client = new Zend_Rest_Client($uri);
        Zend_Service_Abstract::getHttpClient()-&gt;setAuth($this-&gt;getUsername(),$this-&gt;getPassword());
    }
    return $this-&gt;_client;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
