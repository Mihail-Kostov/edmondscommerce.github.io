<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: methods | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/methods/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-04-28T13:25:53+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Netbeans to generate PHP class methods]]></title>
    <link href="http://edmondscommerce.github.io/netbeans/using-netbeans-to-generate-php-class-methods.html"/>
    <updated>2012-03-08T14:31:19+00:00</updated>
    <id>http://edmondscommerce.github.io/netbeans/using-netbeans-to-generate-php-class-methods</id>
    <content type="html"><![CDATA[<p>One of the features that I was previously unaware of in Netbeans is its ability to automatically generate common class methods. This post is a quick guide of how this works for future reference.</p>

<p>To get the system to work, first load up a php class. For this example I&rsquo;m going to be extending the Magento Product Model. This basic class can be seen here, with a couple of extra properties added.
<img src="/assets/screenshot5-600x166.png"></p>

<p>To start generating the methods you need to press [Alt] &amp; [Insert] and you will be presented with a menu similar to the one below</p>

<p><img src="/assets/screenshot6.png"></p>

<p>This lists all of the common methods that do not currently exist within the class. The first thing that we&rsquo;ll do is to generate a constructor, which gives us the following options</p>

<p><img src="/assets/screenshot7.png"></p>

<p>Here you can select which of the class properties you want to be set using the constructor. Pick the ones you want and click OK, and the following code is generated</p>

<p><img src="/assets/screenshot8-600x368.png"></p>

<p>The Getters and Setters work in the same way, and the Override &amp; Implement provides you with a list of all of the methods that the class can override from its parents. Using these together can help you to quickly all of the methods you need in minutes, as shown below.</p>

<p><img src="/assets/screenshot14-600x547.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Calling Methods using Array_Walk]]></title>
    <link href="http://edmondscommerce.github.io/php/php-calling-methods-using-array_walk.html"/>
    <updated>2010-05-14T10:59:08+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-calling-methods-using-array_walk</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>The array_walk function is one of those unassuming little PHP functions that a lot of people may well ignore, but it is often very useful and can save writing out lines of code, compressing a pretty common coding structure into a single function call. Of course that also means that it is fast!</p>

<p>However, the standard documentation doesn&rsquo;t make it clear if you can use array_walk on an array and use a class method as the callback rather than a global function. You can and here is how to do it:</p>

<p>```php</p>

<p>$object = new MyClass;
$array = array(/<em> some array </em>/);
array_walk($array, array($object, &lsquo;methodName&rsquo;));</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
