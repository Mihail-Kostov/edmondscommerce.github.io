<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: meld | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/meld/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-03-02T19:41:27+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clean Up Meld Files when Git Merging]]></title>
    <link href="http://edmondscommerce.github.io/git/clean-up-meld-files-when-git-merging.html"/>
    <updated>2014-01-29T11:39:19+00:00</updated>
    <id>http://edmondscommerce.github.io/git/clean-up-meld-files-when-git-merging</id>
    <content type="html"><![CDATA[<p>If you do a Git Merge using Meld (a brilliant Linux diff tool) then you might find that there are a bunch of files created that you need to clear up.</p>

<p>These files will be copies of the merged files and can be safely removed as everything you should need to know is already in Git.</p>

<p>I wrote the following quick function to find all of these files and remove them. You could add this as a function to your bashrc file if you need to do this regularly.</p>

<p>Here is the BASH snippet:</p>

<p><code>bash
git status -su | grep -P "\.BACKUP|BASE|LOCAL|REMOTE\." | cut -f2 -d" " | xargs rm
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Great Way to Simplify Git Merges]]></title>
    <link href="http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges.html"/>
    <updated>2013-09-26T17:34:04+01:00</updated>
    <id>http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges</id>
    <content type="html"><![CDATA[<p>If you are struggling with a git merge with a long list of failed merge files then this little trick might be helpful.</p>

<p>The standard approach is to go file by file and use git mergetool to open the files in a tool like Meld and then manually manage the differences. In many cases though you know exactly which version you want and this is simply a laborious process that doesn&rsquo;t really require human input.</p>

<p>The solution to this is deceptively simple. All you need to do is to check out the file from the branch you want to keep the version of. If you have an entire directory where you know that the branch (for example master) has the correct version then you can check out that entire directory.</p>

<p>You might find that sensible use of this technique can save you lots of time and really make the mergetool the one you use for the files where you really do need to merge.</p>

<p>Thanks to <a href="http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git?answertab=active#tab-top">this StackOverflow answer</a> for simplifying this for me.</p>
]]></content>
  </entry>
  
</feed>
