<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: variable | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/variable/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-01-30T16:42:48+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prestashop Debug Mode using the Magento Environment Variable Method]]></title>
    <link href="http://edmondscommerce.github.io/prestashop/prestashop-debug-mode-using-the-magento-environment-variable-method.html"/>
    <updated>2013-04-25T10:14:30+01:00</updated>
    <id>http://edmondscommerce.github.io/prestashop/prestashop-debug-mode-using-the-magento-environment-variable-method</id>
    <content type="html"><![CDATA[<p>Magento developers are no doubt familiar with the concept of defining a server environment variable MAGE_IS_DEVELOPER_MODE so that when running Magento locally it is always in developer mode but there is no chance of accidently deploying a live site in developer mode.</p>

<p>This little trick will allow you to use the same environment variable to also have the same effect when working with PrestaShop.</p>

<p>To explain &ndash; developer mode generally means that things like error messages and debugging information are displayed clearly in the browser which makes things much easier when you are developing, to see what is going wrong.</p>

<p>On a live site you want to keep error information hidden and generally display to the customer a more friendly error message screen that perhaps helps them find their way back to a functional section of the site or gives them information to contact the site owner directly for assistance.</p>

<p>Anyway, to put PrestaShop in debug mode locally but have no risk of deployign this to live you can alter the file: config/defines.inc.php</p>

<p>from
```php</p>

<p>define(&lsquo;<em>PS_MODE_DEV</em>&rsquo;, false);</p>

<p>```</p>

<p>to
```php</p>

<p>define(&lsquo;<em>PS_MODE_DEV</em>&rsquo;, isset($_SERVER[&lsquo;MAGE_IS_DEVELOPER_MODE&rsquo;]));</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restrict Access Using .htaccess File Rules in PHP]]></title>
    <link href="http://edmondscommerce.github.io/php/restrict-access-using-htaccess-file-rules-in-php.html"/>
    <updated>2013-03-11T15:29:34+00:00</updated>
    <id>http://edmondscommerce.github.io/php/restrict-access-using-htaccess-file-rules-in-php</id>
    <content type="html"><![CDATA[<p>The function below is one that we have used a few times to allow certain &ldquo;admin only&rdquo; assets to be accessed or visible on the front end of a website.</p>

<p>The theory is that the htaccess file in the admin folder will be kept up to date and can therefore be used as the authoritative list of IP addresses that are allowed to access admin assets.</p>

<p>This function is simple enough and should be useful anywhere that you use htaccess to protect a certain folder and would like to implement the same white list rules in other places without having to maintain a duplicate list of authorised IP addresses.</p>

<p>The function also uses <a href="http://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static" title="PHP.net Static Variables" target="_blank">static variables</a> &ndash; a lesser known bit of PHP functionality which can be a nice easy performance optimisation when working with procedural PHP code. If a function will be called many times and will always return the same result in a single request, you can actually cache that result to a static variable and serve that on any subsequent requests.</p>

<p>```php</p>

<p>function isAllowedIp() {</p>

<pre><code>static $pass = null;
if ($pass !== null) {
    return $pass;
}
$pass=false;
$customer_ip = $_SERVER['REMOTE_ADDR'];    
$htaccess = file_get_contents('admin/.htaccess');
preg_match_all('%allow from ([0-9.]+)%', $htaccess, $matches);
foreach ($matches[1] as $ip) {
    if ($ip == $customer_ip) {
        $pass = true; //this is stored statically for perfomance reasons
        return true;
    }
}
return false;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netbeans Quick find Variable Declaration]]></title>
    <link href="http://edmondscommerce.github.io/netbeans/netbeans-quick-find-variable-declaration.html"/>
    <updated>2011-04-27T14:37:20+01:00</updated>
    <id>http://edmondscommerce.github.io/netbeans/netbeans-quick-find-variable-declaration</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>A nice little feature I stumbled across the other day.</p>

<p>If you hold down [Ctrl] whilst left clicking a variable, you get taken straight to its definition.</p>

<p>Handy!</p>
]]></content>
  </entry>
  
</feed>
