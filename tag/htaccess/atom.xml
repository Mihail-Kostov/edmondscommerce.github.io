<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: htaccess | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/htaccess/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-11-25T09:21:25+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Restrict Access Using .htaccess File Rules in PHP]]></title>
    <link href="http://edmondscommerce.github.io/php/restrict-access-using-htaccess-file-rules-in-php.html"/>
    <updated>2013-03-11T15:29:34+00:00</updated>
    <id>http://edmondscommerce.github.io/php/restrict-access-using-htaccess-file-rules-in-php</id>
    <content type="html"><![CDATA[<p>The function below is one that we have used a few times to allow certain &ldquo;admin only&rdquo; assets to be accessed or visible on the front end of a website.</p>

<p>The theory is that the htaccess file in the admin folder will be kept up to date and can therefore be used as the authoritative list of IP addresses that are allowed to access admin assets.</p>

<p>This function is simple enough and should be useful anywhere that you use htaccess to protect a certain folder and would like to implement the same white list rules in other places without having to maintain a duplicate list of authorised IP addresses.</p>

<p>The function also uses <a href="http://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static" title="PHP.net Static Variables" target="_blank">static variables</a> &ndash; a lesser known bit of PHP functionality which can be a nice easy performance optimisation when working with procedural PHP code. If a function will be called many times and will always return the same result in a single request, you can actually cache that result to a static variable and serve that on any subsequent requests.</p>

<p>```php</p>

<p>function isAllowedIp() {</p>

<pre><code>static $pass = null;
if ($pass !== null) {
    return $pass;
}
$pass=false;
$customer_ip = $_SERVER['REMOTE_ADDR'];    
$htaccess = file_get_contents('admin/.htaccess');
preg_match_all('%allow from ([0-9.]+)%', $htaccess, $matches);
foreach ($matches[1] as $ip) {
    if ($ip == $customer_ip) {
        $pass = true; //this is stored statically for perfomance reasons
        return true;
    }
}
return false;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geany Text Editor Remove Hash Comments]]></title>
    <link href="http://edmondscommerce.github.io/geany/geany-text-editor-remove-hash-comments.html"/>
    <updated>2012-11-12T11:25:16+00:00</updated>
    <id>http://edmondscommerce.github.io/geany/geany-text-editor-remove-hash-comments</id>
    <content type="html"><![CDATA[<p>I recently needed to quickly remove some commented lines from a .htaccess file using Geany (a really nice lightweight IDE or feature rich text editor depending on your point of view).</p>

<p>Geany has some powerful regex replace functionality in there but I found that it was overly aggressive so removed lines that had more than one hash and were in fact title sections that needed to stay intact.</p>

<p>The working formula was:</p>

<p>Search for:
<code>
^<a href="[^#]">#</a>
</code></p>

<p>And replace with:</p>

<p><code>\1</code></p>

<p>And of course tick the regex box.</p>

<p><img src="/assets/geany.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mod_rewrite Strip Query String]]></title>
    <link href="http://edmondscommerce.github.io/mod_rewrite/mod_rewrite-strip-query-string.html"/>
    <updated>2010-02-03T10:24:06+00:00</updated>
    <id>http://edmondscommerce.github.io/mod_rewrite/mod_rewrite-strip-query-string</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>To make your RewriteRule strip the query string, simply append a ? to the end of the rewrite path, eg:</p>

<p>```</p>

<h1>redirect all requests to a subfolder to the home page</h1>

<h1>strips query string</h1>

<p>RewriteEngine On
RewriteBase /
RewriteRule ^subfolder/.*$ /index.php? [L,R=301]</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Htaccess Force SSL with Redirect (Non Standard SSL Port Compatible)]]></title>
    <link href="http://edmondscommerce.github.io/hosting/htaccess-force-ssl-with-redirect-non-standard-ssl-port-compatible.html"/>
    <updated>2009-04-28T11:07:26+01:00</updated>
    <id>http://edmondscommerce.github.io/hosting/htaccess-force-ssl-with-redirect-non-standard-ssl-port-compatible</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>Check out this little snippet of htaccess code to force SSL usage. Works regardless of port.</p>

<p>```</p>

<p>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) <a href="https://%">https://%</a>{HTTP_HOST}%{REQUEST_URI}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
