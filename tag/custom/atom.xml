<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: custom | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/custom/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-11-11T14:12:46+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tab Complete for SSH and SCP]]></title>
    <link href="http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp.html"/>
    <updated>2013-07-26T10:31:41+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp</id>
    <content type="html"><![CDATA[<p>If you are required to connect to different servers, then remembering and typing in all of the details can become tiresome.</p>

<p>Thankfully there is simple solution to this, using the SSH config file.</p>

<p>To make use of this, create the following file ~/.ssh/config</p>

<p>In there add the following details</p>

<p>```bash</p>

<p>Host easyToRememberName</p>

<pre><code>HostName 127.0.0.1
Port 2020
User ross
</code></pre>

<p>```</p>

<p>You will then can tab completion on ssh and scp commands. You can see more of the options that can be set in the file <a href="http://linux.die.net/man/5/ssh_config" title="ssh config man page">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Terminal Rename Programmatically]]></title>
    <link href="http://edmondscommerce.github.io/bash/bash-terminal-rename-programmatically.html"/>
    <updated>2013-01-16T12:56:15+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/bash-terminal-rename-programmatically</id>
    <content type="html"><![CDATA[<p>If you have a load of terminals open you might find it handy to be able to rename the window title on the fly.</p>

<p>You can do this easily by copying this code into your ~/.bashrc file (or even pasting it into your terminal if you like)</p>

<p>```bash</p>

<p>function nameTerminal() {</p>

<pre><code>[ &amp;quot;${TERM:0:5}&amp;quot; = &amp;quot;xterm&amp;quot; ]   &amp;amp;&amp;amp; local ansiNrTab=0
[ &amp;quot;$TERM&amp;quot;       = &amp;quot;rxvt&amp;quot; ]    &amp;amp;&amp;amp; local ansiNrTab=61
[ &amp;quot;$TERM&amp;quot;       = &amp;quot;konsole&amp;quot; ] &amp;amp;&amp;amp; local ansiNrTab=30 ansiNrWindow=0
    # Change tab title
[ $ansiNrTab ] &amp;amp;&amp;amp; echo -n $'\e'&amp;quot;]$ansiNrTab;$1&amp;quot;$'\a'
    # If terminal support separate window title, change window title as well
[ $ansiNrWindow -a &amp;quot;$2&amp;quot; ] &amp;amp;&amp;amp; echo -n $'\e'&amp;quot;]$ansiNrWindow;$2&amp;quot;$'\a'
</code></pre>

<p>}</p>

<p>```</p>

<p>If you have pasted this into your ~/.bashrc file you need to launch a new terminal or run:</p>

<p>```bash</p>

<p>source ~/.bashrc</p>

<p>```</p>

<p>From this point the function is now ready to use and you can run:</p>

<p>```bash</p>

<p>nameTerminal &quot;My Custom Terminal Window Title&quot;</p>

<p>```</p>

<p>Now you can easily choose the terminal you want based upon the window title.</p>

<p>Of course this then opens the door to automatically changing the window title based on all kinds of events that you might like, isn&rsquo;t bash scripting fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Category Pages to Display Subcategories]]></title>
    <link href="http://edmondscommerce.github.io/magento/enable-category-pages-to-display-subcategories.html"/>
    <updated>2012-06-01T15:12:22+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/enable-category-pages-to-display-subcategories</id>
    <content type="html"><![CDATA[<p>Thinking of being able to set different Magento Categories to display its sub-categories which can be controllable in the Magento admin i.e. <img src="/assets/Screenshot-New-Category-Manage-Categories-Categories-Catalog-Magento-Admin-Chromium-150x150.png">
</p>
You might be interested in using or viewing the zipped file here;<a href='http://www.edmondscommerce.co.uk/wp-content/uploads/2012/06/subcat.zip'>subcat</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Controller Action Return Json (for AJAX, API etc)]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc.html"/>
    <updated>2012-02-15T14:15:01+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-controller-action-return-json-for-ajax-api-etc</id>
    <content type="html"><![CDATA[<p>If you have a controller action that is designed to be accessed by AJAX requests or perhaps as part of a custom API system then you might like this snippet.</p>

<p>If you are working with the above scenario you likely would like to return pure JSON without any HTML etc. Also serving up the correct content type headers is going to be helpful, its not HTML, its JSON.</p>

<p>```php</p>

<pre><code>public function searchAction(){
    $query = $this-&gt;getRequest()-&gt;getParam('query');
    $json = Mage::getModel('mymodule/mymodel')-&gt;getSearchJson($query);
    $this-&gt;getResponse()-&gt;setHeader('Content-type', 'application/json');
    $this-&gt;getResponse()-&gt;setBody($json);
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Force Download with Custom Filename]]></title>
    <link href="http://edmondscommerce.github.io/php/php-force-download-with-custom-filename.html"/>
    <updated>2012-01-23T15:22:03+00:00</updated>
    <id>http://edmondscommerce.github.io/php/php-force-download-with-custom-filename</id>
    <content type="html"><![CDATA[<p>If you want to serve up text files for download (perhaps product feeds etc) then you might like this little snippet.</p>

<p>Not only will it force the file to be downloaded but it allows you to specify a custom filename that it should be saved as.</p>

<p>```php</p>

<p>if(isset($_GET[&lsquo;download_file&rsquo;])){</p>

<pre><code>header("Content-type: application/octet-stream");
header("Content-Disposition: attachment; filename=Export.txt");
readfile('Export.txt');
die;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
