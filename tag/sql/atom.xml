<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: sql | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/sql/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-02-11T16:19:12+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL Substring not Returning Anything + Solution]]></title>
    <link href="http://edmondscommerce.github.io/mysql/mysql-substring-not-returning-anything-solution.html"/>
    <updated>2013-08-20T10:54:20+01:00</updated>
    <id>http://edmondscommerce.github.io/mysql/mysql-substring-not-returning-anything-solution</id>
    <content type="html"><![CDATA[<p>If you are puzzled why your simple usage of the MySQL SUBSTRING() function is not returning anything this could be your solution.</p>

<p>The substring function allows you to specify a string (eg a column), the start character and the length. If you are used to languages like PHP then you are probably used to this kind of function regarding 0 as the starting character. In fact this function regards 1 as the starting character. If you specify 0 then you simply won&rsquo;t get any results.</p>

<p>This does not work:
```</p>

<p>SELECT SUBSTRING(column, 0, 10) as tenchars</p>

<p>```</p>

<p>This does work:
```</p>

<p>SELECT SUBSTRING(column, 1, 10) as tenchars</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Multiple MySQL Queries in a Single Function]]></title>
    <link href="http://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function.html"/>
    <updated>2012-11-14T12:45:09+00:00</updated>
    <id>http://edmondscommerce.github.io/php/run-multiple-mysql-queries-in-a-single-function</id>
    <content type="html"><![CDATA[<p>If you want to be able to run multiple queries in a single function call, for example doing the classic drop table blah; create table blah; then you might like this function.</p>

<p>The use case is for things like database migration systems which you might copy and paste chunks of SQL including multiple queries from things like phpMyAdmin</p>

<p>```php</p>

<p>/<em>*
 * Run multiple queries passed in as a single string
 * This is optimised for copying and pasting from phpMyAdmin
 *
 * Handy for things like database migration systems
 *
 * @param string $sql  multiple queries terminated with ; and a new line
 </em>/
function multiQuery($sql)
{</p>

<pre><code>$sqls = preg_split('%;$%m', trim($sql));
foreach ($sqls as $q) {
    if (empty($q)) {
        continue;
    }
    mysql_query($q); //suggest you replace this with your custom query function or if not throw in some extra error checking at least
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Admin Menu not working after Upgrade]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-admin-menu-not-working-after-upgrade.html"/>
    <updated>2012-07-30T09:39:07+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-admin-menu-not-working-after-upgrade</id>
    <content type="html"><![CDATA[<p>Wondering why your Magento admin menu is not showing up after upgrading your live Magento store?</p>

<p>If all attempts to get to a particular admin page with the exception of the dashboard proved abortive, this could be because there is a conflict between the Magento function that merges all Javascript files and the Apache URL rewrite.  This could be fixed by turning off this Magento function, and your can run the script below to do this.</p>

<p>```sql</p>

<p>UPDATE  <code>[your_magento_database_name]</code>.<code>core_config_data</code> SET  <code>value</code> =  &lsquo;0&rsquo; WHERE  <code>core_config_data</code>.<code>path</code> =<code>dev/js/merge_files</code>;</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento addAttributeToFilter() and addAttributeToSelect()]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-addattributetofilter-and-addattributetoselect.html"/>
    <updated>2012-02-25T19:49:58+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-addattributetofilter-and-addattributetoselect</id>
    <content type="html"><![CDATA[<p>These two  Magento functions looks more like there is no obvious difference between them, but there is.</p>

<p>addAttributeToFilter(&lsquo;some_attribute1&rsquo;,&lsquo;attribute_value&rsquo;) filters a Magento entity collection (e.g Products, categories) by only selecting entities that has &lsquo;some_attribute&rsquo; equal to &lsquo;attribute_value&rsquo; while</p>

<p>addAttributeToSelect(&lsquo;some_attribute2&rsquo;)  tells Magento to return add &lsquo;some_attributes&rsquo; to the set of properties that would be returned for a collection of entities.</p>

<p>A combination of these two functions could be  likened to <code>sql
SELECT 'some_attribute2' FROM Table WHERE 'some_attribute1'='attribute_value'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento View SQL For Collection]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-view-sql-for-collection.html"/>
    <updated>2010-10-21T10:46:19+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-view-sql-for-collection</id>
    <content type="html"><![CDATA[<p>If you are working with collections and would like to verify that the actual SQL being used is what you expect it to be then this little tip might prove really handy.</p>

<p>For any collection you can call the method getSelect(). This retrieves the actual Select object that handles the query.</p>

<p>If you cast this select object to a string, you get the raw SQL query, so for example the following is pretty handy:</p>

<p>```php</p>

<p>die(var_dump((string)$collection->getSelect()));</p>

<p>```</p>

<p>This way you can tweak your collection filters etc and check that its doing what you expect it to be doing</p>
]]></content>
  </entry>
  
</feed>
