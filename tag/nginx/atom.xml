<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: nginx | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/nginx/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-02-11T11:25:01+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PageSpeed and issue with images on Safari]]></title>
    <link href="http://edmondscommerce.github.io/PageSpeed/pagespeed-and-issue-with-images-on-safari.html"/>
    <updated>2015-01-30T16:15:13+00:00</updated>
    <id>http://edmondscommerce.github.io/PageSpeed/pagespeed-and-issue-with-images-on-safari</id>
    <content type="html"><![CDATA[<p>Had an issue on a client site where the images were working in all major browser with the exception of safari. The client had page speed installed with the &lsquo;rewrite_images&rsquo; filter enabled.
So it would work with older versions of Safari there are two options:</p>

<p>For the first option we can disable the &lsquo;convert_jpeg_to_webp&rsquo; and &lsquo;convert_to_webp_lossless&rsquo; filters in nginx by using the following after the &lsquo;rewrite_images&rsquo; and &lsquo;resize_rendered_image_dimensions&rsquo; filters:</p>

<pre><code>pagespeed EnableFilters rewrite_images;
pagespeed EnableFilters resize_rendered_image_dimensions;
pagespeed DisableFilters convert_jpeg_to_webp,convert_to_webp_lossless;
</code></pre>

<p>In Apache use the following:</p>

<pre><code>ModPagespeedDisableFilters convert_jpeg_to_webp,convert_to_webp_lossless
</code></pre>

<p>Please not that the diable option must be specified after the enable lines for &lsquo;rewrite_images&rsquo; and &lsquo;resize_rendered_image_dimensions&rsquo; filters.</p>

<p>In versions of PageSpeed that are 1.8.31.2 and above there is a new option which is &lsquo;ServeRewrittenWebpUrlsToAnyAgent&rsquo; which will check to see if the client can support webp files on any webp urls that are accessed.</p>

<p>In Nginx to enable this option:</p>

<pre><code>pagespeed ServeRewrittenWebpUrlsToAnyAgent off;
</code></pre>

<p>Alternatively in apache the setting is:</p>

<pre><code>ModPagespeedServeRewrittenWebpUrlsToAnyAgent off
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Varnish and Nginx redirecting to port 8080]]></title>
    <link href="http://edmondscommerce.github.io/nginx/varnish/varnish-and-nginx-redirecting-to-port-8080.html"/>
    <updated>2015-01-23T15:22:43+00:00</updated>
    <id>http://edmondscommerce.github.io/nginx/varnish/varnish-and-nginx-redirecting-to-port-8080</id>
    <content type="html"><![CDATA[<p>So theres a strange problem where any redirects are going port 8080 when running your web application or site under varnish and nginx. Now arroung the web the solution apears to have varnish listen locally on port 80 while leaving nginx to listen on port 80 for any network addresses. The issue is that nginx when doing a redirect will add the port automatically to any redirect specified in nginx or is triggered from php, this is so that you dont have to ajust your rewrites if you are running on a non standard web port. But in the case of running varnish on top we dont want this behaviour to happen.</p>

<p>To stop this in the location, server or http context of your nginx config. Simply add:</p>

<p><code>bash
port_in_redirect off;
</code></p>

<p>As by default according to the <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#port_in_redirect">nginx documentation</a> this behaviour is on by default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile NGINX with PageSpeed and ModSecurity on CentOS]]></title>
    <link href="http://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos.html"/>
    <updated>2014-11-11T14:06:37+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/compile-nginx-with-pagespeed-and-modsecurity-on-centos</id>
    <content type="html"><![CDATA[<p>ModSecurity is a brilliant addition to web servers to block any nefarious requests before they hit your application.
This improves security and reduces load if your server comes under attack as the requests are killed very quickly.</p>

<p>PageSpeed is a module provided by Google to automatically improve the performance of your web pages in the browser. In a stroke it can offer a much more responsive front end with just a few configuration options.</p>

<p>Nginx is a very fast and lightweight web server ideal for using with back end servers such as PHP-FPM.</p>

<p>Here is a script that will download and compile Nginx with the two modules and also apply the correct ModSecurity configuration.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>echo &ldquo;Please run as root&rdquo;
yum install gcc-c++ pcre-dev pcre-devel zlib-devel make unzip</p>

<p>NPS_VERSION=1.9.32.2;</p>

<p>NGINX_VERSION=1.7.7;</p>

<p>MODSEC_VERSION=2.8.0</p>

<p>NGINX_EXTRA_MODULES=&ldquo; &mdash;with-http_realip_module &mdash;with-http_ssl_module &rdquo;;</p>

<p>NGINX_ADD_MODULES=&lsquo;&rsquo;</p>

<p>WORKING_DIRECTORY=/opt/nginx_with_pagespeed_and_mod_security</p>

<p>mkdir -p $WORKING_DIRECTORY</p>

<h1>echo "</h1>

<p>Mod Security</p>

<p>Installing dependencies, grabbing the repo, checking out the tag for our version and building it
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ldquo;
cd $WORKING_DIRECTORY
yum install libtool httpd-devel libxml2 libxml2-devel
git clone <a href="https://github.com/SpiderLabs/ModSecurity.git">https://github.com/SpiderLabs/ModSecurity.git</a>
cd ModSecurity
git checkout tags/v${MODSEC_VERSION}
./autogen.sh
./configure &mdash;enable-standalone-module &mdash;disable-mlogc
make
make install
NGINX_ADD_MODULES=&rdquo;$NGINX_ADD_MODULES &mdash;add-module=$WORKING_DIRECTORY/ModSecurity/nginx/modsecurity &ldquo;
echo &rdquo;</p>

<h2>Mod Security Config and Rules</h2>

<p>For nginx, we have to get all the config and cat it all into one single config file
&ldquo;
wget <a href="https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended">https://raw.githubusercontent.com/SpiderLabs/ModSecurity/master/modsecurity.conf-recommended</a>
cat modsecurity.conf-recommended  > /etc/nginx/modsecurity.conf
wget <a href="https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master">https://github.com/SpiderLabs/owasp-modsecurity-crs/tarball/master</a> -O owasp-modsecurity-crs.tar.gz
tar -xvzf owasp-modsecurity-crs.tar.gz
CRS_DIR=$(find . -type d -name SpiderLabs-owasp-modsecurity-crs<em>)
cat ${CRS_DIR}/modsecurity_crs_10_setup.conf.example >> /etc/nginx/modsecurity.conf
cat ${CRS_DIR}/base_rules/modsecurity_</em>.conf >> /etc/nginx/modsecurity.conf
for f in $(find $CRS_DIR -type f -name *.data)
do</p>

<pre><code>FILE=$(basename $f)
CMD="cp $f /etc/nginx/$FILE"
echo ${CMD}
${CMD}
</code></pre>

<p>done
cp ModSecurity/unicode.mapping /etc/nginx/unicode.mapping</p>

<h1>echo "</h1>

<h2>Page Speed</h2>

<p>Downlading the pagespeed version and building this
&ldquo;
cd $WORKING_DIRECTORY
wget <a href="https://github.com/pagespeed/ngx_pagespeed/archive/release-$">https://github.com/pagespeed/ngx_pagespeed/archive/release-$</a>{NPS_VERSION}-beta.zip
unzip release-${NPS_VERSION}-beta.zip
cd ngx_pagespeed-release-${NPS_VERSION}-beta/
wget <a href="https://dl.google.com/dl/page-speed/psol/$">https://dl.google.com/dl/page-speed/psol/$</a>{NPS_VERSION}.tar.gz
tar -xzvf ${NPS_VERSION}.tar.gz  # extracts to psol/
NGINX_ADD_MODULES=&rdquo;$NGINX_ADD_MODULES &mdash;add-module=$WORKING_DIRECTORY/ngx_pagespeed-release-${NPS_VERSION}-beta "</p>

<h1>echo "</h1>

<h2>Nginx</h2>

<p>Finally, compiling Nginx with our extra modules and the added modules and installing it
&ldquo;
cd $WORKING_DIRECTORY
wget <a href="http://nginx.org/download/nginx-$">http://nginx.org/download/nginx-$</a>{NGINX_VERSION}.tar.gz
tar -xvzf nginx-${NGINX_VERSION}.tar.gz
cd nginx-${NGINX_VERSION}/
./configure $NGINX_ADD_MODULES $NGINX_EXTRA_MODULES
make
sudo make install</p>

<h1>echo "</h1>

<p>COMPLETED INSTALL &ndash; CHECKING</p>

<p>checking the nginx version now, should be $NGINX_VERSION and you should see our modules
&ldquo;
nginx -V</p>

<p>echo &ldquo;
And now doing a config test&rdquo;
/etc/init.d/nginx configtest</p>

<h1>echo "</h1>

<p>SCRIPT COMPLETED</p>

<p>However, you are not there yet</p>

<p>You need to go and look at the /etc/nginx/modsecurity.conf file and change settings there as appropriate</p>

<p>Also you need to modify your nginx vhost config &ndash; see:
<a href="https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Configuration_Steps">https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Configuration_Steps</a>
&ldquo;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoAccess - Nice CLI Access Log Parsing Tool (and how to install on CentOS)]]></title>
    <link href="http://edmondscommerce.github.io/sysadmin/goaccess-nice-cli-access-log-parsing-tool-and-how-to-install-on-centos.html"/>
    <updated>2014-04-24T12:40:27+01:00</updated>
    <id>http://edmondscommerce.github.io/sysadmin/goaccess-nice-cli-access-log-parsing-tool-and-how-to-install-on-centos</id>
    <content type="html"><![CDATA[<p>Log files are probably the single most useful item on a web server when it comes to debugging. They are packed full of all the information you need to understand what is
happening on the server and detect any potential issues.</p>

<p>Reading log files by hand is basically imposssible for any meaningful overall monitoring. You can of course do some grepping and other bash tools to gain more insights but some times it&rsquo;s nice to just have a simple tool.</p>

<p>I am a big fan of tools like top, mytop, apachetop and ngxtop. GoAccess is a little bit different though, mainly it just seems a lot more fully featured.</p>

<p>Best thing to do is to try it. Here is how to install it on CentoOS</p>

<p>``` bash
yum install ncurses-devel glib2-devel geoip-devel
mkdir -p ~/goaccess
cd ~/goaccess
wget <a href="http://downloads.sourceforge.net/project/goaccess/0.7.1/goaccess-0.7.1.tar.gz">http://downloads.sourceforge.net/project/goaccess/0.7.1/goaccess-0.7.1.tar.gz</a>
tar -xzvf goaccess-0.7.1.tar.gz
cd goaccess-0.7.1/
./configure &mdash;enable-geoip &mdash;enable-utf8
make
make install</p>

<p>```</p>

<p>You can read more about GoAccess here:
<a href="http://goaccess.prosoftcorp.com/">http://goaccess.prosoftcorp.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Admin Login Not Working in Some Browsers + Solution]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-admin-login-not-working-in-some-browsers.html"/>
    <updated>2012-11-13T16:17:29+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-admin-login-not-working-in-some-browsers</id>
    <content type="html"><![CDATA[<p>If you are tearing your hair out trying to figure out why you are not able to log into the Magento admin on some browsers then this might be your solution.</p>

<p>This solution will apply particularly if you are setting up Magento on a brand new server or VPS as you will see.</p>

<p>The problem is actually that the server time is wrong. The server time is used for generating cookies and the fact that the time is wrong means that cookies become invalidated immediately. Some browsers will deal with this in a less aggressive way than others and might actually let the cookie work, others will go for hard line security and will make the whole thing break.</p>

<p>The way to check this is to SSH into the server and check the time:</p>

<p>```bash</p>

<p>date</p>

<p>```</p>

<p>If the time is wrong then you need to do the following to fix it:</p>

<p>```bash</p>

<p>yum install ntp
chkconfig ntpd on
ntpdate pool.ntp.org
/etc/init.d/ntpd start</p>

<p>```</p>

<p>The above will install NTP, make it run on startup, will update the time and will set it running so the time should stay up to date from here on.</p>

<p>To check that has worked simply check the time again:
```bash</p>

<p>date</p>

<p>```</p>

<p>Then finally flush your Magento cache and sessions</p>

<p>```bash</p>

<p>rm -rf var/cache/<em>
rm -rf var/sessions/</em></p>

<p>```</p>

<p>And you should be good to go</p>
]]></content>
  </entry>
  
</feed>
