<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: test | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/test/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-02-14T17:47:11+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Faker Symfony2 Integration]]></title>
    <link href="http://edmondscommerce.github.io/symfony2/faker-symfony2-integration.html"/>
    <updated>2013-12-02T20:43:49+00:00</updated>
    <id>http://edmondscommerce.github.io/symfony2/faker-symfony2-integration</id>
    <content type="html"><![CDATA[<p>Generating test data is a crucial part of properly testing your code. If you have to hard code your test data or fixtures then you might be tempted to use only a small number of test entities.</p>

<p>To help with this you can use the brilliant <a href="https://github.com/fzaninotto/Faker">Faker</a> library to generate your test data. The Faker library is designed purely to generate test data and has a range of providers for all kinds of data.</p>

<p>As if that wasn&rsquo;t good enough, you can leverage all the power of this library in your Symfony2 development by simply installing this Symfony2 bundle, <a href="https://github.com/willdurand/BazingaFakerBundle/blob/master/Resources/doc/index.md">BazingaFakerBundle</a>.</p>

<p>Installation is a breeze with Composer and then simply reference your entities in the configuration and run the command</p>

<p><code>
app/console faker:populate
</code></p>

<p>To generate your entities programmatically rather than as a command line action (perhaps as part of a unit or functional test) you can use this code:</p>

<p>``` php
//Faker load test data
$populator = $this->getContainer()&ndash;>get(&lsquo;faker.populator&rsquo;);
$insertedPks = $populator->execute();
foreach ($insertedPks as $class => $pks) {</p>

<pre><code>$reflClass = new \ReflectionClass($class);
$shortClassName = $reflClass-&gt;getShortName();
printf("\nFaker: Inserted %s new %s objects\n", count($pks), $shortClassName);
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Auto Populate Form Fields - Form Fuzzer]]></title>
    <link href="http://edmondscommerce.github.io/chrome/chrome-auto-populate-form-fields-form-fuzzer.html"/>
    <updated>2012-09-13T10:42:59+01:00</updated>
    <id>http://edmondscommerce.github.io/chrome/chrome-auto-populate-form-fields-form-fuzzer</id>
    <content type="html"><![CDATA[<p>If you ever used Webmaster Tools in Firefox but have now switched to using Chrom(e|ium) instead then you probably miss the form filler &ndash; especially if you ever need to test checkouts or other form intensive web site user stories.</p>

<p>A nice little extension that I just discovered takes care of this, <a href="https://chrome.google.com/webstore/detail/cbpplldpcdcfejdaldmnfhlodoadjhii" target="_blank">Chrome Form Fuzzer</a>.</p>

<p>You can configure it for simple form filling or with a little creative configuration it could easily be used for security testing and more in depth testing to ensure that input is being sanitised and filtered properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Automated Testing for Quality Assurance]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-automated-testing-for-quality-assurance.html"/>
    <updated>2012-03-01T08:39:04+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-automated-testing-for-quality-assurance</id>
    <content type="html"><![CDATA[<p>Widely regarded as best practice, the use of automated tests to ensure the correct functioning of your web application is a really powerful and useful practice.</p>

<p>For Magento it has historically been something that you would need to create yourself.</p>

<p>Now Magento have released a comprehensive package of 1000 tests that you can download as a package.</p>

<p>Based on Selenium the package will allow you to to test your store and will also assist with the creation of your own custom tests.</p>

<p><a href="http://www.magentocommerce.com/blog/comments/automate-your-testing-with-the-magento-test-automation-framework/"><a href="http://www.magentocommerce.com/blog/comments/automate-your-testing-with-the-magento-test-automation-framework/">http://www.magentocommerce.com/blog/comments/automate-your-testing-with-the-magento-test-automation-framework/</a></a></p>

<p>Another great development for Magento.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Basics, some thing that is false and true at the same time!]]></title>
    <link href="http://edmondscommerce.github.io/php/php-basics-some-thing-that-is-false-and-true-at-the-same-time.html"/>
    <updated>2012-02-14T15:16:55+00:00</updated>
    <id>http://edmondscommerce.github.io/php/php-basics-some-thing-that-is-false-and-true-at-the-same-time</id>
    <content type="html"><![CDATA[<p>What can be true and false at the same time?
```php</p>

<p>$a = &ldquo;a&rdquo;;
$b = 0;</p>

<p>if($a == true &amp;&amp; $b == false &amp;&amp; $a == $b) {</p>

<pre><code>echo "Passed";
</code></pre>

<p>}</p>

<p>```</p>

<p>This is because PHP tries to convert &ldquo;a&rdquo; to a numeric, as there is no numeric value it gets changed to zero. So 0 == 0 is true. At the same time the string &ldquo;a&rdquo; converted to boolean evaluates to true. 0 evaluates to false. While there isn&rsquo;t an actual value that is both true and false that the same type, depending on the context a value may evaluate to true or false depending on what it is been compared to. To avoid problems like this, you should use triple equals (===) unless you know other wise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Question: How to Create Bootable Linux USB Key/Drives Easily from Linux]]></title>
    <link href="http://edmondscommerce.github.io/linux/question-how-to-create-bootable-linux-usb-keydrives-easily-from-linux.html"/>
    <updated>2011-12-13T21:49:35+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/question-how-to-create-bootable-linux-usb-keydrives-easily-from-linux</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>Answer to this quite clear and simple question is:</p>

<p>unetbootin</p>

<p>Not the easiest to find but definitely one of the easiest solutions.</p>

<p>If you search for USB bootable drive generators mostly you will find windows apps.</p>

<p>Not too useful if you are already on Linux and simply want to try the latest version or perhaps an alternative distro on something that is going to give more useful performance than the traditional live CD.</p>

<p><a href="http://unetbootin.sourceforge.net/">uNetbootin</a> is a nice solid cross platform USB bootable Linux generator that will even handle the download of ISOs for you if required.</p>
]]></content>
  </entry>
  
</feed>
