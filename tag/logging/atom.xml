<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: logging | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/logging/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-06-24T10:23:39+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP API Development Logging and Debugging]]></title>
    <link href="http://edmondscommerce.github.io/php/4145.html"/>
    <updated>2013-03-14T14:53:48+00:00</updated>
    <id>http://edmondscommerce.github.io/php/4145</id>
    <content type="html"><![CDATA[<p>If you are ever working with API integrations, either in or out bound, then it might be useful to set up a simple dumb logging system to assist you with developing and debugging things.</p>

<p>Here is a really simple snippet to help you along with that.</p>

<p>It literally takes exactly what it has received and logs it with no messing about. Brilliant!</p>

<p>```php</p>

<p>&lt;?php
$log[&lsquo;raw_input&rsquo;]=file_get_contents(&lsquo;php://input&rsquo;);
$log[&lsquo;<em>POST&rsquo;]=$</em>POST;
$log[&lsquo;<em>GET&rsquo;]=$</em>GET;</p>

<p>file_put_contents(&lsquo;inboundXML.log&rsquo;, var_export($log, true));</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formatting the output from tail]]></title>
    <link href="http://edmondscommerce.github.io/linux/formatting-the-output-from-tail.html"/>
    <updated>2012-01-11T16:27:41+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/formatting-the-output-from-tail</id>
    <content type="html"><![CDATA[<p>If you need to monitor a log file in real time, then using a combination of tail and grep will allow you to watch the important parts of the file. However if the log file spans more than one line then it can quickly become difficult to read.</p>

<p>By using sed you are able to format the text so it is easier to read like this</p>

<p><code>
tail -f /path/to/file | sed -u G | grep -A 1 searchTerm
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Enable Exception Logging]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-enable-exception-logging.html"/>
    <updated>2010-11-15T14:55:19+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-enable-exception-logging</id>
    <content type="html"><![CDATA[<p>Magento has some great exception logging functionality which is invaluable when trying to figure out why things aren&rsquo;t working.</p>

<p>However, like a lot of settings in Magento, its tucked away in the configuration and its not always easy to remember how to enable it.</p>

<p>So here it is:</p>

<p>System->Configuration->Developer->Log Settings</p>

<p>Once its enabled, the log files will be created in /var/logs/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento More Detailed Exception Log]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-more-detailed-exception-log.html"/>
    <updated>2009-06-10T12:52:59+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-more-detailed-exception-log</id>
    <content type="html"><![CDATA[<p>Magento has a nice feature which logs exceptions to file and then generally displays a non scary message to the site user. Its not always true, some exceptions do get through and then generate reports.</p>

<p>For exceptions that are caught and logged though, (if you have logging enabled) you will find the exception log in the var/logs folder. However the exception log only contains the getTraceAsString info, which is heavily truncated and often pretty much useless. To get around this you can modify the logException method in Mage.php.</p>

<p>Note, editing Mage.php directly is not generally a good idea and any edits will get nuked every time you upgrade. However for local development work this little edit is OK I think.</p>

<p>```php</p>

<p> public static function logException(Exception $e)</p>

<pre><code>{
    if (!self::getConfig()) {
        return;
    }
    $file = Mage::getStoreConfig('dev/log/exception_file');
    //self::log("n".$e-&gt;getTraceAsString(), Zend_Log::ERR, $file);
    $exceptionString = "nnnLogged Exception:nn" . $e-&gt;getMessage() . "nn" . $e-&gt;getTraceAsString();
    /*foreach($e-&gt;getTrace() as $t){
        $exceptionString .= var_export($t, true);
    }*/
    self::log($exceptionString, Zend_Log::ERR, $file);
}
</code></pre>

<p>```</p>

<p>Note I experimented with echoing out each trace as detailed in <a href="http://www.edmondscommerce.co.uk/blog/zend-framework/zend-framework-more-detailed-stack-trace/">this post</a>, however I found that this caused a fatal error due to some kind of recursion so I have commented it out. The only real change is that I have logged also the Exception message, which is generally the most useful bit of info and will actually help you understand what has gone wrong, in which file and on which line.</p>

<p>Hope this helps someone else out. If you have any suggestions on a cleaner or better way to do this please do post it / link it in the comments.</p>
]]></content>
  </entry>
  
</feed>
