<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: sysadmin | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/sysadmin/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-02T21:13:53+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL 5.1 to 5.5 Migration]]></title>
    <link href="http://edmondscommerce.github.io/mysql/mysql-5-1-to-5-5-migration.html"/>
    <updated>2012-09-18T11:09:09+01:00</updated>
    <id>http://edmondscommerce.github.io/mysql/mysql-5-1-to-5-5-migration</id>
    <content type="html"><![CDATA[<p>According to pretty much every source there&rsquo;s only one sensible way to migrate from 5.0, 5.1 or 5.2 to 5.5 of mysql (or mariadb/percona for that matter), and it&rsquo;s not pretty (for a server with only two active magento installations for instance, this will take about 3 hours).</p>

<p>The answer is that you have to do an sql dump and restore.  This does take an age but does at least provide the reassurance that you are going to have nice clean databases after the upgrade.</p>

<p>So the commands are :&ndash;
```bash</p>

<p>mysqldump &mdash;all-databases &mdash;routines &mdash;events > fulldump.sql
mysqldump mysql &mdash;tables user > users.sql</p>

<p>```</p>

<p>Then upgrade mysql binaries to 5.5 and empty the database directory &ndash; such as /var/lib/mysql and start mysql with it&rsquo;s script (e.g. /etc/init.d/mysql start).   Note, if you&rsquo;re using a distribution that doesn&rsquo;t come with start scripts, you may want to run mysql_install as root before starting mysql however you start it.</p>

<p>Then the following will restore the databases and users :
```bash</p>

<p>mysql -u root # add -p if you set up a default password when upgrading/installing 5.5
\r mysql
source users.sql
source fulldump.sql
FLUSH PRIVILEGES;
\q</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transfer Server Permissions]]></title>
    <link href="http://edmondscommerce.github.io/linux/transfer-server-permissions.html"/>
    <updated>2012-09-17T15:00:01+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/transfer-server-permissions</id>
    <content type="html"><![CDATA[<p>So sometimes you might have a restored backup without the correct permissions (whether that be because the backup didn&rsquo;t store the permissions, the file system refused to take them, or you simply forgot to add the -p flag to tar!) and you want to copy the permissions from one machine to another.</p>

<p>Here&rsquo;s a little script to do just that that we found whilst browsing the internet to do just that (uses perl and find) :&ndash;
```bash</p>

<p>find / -type f -o -type d 2>/dev/null | while read FILE; do   perl -le'</p>

<pre><code>printf "chmod %o \"%s\"\n", 07777 &amp; (stat)[2], $_
for @ARGV
</code></pre>

<p>  &lsquo; &ldquo;$FILE&rdquo;; done > /tmp/file_perms.sh</p>

<p>```</p>

<p>If you run that on the server with the correct permissions, then transfer the file to the server with the wrong permissions and run the file with the following command, it will fix the perms on that server :&ndash;
```bash</p>

<p>sh /tmp/file_perms.sh</p>

<p>```</p>

<p>Which may save a lot of transfer time restoring a new backup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Performance Problems]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-performance-problems.html"/>
    <updated>2012-04-16T08:56:48+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-performance-problems</id>
    <content type="html"><![CDATA[<p>If you are having performance issues with your Magento store and you are running on a dedicated or VPS server that you think should be up to the task of running your store properly but you continue to have performance problems then this post is for you.</p>

<p>Having decent server specification is only the first step on the road to having a high performance Magento store. Without proper configuration your server is not going to make the best use of its resources and that could make the difference of literally seconds or even tens of seconds of page load time.</p>

<p>The first and most important thing to check is that you are running a PHP opcode cacher such as APC. Opcode caching takes your PHP source code and compiles it to opcodes and then stores this in a cache. This opcode is actually what is run when people visit your store and the process of creating it, especially if you have a very large application with lots of file (like Magento), can be a real performance bottleneck. This problem is easily resolved by having APC installed and configured. If you are not sure, ring your hosting company and find out and if you don&rsquo;t have it running, ask them to set it up for you.</p>

<p>The next thing to check is MySQL configuration. The standard MySQL configuration defaults were set when server hardware and memory was a tiny fraction of what it is today and that means that the configuration is generally way too sparse with allocation of memory for caching and other optimisations. Tweaking MySQL can be a little tricky, its definitely not something you should do if you are not sure, but it is well worth getting someone to optimise your MySQL configuration.</p>

<p>After that, the next major performance gain with Magento is to make proper use of block caching. Magento has a brilliant built in feature where every block (page section) can be cached so that next time someone visits the page, the logic used to generate that section of page (for example a best sellers list) does not have to be run, we simply redisplay the cached copy of that block&rsquo;s HTML.</p>

<p>Beyond these three steps there are still many more things that can be done to improve the performance of your Magento store. If you would like professional help getting the best out of your server and Magento with a view to getting the lowest possible page load speeds then get in touch with Edmonds Commerce today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Robust Bash Shell Scripts]]></title>
    <link href="http://edmondscommerce.github.io/bash/writing-robust-bash-shell-scripts.html"/>
    <updated>2012-01-15T19:28:02+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/writing-robust-bash-shell-scripts</id>
    <content type="html"><![CDATA[<p>Found this great article on writing bash scripts defensively. Glad to say most of the advice we are already following with our bash scripts however there are a couple of new things I intend to roll in on Monday.</p>

<p>Recommended reading for anyone scripting in Bash.</p>

<p><a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts.html"><a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts.html">http://www.davidpashley.com/articles/writing-robust-shell-scripts.html</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run mysql commands with plesk username]]></title>
    <link href="http://edmondscommerce.github.io/plesk/run-mysql-commands-with-plesk-username.html"/>
    <updated>2011-09-14T15:33:04+01:00</updated>
    <id>http://edmondscommerce.github.io/plesk/run-mysql-commands-with-plesk-username</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>There&rsquo;s a little-known trick to using the plesk admin user password to access the mysql database that works on many a plesk machine.</p>

<p>Effectively the plesk admin password is stored in /etc/psa/.psa.shadow &ndash; in plain text.</p>

<p>This means that the following commands for instance work very well as root :</p>

<ul>
    <li>mysql -uadmin -p`cat /etc/psa/.psa.shadow`</li>
    <li>mytop -uadmin -p`cat /etc/psa/.psa.shadow` -d[databasename]</li>
    <li>mysqldump --user=admin --password=`cat /etc/psa/.psa.shadow` [databasename] > /dev/null</li>
</ul>


<p>Enjoy automating mysql stuff on your plesk servers!</p>
]]></content>
  </entry>
  
</feed>
