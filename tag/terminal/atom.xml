<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: terminal | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/terminal/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-04-01T12:08:44+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prevent Ctrl+S Freezing Your Terminal]]></title>
    <link href="http://edmondscommerce.github.io/linux/prevent-ctrl-plus-s-freezing-your-terminal.html"/>
    <updated>2014-06-11T10:30:25+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/prevent-ctrl-plus-s-freezing-your-terminal</id>
    <content type="html"><![CDATA[<p>As someone who types a lot of text everyday and am generally quite keen not to lose my work, I tend to hit the key combination [Ctrl]+[S] quite a lot.
In fact its almost become muscle memory that every sentence or two I will hit that combination.</p>

<p>When working on a terminal, this can have the unfortunate outcome that the terminal freezes up. For more time than I would like to admit, I thought that this was a Linux bug
And found myself frequently restarting terminal sessions that had locked up.</p>

<p>Then I discovered that you can unlock this when it freezes by hitting [Ctrl]+[Q]. However this is a bit of a pain.</p>

<p>I have now discovered a way of turning off this behaviour completely which is a real relief. Simply add the following to your .bashrc file:</p>

<p>```</p>

<h1>Prevent Ctrl+S Freezing Terminal</h1>

<p>stty -ixon
```</p>

<p>Credit goes to this Stackoverflow post:
<a href="http://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal">http://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Terminal Rename Programmatically]]></title>
    <link href="http://edmondscommerce.github.io/bash/bash-terminal-rename-programmatically.html"/>
    <updated>2013-01-16T12:56:15+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/bash-terminal-rename-programmatically</id>
    <content type="html"><![CDATA[<p>If you have a load of terminals open you might find it handy to be able to rename the window title on the fly.</p>

<p>You can do this easily by copying this code into your ~/.bashrc file (or even pasting it into your terminal if you like)</p>

<p>```bash</p>

<p>function nameTerminal() {</p>

<pre><code>[ &amp;quot;${TERM:0:5}&amp;quot; = &amp;quot;xterm&amp;quot; ]   &amp;amp;&amp;amp; local ansiNrTab=0
[ &amp;quot;$TERM&amp;quot;       = &amp;quot;rxvt&amp;quot; ]    &amp;amp;&amp;amp; local ansiNrTab=61
[ &amp;quot;$TERM&amp;quot;       = &amp;quot;konsole&amp;quot; ] &amp;amp;&amp;amp; local ansiNrTab=30 ansiNrWindow=0
    # Change tab title
[ $ansiNrTab ] &amp;amp;&amp;amp; echo -n $'\e'&amp;quot;]$ansiNrTab;$1&amp;quot;$'\a'
    # If terminal support separate window title, change window title as well
[ $ansiNrWindow -a &amp;quot;$2&amp;quot; ] &amp;amp;&amp;amp; echo -n $'\e'&amp;quot;]$ansiNrWindow;$2&amp;quot;$'\a'
</code></pre>

<p>}</p>

<p>```</p>

<p>If you have pasted this into your ~/.bashrc file you need to launch a new terminal or run:</p>

<p>```bash</p>

<p>source ~/.bashrc</p>

<p>```</p>

<p>From this point the function is now ready to use and you can run:</p>

<p>```bash</p>

<p>nameTerminal &quot;My Custom Terminal Window Title&quot;</p>

<p>```</p>

<p>Now you can easily choose the terminal you want based upon the window title.</p>

<p>Of course this then opens the door to automatically changing the window title based on all kinds of events that you might like, isn&rsquo;t bash scripting fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Bash Scripting: Force Screen if not Cron Task]]></title>
    <link href="http://edmondscommerce.github.io/linux/linux-bash-scripting-force-screen-if-not-cron-task.html"/>
    <updated>2012-08-30T09:27:16+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/linux-bash-scripting-force-screen-if-not-cron-task</id>
    <content type="html"><![CDATA[<p>If you have a long running script that is designed to run as cron but may be run manually from the terminal then you may want to enforce screen so that the process can&rsquo;t be aborted by the SSH terminal being closed for whatever reason.</p>

<p>We already blogged about how to <a href="http://www.edmondscommerce.co.uk/linux/force-a-bash-script-to-run-in-screen/" title="Linux Force Screen">force running as screen here</a>.</p>

<p>This is an extension of this that also checks for running as Cron and if so, does not force screen.</p>

<p>```bash</p>

<h1>First off, ensure running from Cron and if not, Screen</h1>

<p>if [ -t 1 ]
then</p>

<pre><code>echo &amp;quot;Not running as Cron Task&amp;quot;
if [ -n &amp;quot;$STY&amp;quot; ];
then
    echo 'We are inside screen, good';
else
    echo &amp;quot;Not in a screen, please run with screen&amp;quot;
    echo &amp;quot;Exiting&amp;quot;
    exit 1
fi
</code></pre>

<p>else</p>

<pre><code>echo &amp;quot;Running as Cron Task&amp;quot;
</code></pre>

<p>fi</p>

<p>```</p>

<p>Simply paste this somewhere close to the top of your script before it does anything and this will work nicely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wondering what you're waiting for? Mytop tells all]]></title>
    <link href="http://edmondscommerce.github.io/mysql/wondering-what-youre-waiting-for-mytop-tells-all.html"/>
    <updated>2012-08-14T16:03:11+01:00</updated>
    <id>http://edmondscommerce.github.io/mysql/wondering-what-youre-waiting-for-mytop-tells-all</id>
    <content type="html"><![CDATA[<p>Mytop is a handy utility which shows what queries are currently being executed on your MySQL server &ndash; useful for those times when you&rsquo;re not quite sure if it&rsquo;s still on the job</p>

<p>Running mytop is easy, just run it from the command line and it&rsquo;ll give you a top-like list of any queries currently being executed on the server
You need to tell my top how it should connect to your database. You <em>can</em> specify everything as parameters on the command, such as
```bash</p>

<p>$ mytop -u=myuser -p=mypassword &mdash;db=mydatabase -P=3306</p>

<p>```</p>

<p>But chances are you&rsquo;re not changing your database server <em>that</em> often.</p>

<h3>Setting the default parameters for mytop</h3>


<p>If you want to save yourself the effort of repeatedly typing the same details over and over, just tell mytop what you want it to choose if you don&rsquo;t tell it any parameters</p>

<p>All you need to do is let mytop know how to connect to your MySQL database in the form of a config file called .mytop in your home folder, with the following contents (replace as necessary):</p>

<blockquote>
<code>
     user=myuser
         pass=
         host=my.host.name
         db=
         delay=5
         port=3306
         socket=
         batchmode=0
         header=1
         color=1
         idle=1
</code>
</blockquote>


<p>You can add as many or as few of these as you like for easy configuration, like specifying the db flag if you&rsquo;re primarily accessing only one database. I like to leave the password field blank, and use the &mdash;prompt flag to avoid any awkward leaks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Detect Mouse Button Numbers Easily]]></title>
    <link href="http://edmondscommerce.github.io/linux/linux-detect-mouse-button-numbers-easily.html"/>
    <updated>2012-06-12T11:49:42+01:00</updated>
    <id>http://edmondscommerce.github.io/linux/linux-detect-mouse-button-numbers-easily</id>
    <content type="html"><![CDATA[<p>If you need to know what number a mouse button is (for example if you are configuring compiz) in Linux then you might like this little trick.</p>

<p>```</p>

<p>xev | grep button</p>

<p>```</p>

<p>Run the above in a terminal and it will display a white box. As you click on it, the button number will appear in your terminal.</p>

<p>The pipe to grep is to filter out the large amount of noise from xev and only display the button number notifications.</p>
]]></content>
  </entry>
  
</feed>
