<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ide | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/ide/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-03-17T15:07:38+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Replace "Malformed Replacement String"]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html"/>
    <updated>2013-01-24T17:39:08+00:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string</id>
    <content type="html"><![CDATA[<p>If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.</p>

<p>The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.</p>

<p>Take the following example code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$input-&gt;name]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$input-&gt;name]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$textarea-&gt;name]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>And trying to replace the key being used in the data array with a processed one calling a method $this->dataName($key) to generate the following code:</p>

<p>```php</p>

<p>$data = array();
$form=$page->find(&lsquo;form.edit_product&rsquo;, 0);</p>

<p>//standard inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;text&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>$data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
</code></pre>

<p>}</p>

<p>//radio inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;radio&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//checkbox inputs
$inputs = $form->find(&lsquo;input[type=&ldquo;checkbox&rdquo;]&rsquo;);
foreach($inputs as $input){</p>

<pre><code>if($input-&gt;checked){
    $data[$this-&gt;dataName($input-&gt;name)]=$input-&gt;value;
}
</code></pre>

<p>}</p>

<p>//textareas
$textareas = $form->find(&lsquo;textarea&rsquo;);
foreach($textareas as $textarea){</p>

<pre><code>$data[$this-&gt;dataName($textarea-&gt;name)]=$textarea-&gt;innertext;
</code></pre>

<p>}</p>

<p>```</p>

<p>You might try the find pattern:</p>

<p>```</p>

<p>\$data[\$([^&ndash;]+)&ndash;>name]</p>

<p>```</p>

<p>And the replace pattern:
```</p>

<p>\$data[\$this->dataName(\$$1->name)]</p>

<p>```</p>

<p>However this will give you the dreaded <b>&ldquo;malformed replacement string&rdquo;</b> Error</p>

<p>The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:</p>

<p>```</p>

<p>\\$data[\\$this->dataName(\\$$1->name)]</p>

<p>```</p>

<p>And it works, woot!</p>

<p>Also when it does work, PHP Storms replacement preview feature is really quite nice</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm 5 Released]]></title>
    <link href="http://edmondscommerce.github.io/phpstorm/phpstorm-5-released.html"/>
    <updated>2012-09-13T09:07:03+01:00</updated>
    <id>http://edmondscommerce.github.io/phpstorm/phpstorm-5-released</id>
    <content type="html"><![CDATA[<p>At Edmonds Commerce we were staunch Netbeans users for years but we always struggled with large scale projects (<a href="http://edmondscommerce.github.io/platforms/magento/" title="Magento Platform Overview">Magento</a> I&rsquo;m looking at you) meaning that Netbeans would sometimes really crawl as it tried to reindex thousands of PHP files.</p>

<p>After a recent upgrade of our Linux desktop environment to the Mate edition of Linux Mint 13, Netbeans seemed to perform even worse and had a few bugs as well. At the same time we had been evaluating other IDE options including Eclipse and Zend Studio (which we all have free licences for thanks to being Zend Certified Developers).</p>

<p>In the end though, the one we tried that really impressed was PHPStorm. It isn&rsquo;t free open source but it isn&rsquo;t too expensive, especially considering it is perhaps the single most important and highly used tool of a professional PHP developer.</p>

<p>Now a new version has come out. Downloading and upgrading took all of 5 minutes and we are now going to enjoy better performance and some nice new features. I have yet to really test out the new version so I can&rsquo;t really report on them but they look good. You can read about all the new features in version 5 <a href="http://www.jetbrains.com/phpstorm/whatsnew/" title="PHPStorm 5 Features" target="_blank">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netbeans AutoComplete on Magento Objects called by Mage::getModel()]]></title>
    <link href="http://edmondscommerce.github.io/magento/netbeans-autocomplete-on-magento-objects-called-by-magegetmodel.html"/>
    <updated>2012-03-01T11:00:05+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/netbeans-autocomplete-on-magento-objects-called-by-magegetmodel</id>
    <content type="html"><![CDATA[<p>As we have been working with the various versions of Magento its nice to see more and more use of DocBlock notation to help IDEs auto suggest and auto complete methods etc when working with objects.</p>

<p>However the style is inconsistent and with a few subtle tweaks would be much, much better.</p>

<h3>Template Files, What is $this?</h3>


<p>First one is the @see syntax often used in .phtml files to describe which block object is in play as $this. Whilst that is useful to read, it is totally useless to the IDE.</p>

<p>For example have a look at
<b><a href="https://github.com/LokeyCoding/magento-mirror/blob/magento-1.6/app/design/frontend/base/default/template/catalog/product/view.phtml">app/design/frontend/base/default/template/catalog/product/view.phtml</a></b></p>

<p>```php</p>

<p>/<em>*
 * Product view template
 *
 * @see Mage_Catalog_Block_Product_View
 * @see Mage_Review_Block_Product_View
 </em>/</p>

<p>```</p>

<p>All we need to do is add this underneath
```php</p>

<p>/<em>
 * @var $this Mage_Catalog_Block_Product_View
 </em>/</p>

<p>```</p>

<p>And now when working with in the .phtml file, $this will auto complete for you.</p>

<blockquote><i>Eagle eyed readers may think that as $this could be either this is perhaps a bad idea, however the Review one actually extends the Catalog one overriding some functionality, it is basically the same.</i></blockquote>




<h3>$Model = Mage::getModel() why always the Abstract?</h3>


<p>Another one that I have just finally figured out is the correct way to get Netbeans to recognise exactly what class an object is when called with Mage::getModel() or Mage::getSingleton().</p>

<p>You might have auto complete suggesting that this is an instance of Mage_Core_Model_Abstract.</p>

<p>Whilst effectively true, this is unlikely to be useful for you in your context, you need to know exactly what Model class it is.</p>

<p>The reason that Netbeans thinks its Mage_Core_Model_Abstract is because the docblock in
<b><a href="https://github.com/LokeyCoding/magento-mirror/blob/magento-1.6/app/Mage.php">app/Mage.php</a></b>
describes this as the return value of this method.</p>

<p>```php</p>

<pre><code>/**
 * Retrieve model object
 *
 * @link    Mage_Core_Model_Config::getModelInstance
 * @param   string $modelClass
 * @param   array $arguments
 * @return  Mage_Core_Model_Abstract
 */
public static function getModel($modelClass = '', $arguments = array())
{
    return self::getConfig()-&gt;getModelInstance($modelClass, $arguments);
}
</code></pre>

<p>```</p>

<p>I often see blocks of code where the author is attempting to get auto complete working properly by using this syntax</p>

<p>see
<b><a href="https://github.com/LokeyCoding/magento-mirror/blob/magento-1.6/app/code/core/Mage/Customer/controllers/AccountController.php">app/code/core/Mage/Customer/controllers/AccountController.php</a></b>
createPostAction()
```php</p>

<p>/<em> @var $customerForm Mage_Customer_Model_Form </em>/
$customerForm = Mage::getModel(&lsquo;customer/form&rsquo;);</p>

<p>```</p>

<p>This is generally the right way to do it, however I think the docblock specifying the return value on Mage:getModel clobbers it.</p>

<p>The simple solution is to move the docblock from above the Mage::getModel call to below it.</p>

<p>```php</p>

<p>$customerForm = Mage::getModel(&lsquo;customer/form&rsquo;);
/<em> @var $customerForm Mage_Customer_Model_Form </em>/</p>

<p>```</p>

<p><b>And it works!</b></p>

<p><img src="/assets/screenshot4-600x475.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netbeans Error Wavy Line - Alternative]]></title>
    <link href="http://edmondscommerce.github.io/netbeans/netbeans-error-wavy-line-alternative.html"/>
    <updated>2012-01-19T14:07:23+00:00</updated>
    <id>http://edmondscommerce.github.io/netbeans/netbeans-error-wavy-line-alternative</id>
    <content type="html"><![CDATA[<p>If you use Netbeans then you have no doubt seen the red wavy underline that pops under lines that have errors.</p>

<p>Unfortunatley if your errors relate to punctuation, eg concatenation full stops, then the red wavy line can actually obscure these making finding and fixing the error tricky.</p>

<p>An nice alternative is to set Netbeans to use a red strikethrough instead of the wavy line. This is just as visilble but does not obscure punctuation in any way making finding and fixing the error a lot easier.</p>

<p>To change this simply go to Tools->Options->Fonts &amp; Colors</p>

<p>Then Set Language to All Languages</p>

<p>Then select Error in the category drop down</p>

<p>Simply change the Effects: drop down from Wave Underlined line to Strike Through</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPUnit, LAMP, Magento and Netbeans]]></title>
    <link href="http://edmondscommerce.github.io/netbeans/phpunit-lamp-magento-and-netbeans.html"/>
    <updated>2012-01-10T13:11:10+00:00</updated>
    <id>http://edmondscommerce.github.io/netbeans/phpunit-lamp-magento-and-netbeans</id>
    <content type="html"><![CDATA[<p>When using PHPUnit with xampp the first the to do is install PHPUnit through pear. You usually need to update pear first, after that you should be able to follow the instructions <a href="http://pear.phpunit.de/">here</a></p>

<p>Getting PHPUnit working with Magento is fairly straight forward. It&rsquo;s just a case of including Mage.php and then calling Mage::app(); in the setup method of your test class:</p>

<p>```php
&lt;?php</p>

<p>require_once &lsquo;../app/Mage.php&rsquo;;</p>

<p>class TemplateTest extends PHPUnit_Framework_TestCase {</p>

<pre><code>public function setUp() {
    Mage::app();
}

public function testExample() {
    $helper = Mage::helper('core');
    $this-&gt;assertTrue($helper instanceof Mage_Core_Helper_Data, "Magento isn't running!");
}
</code></pre>

<p>}
```</p>

<p>If you use NetBeans as your IDE you&rsquo;ll be glad to know that it has support for running your tests directly without having to use a terminal. This does require a bit of configuration. You need to tell NetBeans where the PHPUnit script is under Tools > Options > PHP > Unit Testing. If you are using it with XAMPP it will be located at /opt/lampp/bin/phpunit. To begin running the tests you then go Run > Test Project and NetBeans will ask you where your tests are. After that you will get a &ldquo;Test File&rdquo; source folder in the Projects pane. You can now right click each test file and choose &ldquo;Run file&rdquo; and netbeans will run it. If you have xdebug setup the debug option also works nicely.</p>
]]></content>
  </entry>
  
</feed>
