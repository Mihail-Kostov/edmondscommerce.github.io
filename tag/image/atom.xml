<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: image | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/image/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-03-10T14:32:06+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enable Category Pages to Display Subcategories]]></title>
    <link href="http://edmondscommerce.github.io/magento/enable-category-pages-to-display-subcategories.html"/>
    <updated>2012-06-01T15:12:22+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/enable-category-pages-to-display-subcategories</id>
    <content type="html"><![CDATA[<p>Thinking of being able to set different Magento Categories to display its sub-categories which can be controllable in the Magento admin i.e. <img src="/assets/Screenshot-New-Category-Manage-Categories-Categories-Catalog-Magento-Admin-Chromium-150x150.png">
</p>
You might be interested in using or viewing the zipped file here;<a href='http://www.edmondscommerce.co.uk/wp-content/uploads/2012/06/subcat.zip'>subcat</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Live Images on Staging Without Absolute URLs (but a bit of JS)]]></title>
    <link href="http://edmondscommerce.github.io/javascript/using-live-images-on-staging-without-absolute-urls-but-a-bit-of-js.html"/>
    <updated>2012-03-27T11:05:49+01:00</updated>
    <id>http://edmondscommerce.github.io/javascript/using-live-images-on-staging-without-absolute-urls-but-a-bit-of-js</id>
    <content type="html"><![CDATA[<p>If you have a staging copy of your site anywhere then you might not bother copying over your entire catalogue of product images etc.</p>

<p>You might decide to drop in absolute URLs for those images so that they are pulled from live. However you really don&rsquo;t want absolute URLs in your code and you certainly don&rsquo;t want that to go live because it just adds unnecessary bloat.</p>

<p>A nice trick you can do here is make a change to your staging site as follows. Of course ensure this change doesn&rsquo;t go live, but it should be just one file so that&rsquo;s easy to handle.</p>

<p>(Note this assumes you already have jQuery available on your page)</p>

<p>```javascript</p>

<script type="text/javascript">
$().ready(function(){
    $('img').each(function(){
        var src = $(this).attr('src')+'';        
        if(-1 == src.indexOf('http')){
            var new_src = 'http://www.LIVEDOMAIN.co.uk/'+src;
            $(this).attr('src', new_src);
        }
    });
});    
</script>


<p>```</p>

<p>Don&rsquo;t forget to change LIVEDOMAIN to be your real live domain</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento Flush Everything Cache, Index, Images, JS, CSS in One Go]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-flush-everything-cache-index-images-js-css-in-one-go.html"/>
    <updated>2012-03-03T16:26:59+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-flush-everything-cache-index-images-js-css-in-one-go</id>
    <content type="html"><![CDATA[<p>If you are developing a Magento store and you would like a method you can call to completely clear everything out that might be cached or indexed etc then you will like this little snippet:</p>

<p>```php</p>

<p>public function flushEverything() {</p>

<pre><code>    Mage::app()-&gt;getCacheInstance()-&gt;flush();
    Mage::getModel('core/design_package')-&gt;cleanMergedJsCss();
    Mage::getModel('catalog/product_image')-&gt;clearCache();
    $indexer    = Mage::getSingleton('index/indexer');
    /* @var $indexer Mage_Index_Model_Indexer */
    foreach($indexer-&gt;getProcessesCollection() as $process){
          $process-&gt;reindexEverything();
    }  
}
</code></pre>

<p>```</p>

<p>This flushes the cache storage, removes merged JS/CSS files, flushes the product image cache then loops through each index and reindexes.</p>

<p>Perhaps overkill but sometimes there&rsquo;s nothing like the use of excessive force!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox Images For Download of Various Linux and Other Open Source Systems]]></title>
    <link href="http://edmondscommerce.github.io/virtualbox/virtualbox-images-for-download-of-various-linux-and-other-open-source-systems.html"/>
    <updated>2012-02-23T12:42:17+00:00</updated>
    <id>http://edmondscommerce.github.io/virtualbox/virtualbox-images-for-download-of-various-linux-and-other-open-source-systems</id>
    <content type="html"><![CDATA[<p>Virtualbox is an amazing tool for testing and developing on various systems.</p>

<p>Now it&rsquo;s even easier as there is a nicely organised repository of clean VirtualBox images you can download and get running with in a matter of minutes.</p>

<p><a href="http://virtualboxes.org/"><a href="http://virtualboxes.org/">http://virtualboxes.org/</a></a></p>

<p>We are going to use them for some <a href="http://www.edmondscommerce.co.uk">Magento</a> performance optimisation testing on various platforms as we perfect our <a href="http://www.edmondscommerce.co.uk/magento/magento-optimised-hosting/">Magento Server Optimisation</a> skills and try to benchmark some new ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got the Insecure Content on a Secure HTTPs Page Problem - Easy Solution]]></title>
    <link href="http://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution.html"/>
    <updated>2012-01-12T12:28:54+00:00</updated>
    <id>http://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution</id>
    <content type="html"><![CDATA[<p>Often you will see SSL warnings or errors related to insecure content being displayed on a secure page.</p>

<p>This could be as simple as one javascript file or image that is being included via http rather than https, though some times this can be a bit tricky to track down.</p>

<p>The easiest solution is to hit this site:</p>

<p><a href="http://www.whynopadlock.com/"><a href="http://www.whynopadlock.com/">http://www.whynopadlock.com/</a></a></p>

<p>This will give you a clear report of the problems and should help you quickly find and fix them.</p>

<p>Alternatively if you use Chrome you may see the details in the Javascript console.</p>

<p>Once you know what elements are being called by http as opposed to https, you simply need to make them use https or remove them altogether.</p>
]]></content>
  </entry>
  
</feed>
