<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: csv | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/tag/csv/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-04-11T11:27:43+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Merchant Centre/Froogle/Google Shopping/Base Changes, Problems and Solutions]]></title>
    <link href="http://edmondscommerce.github.io/ecommerce/google-merchant-centrefrooglegoogle-shoppingbase-changes-problems-and-solutions.html"/>
    <updated>2011-10-11T17:05:20+01:00</updated>
    <id>http://edmondscommerce.github.io/ecommerce/google-merchant-centrefrooglegoogle-shoppingbase-changes-problems-and-solutions</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>So now that everyone uses Google Shopping, Google are making life difficult for the merchants and they all have to jump through hoops.</p>

<p>The current push from Google is enforcing some things that are very difficult for small companies to conform with :&ndash;</p>

<p><strong> * EAN Numbers</strong> &ndash; This is the BIG one, Google are making EAN Numbers required &ndash; for some retailers, they just don&rsquo;t exist, and for a lot of older or cheaper shopping cart systems, they don&rsquo;t have anywhere to enter them.
<strong> * Google Category</strong> &ndash; This is a fairly obvious one, they are attempting to enable shoppers to browse products and find a motherboard for instance with a 1156 socket rather than a CPU that fits an 1156 socket.  The answer is to add an extra field to a site&rsquo;s category system to map site categories to Google categories, or to restructure your products into google&rsquo;s categorisations.
<strong> * Product Images</strong> &ndash; Google are making this mandatory as well, which most people are getting round by using stock or illustration-only images.
<strong> * Availability</strong> &ndash; This one actually helps retailers, putting orderable products that are out of stock in front of customers, and is a small change to most scripts exporting to Google</p>

<p>The above changes are being phased in now but should your feed suddenly stop working, how big is the impact on your business?  Whilst some of the changes are little tweaks, such as the availability flag, others require fairly substantial changes in the back-end of many cart systems.  We are getting many aggrieved businesses contacting us asking for fast turnaround on their Google products feed as they are loosing money all the time that Google are rejecting their products.</p>

<p>What normally (given past changes) has been little tweaks for feeds to be compatible has lately become hours and hours of work both on developers and store-owners.  Are you ready to jump through the latest burning hoop Google is holding out for you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PHP to Stream SQL results dynamically as CSV, even to IE]]></title>
    <link href="http://edmondscommerce.github.io/php/using-php-to-stream-sql-results-dynamically-as-csv-even-to-ie.html"/>
    <updated>2011-06-06T10:49:46+01:00</updated>
    <id>http://edmondscommerce.github.io/php/using-php-to-stream-sql-results-dynamically-as-csv-even-to-ie</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you want to offer a csv feed and want the results to be on demand and like the idea of avoiding messing about righting to files on the server etc, you might like this little manuever.</p>

<p>You will notice I&rsquo;m using a non standard db_query function, just assume that this does all the sensible stuff it should.</p>

<p>Also the query needs to be modified to suit.</p>

<p>The trick is writing to PHP&rsquo;s built in php://output stream which is basically just STDOUT.</p>

<p>Note the headers which are specifically required to get IE to accept the file as a download. Other browsers will accept less headers but will also work fine with these.</p>

<p>```php</p>

<p>header(&ldquo;Pragma: public&rdquo;);
header(&ldquo;Expires: 0&rdquo;);
header(&ldquo;Cache-Control: must-revalidate, post-check=0, pre-check=0&rdquo;);
header(&ldquo;Cache-Control: private&rdquo;, false);
header(&ldquo;Content-Type: application/octet-stream&rdquo;);
header(&ldquo;Content-Disposition: attachment; filename=\"file.csv\&rdquo;;&ldquo;);
header("Content-Transfer-Encoding: binary&rdquo;);</p>

<p>$outstream = fopen(&ldquo;php://output&rdquo;, &lsquo;w&rsquo;);</p>

<p>$sql = &ldquo; select * from a_table&rdquo;;
$q = db_query(&ldquo;$sql&rdquo;);</p>

<p>$header = false;
while ($r = mysql_fetch_assoc($q)) {</p>

<pre><code>if (!$header) {
    fputcsv($outstream, array_keys($r));
    $header = true;
}
fputcsv($outstream, $r);
</code></pre>

<p>}
fclose($outstream);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Split File (eg CSV) and Keep Header Row]]></title>
    <link href="http://edmondscommerce.github.io/linux/linux-split-file-eg-csv-and-keep-header-row.html"/>
    <updated>2009-10-27T15:04:37+00:00</updated>
    <id>http://edmondscommerce.github.io/linux/linux-split-file-eg-csv-and-keep-header-row</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>Linux has a great little utility called split, which can take a file and split it into chunks of whatever size you want, eg 100 line chunks.</p>

<p>However, for CSV files etc, each chunk generally needs to have the header row in there. Unfortunately the split command doesn&rsquo;t have an option for that. However with a little bit more code you can achieve it.</p>

<p>```</p>

<p>tail -n +2 file.txt | split -l 4 &ndash; split<em>
for file in split</em>*
do</p>

<pre><code>head -n 1 file.txt &gt; tmp_file
cat $file &gt;&gt; tmp_file
mv -f tmp_file $file
</code></pre>

<p>done</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Table from File PHP Function]]></title>
    <link href="http://edmondscommerce.github.io/php/build-table-from-file-php-function.html"/>
    <updated>2009-09-03T12:27:39+01:00</updated>
    <id>http://edmondscommerce.github.io/php/build-table-from-file-php-function</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>This little PHP function will allow you to import a csv or tab etc delimited text file into a database table. Handy if you need it :)</p>

<p>```php</p>

<p>function build_table_from_file($tablename, $filepath, $delim=&ldquo;\t&rdquo;) {</p>

<pre><code>db_query("DROP TABLE IF EXISTS $tablename");
$fp=fopen($filepath, 'r');
$headers=false;
while($r=(($delim=='csv')?fgetcsv($fp):fgets($fp))) {
    if($delim!='csv'){
        $r=explode($delim, $r);
    }
    if(!$headers) {
        foreach($r as $h){
            $headers[]=trim($h);
        }
        $sql = "CREATE TABLE $tablename
                     (
                        `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,";
        foreach($headers as $h) {
            $sqls[]=" `" . db_in($h) . "` TEXT NOT NULL ";
        }
        $sql .= implode(', ', $sqls) . "
                    ) ENGINE = MYISAM ";
        db_query($sql);
        continue;
    }
    $sql = "insert into $tablename set ";
    $sqls=array();
    foreach($headers as $k=&gt;$h) {
        $sqls[] = "`$h` = '" . db_in($r[$k]) . "'";
    }
    $sql .= implode(', ', $sqls);
    db_query($sql);
    pbar();
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
