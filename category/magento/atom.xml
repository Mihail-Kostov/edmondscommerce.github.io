<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: magento | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/category/magento/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-02-03T12:08:25+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preorders in Magento Using Attribute Value]]></title>
    <link href="http://edmondscommerce.github.io/magento/preorders-in-magento-using-attribute-value.html"/>
    <updated>2014-01-23T15:52:41+00:00</updated>
    <id>http://edmondscommerce.github.io/magento/preorders-in-magento-using-attribute-value</id>
    <content type="html"><![CDATA[<p>Magento doesn&rsquo;t come built with the ability to place preorders: the closest match is in the form of back orders, but there&rsquo;s a crucial difference between the two. Backorders are orders placed when stock isn&rsquo;t present and are shipped as soon as stock becomes available. Preorders however usually have a predefined point at which they will be shipped.</p>

<p>The excellent <a href="http://www.aitoc.com/en/magentomods_pre_order.html">Aitoc Prorders</a> extension provides a drop-in ability to accept preorders including button text changes, checkout customisation and different order statuses for preorders.</p>

<p>One aspect I had to work around is that the way to define a preorder is by using the extra &ldquo;Pre-Orders&rdquo; value of the Magento &ldquo;Backorders&rdquo; Inventory field. In my case I wanted to define a preorder to be a product with a Release Date set in the future. Fortunately the Aitc Preorders module has a very discrete function where it holds the definition of a Preorder. Changing this is a simple case of overriding that method</p>

<h3>Creating a new extension</h3>

<p>You need to create a new standard Magento extension, creating the usual boilerplate files:</p>

<ul>
<li>/app/etc/modules/Namespace_Module.xml</li>
<li>/app/code/local/Namespace/Module/etc/config.xml</li>
</ul>


<h3>Rewrite the Aitoc module&rsquo;s Product model</h3>

<p>In /app/code/local/Namespace/Module/etc/config.xml, set up your XML:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="nt">&lt;config&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>modules<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>Namespace_Module<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>0.1.0<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/Namespace_Module<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/modules<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>global<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>models<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>catalog<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>rewrite<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>product<span class="ni">&amp;gt;</span>Namespace_Module_Model_Aitpreorder_Rewrite_CatalogProduct<span class="ni">&amp;lt;</span>/product<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/rewrite<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/catalog<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/models<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/global<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/config&gt;</span> <span class="nt">&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Create the class and override the function</h3>

<p>Create the file /app/code/local/Namespace/Module/Model/Aitpreorder/Rewrite/CatalogProduct.php</p>

<p><div class='bogus-wrapper'><notextile><figure class='code panel panel-default'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Namespace_Module_Model_Aitpreorder_Rewrite_CatalogProduct</span> <span class="k">extends</span> <span class="nx">Aitoc_Aitpreorder_Model_Rewrite_CatalogProduct</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">getPreorder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Add whatever logic you like here and return it as a boolean</span>
</span><span class='line'>    <span class="nv">$releaseDate</span> <span class="o">=</span> <span class="nx">DateTime</span><span class="o">::</span><span class="na">createFromFormat</span><span class="p">(</span><span class="s1">&#39;Y-m-d H:i:s&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getReleaseDate</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$releaseDate</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">new</span> <span class="nx">DateTime</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magento 1.8 released]]></title>
    <link href="http://edmondscommerce.github.io/magento/magento-1-8-released.html"/>
    <updated>2013-09-30T10:01:28+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/magento-1-8-released</id>
    <content type="html"><![CDATA[<p>Today I got a notification through that Magento 1.8 had finally been released.</p>

<p>This has been in beta since alpha since April, and contains server fixes that a lot of people have been waiting for.</p>

<p>The most important one for UK vendors is that the rounding issue in tax calculations has been fixed.</p>

<p>There are also improvements to caching and database performance. The full release notes can be seen <a href="http://www.magentocommerce.com/knowledge-base/entry/ce-18-later-release-notes">here</a></p>

<p>These are issues that have affected merchants since that change in the VAT rate, so we would recommend upgrading for everyone at this time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Backorder Message on Magento's Product Page]]></title>
    <link href="http://edmondscommerce.github.io/magento/ssssssssssssss.html"/>
    <updated>2013-08-29T15:37:37+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/ssssssssssssss</id>
    <content type="html"><![CDATA[<p>Magento&rsquo;s use of backorders does notify the customer, but only once you actually reach the basket page, which can lead to disappointment and frustration from the customer. The better answer is to display this on the product page, in place of the &ldquo;In Stock&rdquo; message.</p>

<p>To acheive this, we just need to amend (read: override) the templates at</p>

<p>app/design/frontend/base/default/template/catalog/product/view/type/simple.phtml
app/design/frontend/base/default/template/catalog/product/view/type/grouped.phtml
app/design/frontend/base/default/template/catalog/product/view/type/configurable.phtml</p>

<p>And amend it to look like this:</p>

<p>```php</p>

<p>&lt;?php $<em>product = $this->getProduct() ?>
&lt;?php echo $this->getPriceHtml($</em>product) ?>
&lt;?php $stockLevel = (int)Mage::getModel(&lsquo;cataloginventory/stock_item&rsquo;)&ndash;>loadByProduct($_product)&ndash;>getQty(); ?></p>

<p>&lt;?php if($_product->isSaleable()<strong> &amp;&amp; $stockLevel > 0</strong>): ?></p>

<pre><code>&lt;p class="availability in-stock"&gt;&lt;?php echo $this-&gt;__('Availability:') ?&gt; &lt;span&gt;&lt;?php echo $this-&gt;__('In stock') ?&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre>

<p>&lt;?php elseif($_product->isSaleable() &amp;&amp; $stockLevel &lt;= 0): ?></p>

<pre><code>&lt;p class="availability in-stock"&gt;
    &lt;?php echo $this-&gt;__('Availability:') ?&gt; &lt;span&gt;&lt;?php echo $this-&gt;__('Available for Backorder') ?&gt;&lt;/span&gt;&lt;br /&gt;
    &lt;?php echo $this-&gt;__('Please allow up to two weeks for delivery') ?&gt;
&lt;/p&gt;
</code></pre>

<p>&lt;?php else: ?></p>

<pre><code>&lt;p class="availability out-of-stock"&gt;&lt;?php echo $this-&gt;__('Availability:') ?&gt; &lt;span&gt;&lt;?php echo $this-&gt;__('Out of stock') ?&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre>

<p>&lt;?php endif; ?></p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab Complete for SSH and SCP]]></title>
    <link href="http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp.html"/>
    <updated>2013-07-26T10:31:41+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/bash/tab-complete-for-ssh-and-scp</id>
    <content type="html"><![CDATA[<p>If you are required to connect to different servers, then remembering and typing in all of the details can become tiresome.</p>

<p>Thankfully there is simple solution to this, using the SSH config file.</p>

<p>To make use of this, create the following file ~/.ssh/config</p>

<p>In there add the following details</p>

<p>```bash</p>

<p>Host easyToRememberName</p>

<pre><code>HostName 127.0.0.1
Port 2020
User ross
</code></pre>

<p>```</p>

<p>You will then can tab completion on ssh and scp commands. You can see more of the options that can be set in the file <a href="http://linux.die.net/man/5/ssh_config" title="ssh config man page">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sylius E-Commerce based on Symfony]]></title>
    <link href="http://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony.html"/>
    <updated>2013-07-23T13:48:47+01:00</updated>
    <id>http://edmondscommerce.github.io/magento/sylius-e-commerce-based-on-symfony</id>
    <content type="html"><![CDATA[<p>As if there weren&rsquo;t enough!</p>

<p>There is a new contender for the open source e-commerce crown, a platform called <b><a href="http://sylius.com/features" target="_blank">Sylius</a></b>. The thing that makes this one especially interesting is that rather than being built from scratch it is based upon a very well established PHP framework called Symfony. Some would argue that Symfony is the &ldquo;other&rdquo; PHP framework alongside Zend Framework. In fact there are many frameworks however it would be fair to say that Symfony and Zend Framework are the most well established and up to date.</p>

<p>Basing an e-commerce platform upon an existing PHP framework has many advantages including transferrable skills, established best practice structure and also easier access to a wide range of functionality via library components and extensions.</p>

<p>There is another e-commerce platform based upon a PHP framework. It is based upon Zend Framework &ndash; you might have heard of it &ndash; Magento.</p>

<p>It does look very much like Sylius is still quite a new offering and it can not boast the level of maturity and establishment that Magento has achieved. That said, things move quickly in this industry and who knows what will be top dog in the next five years.</p>

<p>If you are considering Sylius for your e-commerce website and would like to find a UK Sylius developer to work with then do get in touch with Edmonds Commerce today.</p>
]]></content>
  </entry>
  
</feed>
