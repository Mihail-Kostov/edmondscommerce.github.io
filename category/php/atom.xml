<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/category/php/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-04-15T12:23:48+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting sub domains and domain from a url]]></title>
    <link href="http://edmondscommerce.github.io/php/getting-sub-domains-and-domain-from-a-url.html"/>
    <updated>2014-11-14T13:34:08+00:00</updated>
    <id>http://edmondscommerce.github.io/php/getting-sub-domains-and-domain-from-a-url</id>
    <content type="html"><![CDATA[<p>At first it seems like a simple one &ndash; just use the <code>parse_url</code> function already built into PHP.</p>

<p>Unfortunately though, this just gives you the host &ndash; which is usually a combination of a subdomain &ndash; such as www &ndash; and the domain itself.</p>

<p>To resolve this I ended up writing the following code. It will gradually snip bits off the start of a host and then make a HTTP request until that request fails.</p>

<p>Once it fails, we know that we have snipped off all of the sub domains we can and we have our final domain.</p>

<p>Here is the code:</p>

<p>``` php</p>

<pre><code>public function getDomain($url)
{
    if (!$this-&gt;_domain) {
        $host = parse_url($url, PHP_URL_HOST);
        $sanity = $this-&gt;getHeadersForUrl($host);
        if (!$sanity) {
            throw new ErrorException("No headers when sanity checking full host: $host in " . __METHOD__);
        }
        $elems = explode('.', $host);
        $subdomains = array();
        $domain = false;
        while (!$domain) {
            $check = implode('.', $elems);
            $headers = $this-&gt;getHeadersForUrl($check);
            if ($headers) {
                $subdomains[] = array_shift($elems);
            } else {
                array_unshift($elems, array_pop($subdomains));
                $domain = implode('.', $elems);
            }
        }
        $this-&gt;_domain = $domain;
    }
    return $this-&gt;_domain;
}

public function getHeadersForUrl($url, $followOnLocation = true)
{
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HEADER, true);
    curl_setopt($ch, CURLOPT_NOBODY, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $followOnLocation);
    curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

    $data = curl_exec($ch);

    return $data;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Database Migrations]]></title>
    <link href="http://edmondscommerce.github.io/php/simple-database-migrations.html"/>
    <updated>2014-04-28T13:22:34+01:00</updated>
    <id>http://edmondscommerce.github.io/php/simple-database-migrations</id>
    <content type="html"><![CDATA[<p>Some times you just need something simple to manage database versions. This few lines of PHP is something I have used on various projects to assist with database versioning.</p>

<p>It is definitely not a fully featured migrations system, there is no downgrade functionality, it is purely for versioning up a DB to the latest version.</p>

<p>Largely how it works is up to you as it is simply a way of requiring PHP files in numerical order.</p>

<p>Here is the code:</p>

<p>``` php
&lt;?php
$res = mysql_fetch_assoc(db_query(&ldquo;select version from db_migrations order by version desc limit 0,1&rdquo;));
$current_version = ($res[&lsquo;version&rsquo;]) ? $res[&lsquo;version&rsquo;] : 0;
$di = new DirectoryIterator(<strong>DIR</strong> . &lsquo;/migrations&rsquo;);
$torun = array();
foreach ($di as $f) {</p>

<pre><code>/* @var $f DirectoryIterator */
if ($f-&gt;isDot()) {
    continue;
}
if ('php' == pathinfo($f-&gt;getFilename(), PATHINFO_EXTENSION)) {
    $exp = explode('.', strval($f));
    if (2 != count($exp)) {
        throw new Exception('#1 Invalid migration file ' . strval($f) . ' in ' . __FILE__);
    }
    $version = $exp[0];
    if (!is_numeric($version)) {
        throw new Exception('#2 Invalid migration file ' . strval($f) . ' in ' . __FILE__);
    }
    if ($version &gt; $current_version) {
        $torun[$version] = strval($f);
    }
} else {
    throw new Exception('#3 Invalid migration file ' . strval($f) . ' in ' . __FILE__);
}
</code></pre>

<p>}</p>

<p>if (!empty($torun)) {</p>

<pre><code>ksort($torun, SORT_NUMERIC);
foreach ($torun as $v =&gt; $t) {
    require(__DIR__ . '/migrations/' . $t);
    h(3, 'Database Migrations - running migration ' . $t);
    db_query("insert into db_migrations set version = '$v' ");
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running PHP Scripts on CLI and Faking a Web Request]]></title>
    <link href="http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request.html"/>
    <updated>2014-02-14T17:31:14+00:00</updated>
    <id>http://edmondscommerce.github.io/php/running-php-scripts-on-cli-and-faking-a-web-request</id>
    <content type="html"><![CDATA[<p>Some times you build a PHP script that is designed to run from a web request and you want to run it on the command line.
The problem is that you have used the standard PHP super globals and you would rather not refactor the script loads.</p>

<p>Here is a nice quick solution:</p>

<p>``` php
if(isset($argc)){</p>

<pre><code>for ($i = 1; $i &lt; $argc; $i++) {
    $things = explode("=", $argv[$i]);
    if (false !== stripos($things[0], 'POST:')) {
         $post = str_replace('POST:', '', $things[0]);
         $_POST[$post] = $things[1];
    } else {
         $_GET[$things[0]] = $things[1];
    }
}
</code></pre>

<p>}</p>

<p>echo &ldquo;\nGET:\n&rdquo;;
var_dump($<em>GET);
echo &ldquo;\nPOST:\n&rdquo;;
var_dump($</em>POST);</p>

<p><code>``
This will loop over the argc variable that is defined when running in CLI mode and will fake the</code>$<em>GET<code>and</code>$</em>POST` variables as required.</p>

<p>To run this with get and post variables you would do this:</p>

<p><code>
php -f script.php getvar1=test getvar2=foo POST:postvar1=bar
</code></p>

<p>And that&rsquo;s it. It is not particularly pretty but it can be pretty handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Regex Convert Array to Object Syntax]]></title>
    <link href="http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax.html"/>
    <updated>2013-08-27T14:40:35+01:00</updated>
    <id>http://edmondscommerce.github.io/php/phpstorm-regex-convert-array-to-object-syntax</id>
    <content type="html"><![CDATA[<p>If you are converting some code from using array syntax to object property syntax then you might like this little snippet of regex.</p>

<p>This is design to paste straight into the find/replace dialogue in PHPStorm</p>

<p>Find:
```</p>

<p>\$(\w+)[&lsquo;([^&rsquo;]+)&lsquo;]</p>

<p>```</p>

<p>Replace:
```</p>

<p>\\$$1->$2</p>

<p>```</p>

<p>And that is it</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Base64 Decode if Encoded Otherwise Leave Intact]]></title>
    <link href="http://edmondscommerce.github.io/php/php-base64-decode-if-encoded-otherwise-leave-intact.html"/>
    <updated>2013-07-25T15:05:08+01:00</updated>
    <id>http://edmondscommerce.github.io/php/php-base64-decode-if-encoded-otherwise-leave-intact</id>
    <content type="html"><![CDATA[<p>I had a scenario where an API I was working with would sometimes base64 encode data (instead of using CDATA which is the more usual approach).</p>

<p>However to really make things interesting, they didn&rsquo;t always do this so you couldn&rsquo;t just go and decode everything.</p>

<p>Here is the solution I came up with:</p>

<p>First of all, take the raw response and run preg_replace_callback on it to grab all of the XML contents:</p>

<p>```php</p>

<p>preg_replace_callback(&lsquo;%>([^&lt;]+?)&lt;%&rsquo;, array($this, &lsquo;_decode&rsquo;), $response)</p>

<p>```</p>

<p>Then the callback function is a method on the same object hence the use of array($this, &lsquo;_decode&rsquo;)</p>

<p>```php</p>

<pre><code>/**
 * Decode from bas64 if it actually is base64 encoded in the first place
 *
 * If not return the raw string
 *
 * @param $matches
 * @return string
 */
protected function _decode($matches)
{
    $raw=$matches[1];
    $decoded = base64_decode($raw, true);
    $return=$decoded;
    if(false === $decoded){
        $return=$raw;
    }elseif(base64_encode($decoded) != $raw){
        $return=$raw;
    }
    return '&gt;&lt;![CDATA[' . $return . ']]&gt;&lt;';
}
</code></pre>

<p>```</p>

<p>What this method does is first of all try calling decode with the optional strict flag. This makes the function return false if it thinks it isn&rsquo;t base64 encoded. It would be great if this was enough but unfortunately you need to do more.</p>

<p>If it doesn&rsquo;t return false at that stage, we do the real test which is to try encoding it back to base64 and make sure that the rencoded string matches the raw (before original decoding) string. If it was base64 encoded in the first place then this should match.</p>

<p>By doing this we can handle any kind of mixture of base64 encoded and plain text xml string and get it ready for simpleXMl.</p>

<p>Notice I am also wrapping the data in CDATA tags to help avoid XML issues when creating the simpleXml object.</p>

<p>However &ndash; one last trick. The reason they were using base64 encoding is because there was some dodgy non XML friendly characters in there. The solution here (if you don&rsquo;t mind compromising the data a little which I didn&rsquo;t for my purposes) then you can do the following:</p>

<p>```php</p>

<p>//have to utf8 encode it to fix the fact its not properly encoded at their end
$xml = simplexml_load_string(utf8_encode($response));</p>

<p>```</p>

<p>And that&rsquo;s it, another crazy API defeated and bent to my will!</p>
]]></content>
  </entry>
  
</feed>
