<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/category/git/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2013-12-02T19:37:13+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Great Way to Simplify Git Merges]]></title>
    <link href="http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges.html"/>
    <updated>2013-09-26T17:34:04+01:00</updated>
    <id>http://edmondscommerce.github.io/git/a-great-way-to-simplify-git-merges</id>
    <content type="html"><![CDATA[<p>If you are struggling with a git merge with a long list of failed merge files then this little trick might be helpful.</p>

<p>The standard approach is to go file by file and use git mergetool to open the files in a tool like Meld and then manually manage the differences. In many cases though you know exactly which version you want and this is simply a laborious process that doesn&rsquo;t really require human input.</p>

<p>The solution to this is deceptively simple. All you need to do is to check out the file from the branch you want to keep the version of. If you have an entire directory where you know that the branch (for example master) has the correct version then you can check out that entire directory.</p>

<p>You might find that sensible use of this technique can save you lots of time and really make the mergetool the one you use for the files where you really do need to merge.</p>

<p>Thanks to <a href="http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git?answertab=active#tab-top">this StackOverflow answer</a> for simplifying this for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[During git pull: error: RPC failed; result=56, HTTP code = 200 [x] KiB/s       fatal: The remote end hung up unexpectedly]]></title>
    <link href="http://edmondscommerce.github.io/git/during-git-pull-error-rpc-failed-result56-http-code-200-x-kibs-fatal-the-remote-end-hung-up-unexpectedly.html"/>
    <updated>2013-09-16T15:07:54+01:00</updated>
    <id>http://edmondscommerce.github.io/git/during-git-pull-error-rpc-failed-result56-http-code-200-x-kibs-fatal-the-remote-end-hung-up-unexpectedly</id>
    <content type="html"><![CDATA[<p>If you receive this series of errors during a git pull (after the Receiving Objects stage):</p>

<p>```</p>

<p>$ git pull
Password for &lsquo;<a href="https://xxxxxxxxxx@bitbucket.org">https://xxxxxxxxxx@bitbucket.org</a>&rsquo;:
remote: Counting objects: 1011, done.
remote: Compressing objects: 100% (394/394), done.
error: RPC failed; result=56, HTTP code = 200 51 KiB/s    <br/>
fatal: The remote end hung up unexpectedly
fatal: early EOF
fatal: index-pack failed</p>

<p>```</p>

<p>a quick solution is to use ssh to pull rather than the https protocol</p>

<p>Hope this helps</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Bitbucket on Windows using TortoiseGit]]></title>
    <link href="http://edmondscommerce.github.io/Windows/magento/git/using-bitbucket-on-windows-using-tortoisegit-2.html"/>
    <updated>2013-06-11T12:00:31+01:00</updated>
    <id>http://edmondscommerce.github.io/Windows/magento/git/using-bitbucket-on-windows-using-tortoisegit-2</id>
    <content type="html"><![CDATA[<h2>Install TortoiseGit</h2>


<p>TortoiseGit is a Windows GIU for using Git on Windows, integrating nicely with Windows Explorer.</p>

<p><a href="http://code.google.com/p/tortoisegit/wiki/Download?tm=2" target="_blank">Download TortoiseGit</a> and install it.</p>

<h2>Install and set up PuTTYgen</h2>


<p>PuTTYgen is a program used to create SSH keys on Windows, the Public-Private-Key encryption used by SSH in place of passwords, you&rsquo;ll need these to authenticate with Bitbucket.</p>

<p><a href="http://the.earth.li/~sgtatham/putty/latest/x86/puttygen.exe" target="_blank">Download PuTTYgen</a> and install it.</p>

<p>Once installed, you&rsquo;ll need to set up a public and private key. Open PuTTYgen from your Start menu/screen and follow the instructions on the screen. Once you&rsquo;ve generate the key, save both the Prive and Public keys to your computer.</p>

<h2>Add your keys to Bitbucket</h2>




<ul>
    <li>Log in to Bitbucket navigate to Manage Account > SSH Keys > Add Key</li>
    <li>Right-click your public key file and open in a text editor</li>
    <li>Remove the lines beginning with -- and the Comment line</li>
    <li>Remove any remaining line breaks</li>
    <li>Prepend the key with "ssh-rsa " - including the space</li>
    <li>Paste this into the Key field</li>
</ul>




<h2>Clone the repository</h2>


<ul>
    <li>Right-click a folder in Explorer > Git Clone</li>
    <li>Copy the repository access from the Repository's main page, on the right next to the SSH button</li>
    <li>Paste this into the URL field of TortoiseGit</li>
    <li>Tick Load Putty Key, and add your Private key from PuTTYgen</li>
</ul>




<h2>Switching Branches</h2>




<ul>
    <li>Enter your local repository's folder</li>
    <li>Right-click an empty space > TortoiseGit > Switch/Checkout...</li>
    <li>Select your branch from the dropdown</li>

</ul>




<h2>Committing changes</h2>




<ul>
    <li>Right-click an empty space</li>
    <li>Click Git Commit -> "branchname"</li>
    <li>Add a commit message</li>
</ul>


<p>When you&rsquo;re ready to push your changes to Bitbucket</p>

<ul>
    <li>Right-click an empty space</li>
    <li>Click TortoiseGit > Push...</li>

</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Your Web Site and Code Version Control]]></title>
    <link href="http://edmondscommerce.github.io/git/managing-your-web-site-and-code-version-control.html"/>
    <updated>2013-03-11T18:22:29+00:00</updated>
    <id>http://edmondscommerce.github.io/git/managing-your-web-site-and-code-version-control</id>
    <content type="html"><![CDATA[<p>Managing a web site posses many difficulties. On the technical side of things there are really two big problems which are the database and the code for the site.</p>

<p>Managing the database is currently the hardest thing to do right. The best you can do generally is to make sure you have a daily backup. Then if some thing should happen you would only lose up to 24 hours of new products, order and customers. Significantly more complex solutions are available that offer grater flexibility but these solutions usually depend on the hosting company to support it and often have a large setup cost.</p>

<p>Conversely, on the code management there are many solutions available that can be implemented easily and generally do not require the assistance of the hosting provider.
To get your sites code base under control you need to use a version control system. A version control system is a system that remembers every change made to code at a given point in time and allows you to easily see the differences between different versions.</p>

<p>Been able to see the many different versions of all the files that make up the site gives you the following advantages:
You can see when some thing changed.
You can see what was changed.
You can see who changed it.
You can see why it was changed.
You can see the logical progress of changes that lead to a given state.</p>

<p>Version control is important to maintaining a good code base for all the reasons above plus more (integration with issue tracking, deployment and other systems). It can also be invaluable in disaster recovery scenarios where some code has been altered and it&rsquo;s negatively impacted the site even out side of the version control system. In such scenarios you can take what ever is on the live site and compare it with what is in the version control system really easily.</p>

<p>It used to be the case that using version control was quite a difficult and technical matter. Fortunately since then there are many tools and websites available to make the whole process much easier.</p>

<p>GitHub and Bitbucket are currently two really popular websites for hosting Git repositories and provide much material for helping new users along.</p>

<p>At Edmonds Commerce Git is our version control system of choice because it&rsquo;s very powerful, highly flexible and integrates with many systems. There are several different clients available to help you along with Git but due to the flexibility that git offers to do certain things you may end up reverting to the command line.</p>

<p>Here is a list of alternative to the TortoiseGit (a popular Windows tool) client
<a href="http://alternativeto.net/software/tortoisegit/">http://alternativeto.net/software/tortoisegit/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git and Sub Module Tips]]></title>
    <link href="http://edmondscommerce.github.io/git/git-and-sub-module-tips.html"/>
    <updated>2013-01-24T17:40:20+00:00</updated>
    <id>http://edmondscommerce.github.io/git/git-and-sub-module-tips</id>
    <content type="html"><![CDATA[<p>Using sub modules in git is incredibly useful and allows for easier and more flexible working when working on component based large projects. In a nut shell the use of sub modules (as the name suggests) allows you to include a git repository as a part of another git repository in order to allow you to use the sub modules code without having to duplicate it&rsquo;s content in to your repository.</p>

<h4>Important commands you will need when working with sub modules</h4>


<dl>
<dt><b>git submodule init</b></dt>
<dd>This tells git to read the modules file and make your local repository aware of any sub modules. When you checkout a repository that uses sub modules nothing is done with them until you do this. You will need to run this at least after cloning a repo but possibly after pulling if new sub modules are added.</dd>
<dt><b>git submodule update</b></dt>
<dd>This makes git to update the sub modules to match what the config says it should be. You will probably need this after cloning a repository for the first time or when you pull changes from a remote as some one may have updated the position of the sub module. When running this you should make sure that you don't have any uncommitted changes in any submodules other wise you will lose them and find it hard to retrieve them.</dd>
<dt><b>git submodule add absolute_path/url_to_repo location_of_repo_in_project</b></dt>
<dd>This command tells git to add the repository at the specified URL/path to the repository. Git will add it to the modules file. After adding it you need to commit. The path to the repo either needs to be the absolute path if you are working locally or the URL that is accessible via the Internet/LAN depending on your environment. It has to be like this so that it doesn't matter where the repository that will be cloning the sub module is located</dd>
<dt><b>git help submodule</b></dt>
<dd>Gives you the man page for the submodule command, an invaluable resource</dd>
</dl>




<h4>Key facts when working with sub modules</h4>


<h5>Working in sub modules</h5>


<p>If you want to modify contents of the sub module, that is make changes and commit them back to the sub modules repository, you can work just as normal. The only thing to watch out off is that when you first do <em>git submodule init; git submodule update;</em> it will checkout what ever commit was specified. This means that the sub module might not be on an actual branch but instead only have a particular commit checkout. Make sure to checkout the relevant branch on the sub module before commencing work.</p>

<h5>Updating a sub modules position on a remote repo</h5>


<p>When <em>git submodule update</em> runs it checkouts out the specified commit by the main repository. If there is no commit specified it will checkout the default branch (usually master). If you want it to checkout a specific branch this cannot be done in a literal sense. Instead what you have to do is checkout the top commit of that branch, then commit the changes to the sub module in main repository. This will ensure that the sub module is now at that position when <em>git submodule update</em> is run. You will have to do this every time you want to update it&rsquo;s position.</p>
]]></content>
  </entry>
  
</feed>
