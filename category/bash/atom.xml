<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/category/bash/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2015-07-01T15:13:21+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Combined CSV]]></title>
    <link href="http://edmondscommerce.github.io/bash/combined-csv.html"/>
    <updated>2014-12-10T17:23:36+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/combined-csv</id>
    <content type="html"><![CDATA[<p>Here is a quick BASH one liner to combine a folder of csv or similar files into one combined file with a header.</p>

<p><code>bash
h=0; for f in *; do if [[ 0 != $h ]]; then tail -n +2 $f &gt;&gt; combined.txt; else cat $f &gt; combined.txt; h=1; fi done
</code></p>

<p>More readably, you can see it like this:</p>

<p>``` bash</p>

<h1>has header been set, starts as no</h1>

<p>h=0;</p>

<h1>foreach file in current directory</h1>

<p>for f in *
do</p>

<pre><code># if header has been set
if [[ 0 != $h ]]
then 
    # append the contents of the file starting from line 2 into the combined file
    tail -n +2 $f &gt;&gt; combined.txt
else 
    # overwrite the combined file with the contents of the file, including header
    cat $f &gt; combined.txt
    # and mark the header as having been set
    h=1 
fi 
</code></pre>

<p>done</p>

<p>```</p>

<p>That&rsquo;s it, pretty easy really</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Script to Kill Sleeping MySQL Processes]]></title>
    <link href="http://edmondscommerce.github.io/bash/bash-script-to-kill-sleeping-mysql-processes.html"/>
    <updated>2014-12-08T12:52:03+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/bash-script-to-kill-sleeping-mysql-processes</id>
    <content type="html"><![CDATA[<p>Pretty much what is says on the tin, if for some reason you have a large amount of sleeping MySQL processes and you want to quickly clear them all out, this little BASH script will do the job.</p>

<p>I leave it to you to decide how to handle the DBUSER and DBPASS variables</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>mysql -u $DBUSER -p$DBPASS -e &ldquo;
select
&mdash; *
id
from information_schema.processlist
where command = &lsquo;Sleep&rsquo;
and time > 1
and host =&lsquo;localhost&rsquo;
&rdquo; | while read id;
do</p>

<pre><code>if [[ "id" == "$id" ]]
then
    continue
fi
echo "kill $id";
mysql -u $DBUSER -p$DBPASS -e "kill $id";
</code></pre>

<p>done</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Delete Everything But - Handy Function for your bashrc File]]></title>
    <link href="http://edmondscommerce.github.io/bash/bash-delete-everything-but-handy-function-for-your-bashrc-file.html"/>
    <updated>2014-04-11T11:23:16+01:00</updated>
    <id>http://edmondscommerce.github.io/bash/bash-delete-everything-but-handy-function-for-your-bashrc-file</id>
    <content type="html"><![CDATA[<p>For me the use case was a cache directory that I wanted to clear out everything apart from one particular file that was expensive
to create and didn&rsquo;t need to be cleared for my purposes</p>

<p>I decided to add this to my ~/.bashrc file for ease of use in future.</p>

<p>Here is the function</p>

<p>``` bash</p>

<h1>Remove Everything But</h1>

<p>function rmbut(){</p>

<pre><code>local BUT="$@"
ls | grep -v *$BUT* | while read f; do rm -rf $f; done
</code></pre>

<p>}
```</p>

<p>To use the function, simply <code>cd</code> to the directory you want to clear out and then call <code>rmbut MyFileIWantToKeep</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding out the biggest folders in a Magento or other website root]]></title>
    <link href="http://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root.html"/>
    <updated>2014-03-04T16:10:19+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/finding-out-the-biggest-folders-in-a-magento-or-other-website-root</id>
    <content type="html"><![CDATA[<p>Often pulling down a Magento or other site you&rsquo;ll find a load of files that have been dumped in the web root. Downloading these is often pointless and takes extra time, so you&rsquo;ll want to exclude them from an rsync (using the <code>--exclude 'path'</code> paramter).</p>

<p>A simple bash command for this is:</p>

<p>```bash</p>

<p>du -m &mdash;max-depth=1 &mdash;exclude media | sort -n</p>

<p>```</p>

<p>This invokes <code>du</code> to show each direct subfolder&rsquo;s contents' size, and pipes it through to <code>sort</code> to rank them in increasing size. The sizes are in MB. See <a href="http://explainshell.com/explain?cmd=du+-m+--max-depth%3D1+--exclude+media+|+sort+-n">a more broken down explanation here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Find Files and Echo Filename and Contents]]></title>
    <link href="http://edmondscommerce.github.io/bash/bash-find-files-and-echo-filename-and-contents.html"/>
    <updated>2014-01-13T17:18:55+00:00</updated>
    <id>http://edmondscommerce.github.io/bash/bash-find-files-and-echo-filename-and-contents</id>
    <content type="html"><![CDATA[<p>I thought this one would be easy but actually its taken a bit of messing about.</p>

<p>The goal was to find files matching a pattern, in this case a file name, and then echo out the full path to the file and also the file contents.</p>

<p>If you are interested, the reason I was doing this was to understand the <em>interesting</em> approach that the ORO Platform has taken to setting up the AppKernel bundles in Symfony2.</p>

<p>The command is here:</p>

<p><code>
 find . -type f -iwholename '*bundles.yml' | xargs -I % bash -c "echo ''; echo '----------------------'; echo %; cat %; echo '';"
</code></p>

<p>I have added in some extra echos to make it format nicely but the main thing is that I am using xargs to handle the results from find.</p>

<p>The individual result is assigned to the % character. Then a sub shell is instantiated to manage a specific command that both echos % itself and then uses cat to echo the contents of %.</p>

<p>This gave me an output like this:</p>

<h2>```</h2>

<p>./vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Resources/config/oro/bundles.yml
bundles:</p>

<pre><code>- Oro\Bundle\ImportExportBundle\OroImportExportBundle
</code></pre>

<hr />

<p>./vendor/oro/platform/src/Oro/Bundle/PlatformBundle/Resources/config/oro/bundles.yml
bundles:</p>

<pre><code>- { name: Symfony\Bundle\FrameworkBundle\FrameworkBundle, priority: -255 }
- { name: Symfony\Bundle\SecurityBundle\SecurityBundle, priority: -250 }
- { name: Symfony\Bundle\TwigBundle\TwigBundle, priority: -245 }
- { name: Symfony\Bundle\MonologBundle\MonologBundle, priority: -240 }
- { name: Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle, priority: -235 }
- { name: Symfony\Bundle\AsseticBundle\AsseticBundle, priority: -230 }
- { name: Doctrine\Bundle\DoctrineBundle\DoctrineBundle, priority: -225 }
- { name: Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle, priority: -220 }
- { name: Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle, priority: -215 }
- { name: JMS\SerializerBundle\JMSSerializerBundle, kernel: true, priority: -210 }
- { name: Knp\Bundle\PaginatorBundle\KnpPaginatorBundle, priority: -205 }
- { name: Knp\Bundle\MenuBundle\KnpMenuBundle, priority: -200 }
- { name: FOS\RestBundle\FOSRestBundle, priority: -195 }
- { name: FOS\JsRoutingBundle\FOSJsRoutingBundle, priority: -190 }
- { name: Nelmio\ApiDocBundle\NelmioApiDocBundle, priority: -185 }
- { name: BeSimple\SoapBundle\BeSimpleSoapBundle, priority: -180 }
- { name: Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle, priority: -175 }
- { name: Escape\WSSEAuthenticationBundle\EscapeWSSEAuthenticationBundle, priority: -170 }
- { name: Liip\ImagineBundle\LiipImagineBundle, priority: -165 }
- { name: Genemu\Bundle\FormBundle\GenemuFormBundle, priority: -155 }
- { name: A2lix\TranslationFormBundle\A2lixTranslationFormBundle, priority: -150 }
- { name: Lexik\Bundle\MaintenanceBundle\LexikMaintenanceBundle, priority: -145 }
- Oro\Bundle\PlatformBundle\OroPlatformBundle
</code></pre>

<p>```</p>

<p>And you can see that the bundle file I was looking for is in the Platform Bundle.</p>
]]></content>
  </entry>
  
</feed>
