<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hosting | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/category/hosting/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-10-02T09:34:14+01:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is DNS and how does it affect site owners?]]></title>
    <link href="http://edmondscommerce.github.io/hosting/what-is-dns-and-how-does-it-affect-site-owners.html"/>
    <updated>2013-03-26T15:34:32+00:00</updated>
    <id>http://edmondscommerce.github.io/hosting/what-is-dns-and-how-does-it-affect-site-owners</id>
    <content type="html"><![CDATA[<h2>What DNS is</h2>


<p><strong>DNS (Domain Name System)</strong> is the system used to make sure that when users type in your web address into their browser, they end up on your website.</p>

<h2>How communication happens on the internet</h2>


<p>When using the web, every site has its own address. It might have extra bits on the start and end, but the core part will be &ldquo;yoursitename.com&rdquo;, or similar. This is your <strong>Domain Name</strong>.</p>

<p>Behind the scenes, servers have a unique number assigned to them, similar to how houses have phone numbers. This will look something like &ldquo;123.456.789.000&rdquo;. This is called an <strong>IP Address</strong>.</p>

<p>Like phone numbers, the problem with IP addresses is that they&rsquo;re hard to remember. It&rsquo;s not easy to tell other people a list of numbers and have them remember them when they get home. It&rsquo;s for this reason we have phone books. Fortunately the internet has its own built in way of looking up IP addresses by a name. This is where DNS comes in.</p>

<p>DNS is a way of looking up an IP address by a more memorable name. When you type in &ldquo;google.com&rdquo; it&rsquo;s actually being converted into an IP address without you realising.</p>

<h2>How Domain Names are converted into IP Addresses</h2>


<p>When you buy your domain from your registrar, you will also be provided an area where you can set up <strong>DNS Records, also called Zone Records</strong>. This is where you, or your development company, set up the conversion from the Domain Name to the IP address. When this is populated, people accessing your domain are able to end up on your server because of this translation.</p>

<p>In actual fact, this information is spread across the world so that every <strong>DNS Server</strong> in the world (a place where the translation happens) knows what your IP address is, exactly like sharing a phone book with the world.</p>

<p>This translation information is transmitted with a validity period, which is how often other DNS Servers should ask for updates. This is called a &ldquo;Time To Live&rdquo;, or TTL). This is generally set to a relatively high time, and is the reason you generally have a 24 hour wait period when you change where your site is hosted.</p>

<h2>Separating your Domain Registrar from your Name Server</h2>


<p>It&rsquo;s possible (and not unusual) to have the <strong>Domain Registrar</strong> (the company you bought the domain from) and the <strong>Name Server</strong> (the place where you update these DNS records) in completely different places. This is set up by telling your Registrar where your Name Servers are.</p>

<p>When this is changed, it means that the Registrar is no longer in control of the translation from Domain Name to IP Address</p>

<h2>The General Overview</h2>


<p>So when you access a website, here is what&rsquo;s actually happening behind the scenes</p>

<ul>
<li>You type in the web address into your browser</li>
<li>Your browser asks a DNS Server what the corresponding IP address is</li>
<li>The DNS server sends the IP address back to your computer</li>
<li>Your browser then knows which specific IP address to send subsequent messages to</li>
<li>The browser takes this IP adress and sends a message to the server it's assigned to for the web page</li>
<li>The server sends back the page to your computer, and it's displayed on your screen</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Web Services Blog: AWS Elastic Beanstalk - Build PHP Apps Using Git-Based Deployment]]></title>
    <link href="http://edmondscommerce.github.io/hosting/amazon-web-services-blog-aws-elastic-beanstalk-build-php-apps-using-git-based-deployment.html"/>
    <updated>2012-03-21T07:44:15+00:00</updated>
    <id>http://edmondscommerce.github.io/hosting/amazon-web-services-blog-aws-elastic-beanstalk-build-php-apps-using-git-based-deployment</id>
    <content type="html"><![CDATA[<p>Easily deploy PHP applications to the Amazon Web Services infrastructure allowing you to take advantage of an easily scaled flexible cloud based system.</p>

<p>Furthermore there is Git based deployment so your version control workflow can hook directly into deployment for speed and convenience.</p>

<p>This does really look attractive. The Angry birds store recently launched on Magento using Varnish and Amazon Web Services and it runs very fast indeed. Perhaps the days of expensive dedicated hardware are really numbered. If its this easy to set something up that can perform as well as a complex server cluster at a fraction of the cost.</p>

<p><a href="http://aws.typepad.com/aws/2012/03/aws-elastic-beanstalk-build-php-apps-using-git-based-deployment.html"><a href="http://aws.typepad.com/aws/2012/03/aws-elastic-beanstalk-build-php-apps-using-git-based-deployment.html">http://aws.typepad.com/aws/2012/03/aws-elastic-beanstalk-build-php-apps-using-git-based-deployment.html</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Public Key Authentication Easy Instructions]]></title>
    <link href="http://edmondscommerce.github.io/hosting/ssh-public-key-authentication-easy-instructions.html"/>
    <updated>2009-08-28T15:32:40+01:00</updated>
    <id>http://edmondscommerce.github.io/hosting/ssh-public-key-authentication-easy-instructions</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>Just thought I would drop a quick blog and link to this nice succinct guide for setting up SSH to be able to log in via public key.</p>

<p><a href="http://www.petefreitag.com/item/532.cfm">SSH public key tutorial</a></p>

<p>Using public keys offers you a more secure way of logging into an SSH server and also opens up the possiblity of being able to log into an SSH server without entering your password. This is less secure of course but allows easier remote scripted SSH.</p>

<p>For example you can set up a user account on your server with limited permissions and then on a remote machine set up public key login capabilites and cron an rsync script to maintain a mirror image of your server without the need for any user intervention.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain Names and HOSTS File]]></title>
    <link href="http://edmondscommerce.github.io/hosting/domain-names-and-hosts-file.html"/>
    <updated>2009-06-01T17:11:10+01:00</updated>
    <id>http://edmondscommerce.github.io/hosting/domain-names-and-hosts-file</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>If you have recently bought a domain name and updated the nameservers to point to your new hosting, or if you are moving hosts and have update the nameservers for your existing domain name then for a period of up to 48 hours people who type in your domain name into their web browser might get directed to the old server or the new server.</p>

<p>This period is called propogation and these days can be over quite quickly, but is still an important point to be aware of.</p>

<p>However what do you do if you need to make sure you are looking at your new server and not your old server?</p>

<p>You have two options really, you can wait for the propagation to complete or you can edit your HOSTS file to force your computer to look at your new server when you type your domain name.</p>

<p>This is really quite easy. You only need to know one thing which is the IP address of your new server.</p>

<p>Then you find your hosts file on your computer, open it up in a text editor like notepad (for windows) and add a line like this:</p>

<p>```</p>

<p>123.123.123.123 www.mydomain.com</p>

<p>```</p>

<p>at the bottom of the file. Then save that file, close all of your web browser windows and reopen a browser session and if you type your domain name you should get forced through to the new server.</p>

<p><a href="http://en.wikipedia.org/wiki/Hosts_file#Location_and_default_content" target="_blank">See this wikipedia page for info on where to find your HOSTS file.</a></p>

<p>For windows users, you can generally find your HOSTS file here:
c:windowssystem32driversetc</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Htaccess Force SSL with Redirect (Non Standard SSL Port Compatible)]]></title>
    <link href="http://edmondscommerce.github.io/hosting/htaccess-force-ssl-with-redirect-non-standard-ssl-port-compatible.html"/>
    <updated>2009-04-28T11:07:26+01:00</updated>
    <id>http://edmondscommerce.github.io/hosting/htaccess-force-ssl-with-redirect-non-standard-ssl-port-compatible</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is post is now quite old and the the information it contains may be out of date or innacurate.</h4>
<p>
If you find any errors or have any suggestions to update the information <a href="http://edmondscommerce.github.io/contact-us/index.html">please let us know</a>
or <a href="https://github.com/edmondscommerce/edmondscommerce.github.io">create a pull request on GitHub</a>
</p>
</div>


<p>Check out this little snippet of htaccess code to force SSL usage. Works regardless of port.</p>

<p>```</p>

<p>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) <a href="https://%">https://%</a>{HTTP_HOST}%{REQUEST_URI}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
