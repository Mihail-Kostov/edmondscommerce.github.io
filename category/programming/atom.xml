<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Edmonds Commerce Dev Blog]]></title>
  <link href="http://edmondscommerce.github.io/category/programming/atom.xml" rel="self"/>
  <link href="http://edmondscommerce.github.io/"/>
  <updated>2014-01-13T17:30:01+00:00</updated>
  <id>http://edmondscommerce.github.io/</id>
  <author>
    <name><![CDATA[EdmondsCommerce Development Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP UK Conference In London]]></title>
    <link href="http://edmondscommerce.github.io/php/programming/usability/php-uk-conference-in-london.html"/>
    <updated>2013-02-25T18:34:13+00:00</updated>
    <id>http://edmondscommerce.github.io/php/programming/usability/php-uk-conference-in-london</id>
    <content type="html"><![CDATA[<p>As you might be aware, the UK PHP Conference was held in London last weekend. Having been the lucky winner of a ticket from PHP NW I went along.</p>

<h3>The Venue</h3>


<p>The conference was held in The Brewery in London city centre, a well suited conference centre with a variety of different conference rooms. An old Whitbread brewery, it was modern and practical while still maintaining enough of its history to keep its character. Overall the venue was great and it was good to have the variety of different rooms for all of the different events</p>

<h3>The talks</h3>


<p>The talks on offer were on a wide variety of subjects, varying from the very specific libraries to things of use to any PHP developer. Each of the talks was led by a volunteer giving up their time to speak about a subject for which they held a passion, it came across very well and as ever is good to hear from active members of the community.</p>

<p>Talks I found to be of particular interest were</p>

<ul>
    <li><strong>The Future of the PHP Development Environment</strong> A practical introduction to <a href="http://www.vagrantup.com/" title="Vagrant">Vagrant</a>, demonstrating its purpose in creating a reliable, predictable server environment. Covered was the installation, configuration and use of the software</li>
    <li><strong>OpenStreetMap for the Web</strong> An enthusiastic demonstration of the power of having openly accessible data of the world's maps and the APIs which enable a plethora of different applications</li>
    <li><strong>A Hands-On Introduction to Writing Unit Tests Using PHPUnit</strong> A very practical (with live coding and demonstration of the Unit Tests, a risky move that paid off) intro to unit tests in PHP. Aimed at the very beginner, it started slowly with very simple tests but showed the power of them in much bigger projects</li>
</ul>




<h3>In summary</h3>


<p>I thoroughly enjoyed the day, and would recommend anyone wanting to attend in future. The talks will be posted on the <a href="http://phpconference.co.uk/schedule" title="PHP UK Website" target="_blank">PHP UK website</a> in the coming weeks so you should be able to get a sample of the events there</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading JSON without Reading JSON!]]></title>
    <link href="http://edmondscommerce.github.io/programming/reading-json-without-reading-json.html"/>
    <updated>2013-02-08T16:16:19+00:00</updated>
    <id>http://edmondscommerce.github.io/programming/reading-json-without-reading-json</id>
    <content type="html"><![CDATA[<p>JSON is a well structure interoperable way of passing data between systems. It&rsquo;s a good way of passing large amount of data into a web page for JavaScript to process and between system on the internet regardless of there architecture or programming language.</p>

<p>JSON is one of the hardest data structure to read directly as a human in it&rsquo;s RAW format compared to other formal grammars such as XML, YAML or ini.</p>

<p>Fortunately there is an easy trick that you can do with Chrome, Firefox with Firebug and even Opera and IE9!</p>

<p>Take the JSON you have, wrap it in &ldquo;eval()&rdquo; the same as you would if you where writing a web page (because it is just JavaScript after all) run it and every modern browser this was tested with should allow you to inspect the resulting data structure.</p>

<p>Example JSON:
<code>
{&ldquo;glossary&rdquo;:{&ldquo;title&rdquo;:&ldquo;example glossary&rdquo;,&ldquo;GlossDiv&rdquo;:{&ldquo;title&rdquo;:&ldquo;S&rdquo;,&ldquo;GlossList&rdquo;:{&ldquo;GlossEntry&rdquo;:{&ldquo;ID&rdquo;:&ldquo;SGML&rdquo;,&ldquo;SortAs&rdquo;:&ldquo;SGML&rdquo;,&ldquo;GlossTerm&rdquo;:&ldquo;Standard Generalized Markup Language&rdquo;,&ldquo;Acronym&rdquo;:&ldquo;SGML&rdquo;,&ldquo;Abbrev&rdquo;:&ldquo;ISO 8879:1986&rdquo;,&ldquo;GlossDef&rdquo;:{&ldquo;para&rdquo;:&ldquo;A meta-markup language, used to create markup languages such as DocBook.&rdquo;,&ldquo;GlossSeeAlso&rdquo;:[&ldquo;GML&rdquo;,&ldquo;XML&rdquo;]},&ldquo;GlossSee&rdquo;:&ldquo;markup&rdquo;}}}}}
</code></p>

<table>
<tr>
<td>
Firefox with Firebug:
<img src="/assets/firefoxjson-600x328.png">
</td>
</tr>
<tr>
<td>
Chrome:
<img src="/assets/chromejson-600x313.png">
</td>
</tr>
<tr>
<td>
Opera:
<img src="/assets/bhtAjti.png">
</td>
</tr>
<tr>
<td>
Internet Explorer 9:
Note: To see this structure you need to click the "Add watcher" link displayed upon running the code.
<img src="/assets/ie9json.png">
</td>
</tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically convert smart quotes in the browser]]></title>
    <link href="http://edmondscommerce.github.io/programming/automatically-convert-smart-quotes-in-the-browser.html"/>
    <updated>2012-02-27T18:59:55+00:00</updated>
    <id>http://edmondscommerce.github.io/programming/automatically-convert-smart-quotes-in-the-browser</id>
    <content type="html"><![CDATA[<p>If you have ever had to browse for a coding solution, you will have come across the problem of &ldquo;smart&rdquo; quotes replacing normal punctuation. Thankfully there is a simple fix to to this, a userscript called DumbQuotes which can be downloaded <a href="http://userscripts.org/scripts/show/658">here</a>.</p>

<p>This will convert all of the single &amp; double quotes into something more code friendly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elastik - Why you should use it]]></title>
    <link href="http://edmondscommerce.github.io/programming/elastik-why-you-should-use-it.html"/>
    <updated>2011-06-07T14:02:00+01:00</updated>
    <id>http://edmondscommerce.github.io/programming/elastik-why-you-should-use-it</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>If you are looking for a light weight, fast, PHP based yet fully featured issue tracking system, <a href="http://elastik.sourceforge.net/">Elastik</a> is a great choice. Here is a quick start guide for it&rsquo;s usage.</p>

<h3>The Problem</h3>


<p>When working on any type of development project be it a design, programming even construction problems within the project will almost certainly arise. Keeping track of the problems that people have brought to attention can be hard to do effectively. Issues might be raised by email, IM or in person. Keeping track of the issues that have been raised can be a real problem if you don&rsquo;t keep on top of it. Even on a single person project, it&rsquo;s so easy to forget that some one pointed out a small problem. Using email and noting systems to track what issues have been raised can work for a small project but will quickly become difficult to work with one there is more than a single person on the project, such system of working will also fall apart if the number of current issues becomes large. Using a system designed to rectify the issue really is a boon. It not only allows each issue and it&rsquo;s status to be tracked, but also standardises the method of communication so that every one knows where to look to see what is happening with an issue. Ultimately, the best benefit of using a tracking system is not losing/forgetting about any issues that have be raised.
Elastik’s intended use is for multi-client multi-project purposes. That is to say Elastik can have many clients using it, each client having multiple projects.</p>

<h3>Creating Account and Account Permissons</h3>


<p>Account creation of elastic is done via email on a invitation only basis. Only System, Project or Client Administrators can invite additional users. Elastik has quite granular user permissions. To start with there are three types of users Administrator, Client users/administrators and Project users/administrators. In terms of access levels Project users/administrator are the ‘lowest’ permission’ed user as they only have access to a single project. Client users/administrators have access to all the projects that a client has and system administrators have global access. On top of these levels of access, Client users can also be administrators of the client and the same applies to project users. Elastik also has granular per-project and per-client permissions settings available. In summary, if you want to tightly control access to the tracking system, you can do it in great detail.</p>

<h3>Setting up a client project</h3>


<p>Elastik uses the concept that each project belongs to a client. Even if you are making an application for your self, there is still a client involved (you!). So before you can create a project you need to create a client. This is a way of grouping projects together as well as defining a client owner. When creating a client you are required to supply an email address. The person who owns this address will be given client level access and will have client access permissions, and there for access to all project that belong to that client. Client administrators can change settings related to the client and all the projects that belong to that client. If you do not wish to setup any client level access you can enter a existing system administrator’s email address and then add a new user to the client/project later. All this also applies when creating a new project.</p>

<h3>Managing Issues</h3>


<p>Tickets is what issue tracking is all about. Ultimately working with tickets can be as straight forward as you like or as complex. Using the default ticket categories and schema will be enough for most situations and will even be workable even if they are not. However, Elastik allows you to create much more complex ticket structure which should make it flexible enough for use with any project.</p>

<h3>Customising Tickets</h3>


<p>The default ticket structure is that a ticket can either be a new feature request or a problem within already existing functionality. You can either expand or shrink this as necessary on a per client or project basis.</p>

<p>The default ticket schema is that a ticket can either be “Open” or “Closed”. You can customise this to have as many different ticket status as you like. Elastik also has the idea that it should be logically impossible to go one ticket status to a particular other one. For example, it would not logically make sense for a ticket to be able to transition from “Closed” to “New Ticket” as the ticket already exists so it is not a new ticket at all. In this example you would probably want to change to “Re-opened ticket”. Elastik allows you to specify that “New Ticket” is the default status of a new ticket and that it impossible for a ticket’s status to be “New Ticket” after is has already been changed, transitions can be defined to be quite complex.</p>

<h3>Extensions</h3>


<p>Elastik has a modular design and comes pre-packaged with a number of modules all of which are disabled by default, presumably because some people may simply not want them. Below are two that web developers who often spend allot of time communicating with clients may find particularly useful.</p>

<h4>E-Mail Summaries</h4>


<p>By default Elastik only uses email for setting up accounts and nothing else. The email summaries module will send emails to individuals periodically informing them of changes made on a project or client. This does require a cron/scheduled task be setup on a computer to function however. This is particularly useful to keep clients up to date with changes to issues and also keep you up to date on issues the client is raising.
One minor draw back is that by default it will only email changes to tickets to people who are watching the ticket. However, you can enable it to send every one on a project all updates whether they are watching it or not in the projects configuration.</p>

<h4>File Attachments</h4>


<p>The file attachments extensions allows files to be uploaded to the hosting server and attached (associated) with a ticket. Files are attached after ticket creation which does reduce the steamlined-iness of the process, but you can attach more than one file to a ticket.
The one thing to watch out for when using this extension is that it defaults to not allowing any uploads and you have to explicitly define what file extension types can be uploaded on a per-client or per-project basis. You will most likely want to enable all image formats so client can upload screen shots of the issue.</p>

<h3>Summary</h3>


<p>If you are having any amount of trouble communicating and keeping track of issues for any type of project, using Elastik is definitely a good way to solve this.
Elastik is fast, customisable, flexible, functionally complete despite been at version 0.4.1. No major draw backs despite been incomplete. Personally I would like to see it keep the light weight approach so that it doesn’t matter how old/rubbish a clients computer might be and they are using IE6 it will still be fast. It will also mean that if your server is over loaded, it will still run fast. Of course, if it doesn&rsquo;t do what you want out of the box, it is PHP based and open source, you can either write a new module for it or fork it and start hacking at the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Bash function libraries]]></title>
    <link href="http://edmondscommerce.github.io/programming/linux/ubuntu/building-bash-function-libraries.html"/>
    <updated>2011-05-27T10:04:15+01:00</updated>
    <id>http://edmondscommerce.github.io/programming/linux/ubuntu/building-bash-function-libraries</id>
    <content type="html"><![CDATA[<div class="oldpost"><h4>This is an old post. The information it contains is probably out of date or innacurate</h4>
<p>
This is a post that was written a long time ago and is only being kept here for posterity.
You should probably look up more recent blog posts related to the subject you are researching
</p>
</div>


<p>Bash provides many powerful functions but how can you use these easily?</p>

<p>If you spend any time using the command line, either to manage a server or on the desktop, you have to quickly become proficient with bash. You will also find the you carry out many of the same tasks time after time.</p>

<p>This can quickly become tiresome and error prone, particularly if you are piping several commands together. However, bash provides several ways to make your life easier.</p>

<h3>Aliases</h3>


<p>If you are always going to be using the same flags with a command, you can ensure that they are called by default by using an alias.</p>

<p>An alias is a shorthand that bash uses in order to fire commands. Several are included as standard with Ubuntu (and other distros) and are stored in your .bashrc file. You can edit these and add your own as the need occurs.</p>

<p>An example of this is that I prefer the human readable file sizes when using ls. You can turn these on using the -h flag, but you have to include this every time you run the command. To make things easier I changed the alias for ll (long list) to read as follows</p>

<p>```</p>

<p>alias ll=&ldquo;ls -ahlF&rdquo;</p>

<p>```</p>

<p>This way I don&rsquo;t need to remember to put the flag in.</p>

<p>As you build up more of these commands, it makes sense to store them in a separate file so you can easily find and edit them. You can place all of you aliases in a file called .bash_aliases and they will be available for use.</p>

<h3>Scripts</h3>


<p>Aliases are fine for quickly calling simple commands, but many times you will need to carry out more complex tasks. In order to do this, you can make a script, and then call that.</p>

<p>By placing everything into a script, you benefit from being able to carry out more complicated functions, and the easy of calling it from a single command.</p>

<p>An example of this would be if you wanted to compare two branches in git, and see all of the files that had been created or modified, but not the files that had been deleted. You create a file called git_get_changed_files and put the following in</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>local ORIGINAL CHANGED FILES
ORIGINAL=&ldquo;$1&rdquo;
CHANGED=&ldquo;$2&rdquo;</p>

<pre><code>FILES=$(git diff --name-status $ORIGINAL..$CHANGED public/ | awk '{print $1"@@@@@"$2}')
for FILE in $FILES
do
        echo "$FILE" | awk -F "@@@@@" '{ i=""; if ($1 != "D") print $2}'
done
</code></pre>

<p>```</p>

<p>If you place this in your home/bin folder you will then be able to run  git_get_changed_files like a normal command.</p>

<h3>A Global Function Library</h3>


<p>You can expand on this by creating a global library of functions. This works by putting all of the functions into a folder, where each file is a namespace for different functions.</p>

<p>This can be achieved by creating a script that will source of all of the files in a folder, like so:</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>for f in $(ls /path/to/folder/);</p>

<pre><code>do source /path/to/folder/$f; 
</code></pre>

<p>done</p>

<p>```</p>

<p>Call this script func and place it in your home/bin folder. Then you put a script in the folder referenced in the file and use the following structure.</p>

<p>```</p>

<p>function parse.(){ # auto complete helper, second argument is a grep against the function list</p>

<pre><code>if [[ '' == "$@" ]]
then
    echo "Parse Namespaced Functions List"
    cat $BASH_SOURCE | grep "^function[^(]" | awk '{j=" USAGE:"; for (i=5; i&lt;=NF; i++) j=j" "$i; print $2" "j}'
else
    echo "Parse Functions Matching: $@"
    cat $BASH_SOURCE | grep "^function[^(]" | awk '{j=" USAGE:"; for (i=5; i&lt;=NF; i++) j=j" "$i; print $2" "j}' | grep $@
fi
</code></pre>

<p>}</p>

<p>function parse.access_log_top_ten_code() { # Show the top ten code from access_log: useage &hellip;code $FILE $CODE</p>

<pre><code>FILE=$1
CODE=$2
echo "Count the top ten $CODE'd pages"

cat $FILE | awk '{ i=($9=="$CODE" ) ? $7 : ""; print i; }' | sort | uniq -c | sort -n | tail -n 11 | head -n 10
</code></pre>

<p>}</p>

<p>```</p>

<p>In this folder a namespace of parse is created. Running
```</p>

<p>func parse.</p>

<p>```</p>

<p>Will list all of the function in the file. Running func parse. log will list all of the function that contain log in the function name or description. When the files are listed, the function name will be displayed with the comment along side it.</p>

<p>As the func command sources all of the different files, you are able to makes use of the functions across different namespaces. This means that you can create a file that will format output and then use that in with your git functions.</p>

<p>I hope that you are able to make use of this idea, and build your own library of functions. Anything that you thing would be useful to add to the library, please mention below.</p>
]]></content>
  </entry>
  
</feed>
