<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/</link>
    <description>Recent content on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Oct 2016 08:08:38 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Portable System Update on Shutdown</title>
      <link>https://edmondscommerce.github.io/portable-system-update-on-shutdown/</link>
      <pubDate>Fri, 28 Oct 2016 08:08:38 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/portable-system-update-on-shutdown/</guid>
      <description>

&lt;h1 id=&#34;another-update-on-shutdown-solution&#34;&gt;Another Update on Shutdown Solution?&lt;/h1&gt;

&lt;p&gt;While the other solutions on this blog (&lt;a href=&#34;https://edmondscommerce.github.io/auto-update-fedora-on-shutdown/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;
and &lt;a href=&#34;https://edmondscommerce.github.io/add-keybinding-to-dnf-upgrade-and-shutdown-to-gnome-shell/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)
are probably more elegant they have dependencies on either the desktop (Gnome) or systemd.
This solution should be portable across Linux distros and desktops.&lt;/p&gt;

&lt;h1 id=&#34;the-solution&#34;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://specifications.freedesktop.org/desktop-entry-spec/latest/&#34; target=&#34;_blank&#34;&gt;freedesktop.org&lt;/a&gt; define a specification
for application launchers. These launchers will run on all compatible desktops (which means almost all
Linux desktops).&lt;/p&gt;

&lt;p&gt;The desktop launcher for update on shutdown can be created using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&#39;EOF&#39; | bash
echo &amp;quot;[Desktop Entry]
Name=Shutdown
Exec=gnome-terminal --command=\&amp;quot;sudo bash -c &#39;dnf -y upgrade; shutdown now&#39;\&amp;quot;
Type=Application
Terminal=true&amp;quot; &amp;gt; ~/.local/share/applications/shutdown.desktop;
chmod u+x ~/.local/share/applications/shutdown.desktop;
ln -s ~/.local/share/applications/shutdown.desktop ~/Desktop/shutdown.desktop
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should give you a launcher on your desktop as well as in your normal application menu.&lt;/p&gt;

&lt;p&gt;To make this work for your distribution you may need to change &lt;code&gt;dnf -y upgrade&lt;/code&gt; to something
else like &lt;code&gt;apt-get update; apt-get -y upgrade;&lt;/code&gt; for Debian based distros.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auto-update Fedora on Shutdown</title>
      <link>https://edmondscommerce.github.io/auto-update-fedora-on-shutdown/</link>
      <pubDate>Thu, 27 Oct 2016 16:14:45 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/auto-update-fedora-on-shutdown/</guid>
      <description>&lt;p&gt;With the &lt;a href=&#34;https://dirtycow.ninja&#34; target=&#34;_blank&#34;&gt;Dirty Cow&lt;/a&gt; exploit out in the wild, it is important to make sure that your Linux machines are kept up to date.&lt;/p&gt;

&lt;p&gt;The following commands will ensure your machine updates itself each time you shut it down&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;su
cat &amp;gt; /usr/lib/systemd/system-shutdown/upgrade &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOL &amp;amp;&amp;amp; chmod +x /usr/lib/systemd/system-shutdown/upgrade&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;/usr/bin/dnf upgrade -y&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;EOL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Add Keybinding to Dnf Upgrade and Shutdown to Gnome Shell</title>
      <link>https://edmondscommerce.github.io/add-keybinding-to-dnf-upgrade-and-shutdown-to-gnome-shell/</link>
      <pubDate>Thu, 27 Oct 2016 15:20:00 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/add-keybinding-to-dnf-upgrade-and-shutdown-to-gnome-shell/</guid>
      <description>&lt;p&gt;In Fedora I prefer to apply updates just before shutting down so that next time I boot up the updates will be in place.&lt;/p&gt;

&lt;p&gt;For me this seems like the best way to do it.&lt;/p&gt;

&lt;p&gt;To make that easier I also then create a keybinding so that I can hit &lt;code&gt;[Start]+[q]&lt;/code&gt; to trigger the upgrade/shutdown process in a terminal&lt;/p&gt;

&lt;p&gt;Being a lazy developer I prefer to have things automated and so here is a bash command to set this up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&#39;EOF&#39; | bash 
echo &amp;quot;setting up keybinding&amp;quot;;
keybindingsPath=&amp;quot;/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings&amp;quot;
custom0path=&amp;quot;$keybindingsPath/custom0&amp;quot;
dconf write $custom0path/binding &amp;quot;&#39;&amp;lt;Super&amp;gt;q&#39;&amp;quot;
dconf write $custom0path/command &amp;quot;&#39;gnome-terminal --command=\&amp;quot;sudo bash -c \&#39;dnf -y upgrade; shutdown now\&#39;\&amp;quot;&#39;&amp;quot;
dconf write $custom0path/name &amp;quot;&#39;upgrade and shutdown&#39;&amp;quot;
c0=&amp;quot;&#39;/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/&#39;&amp;quot;
gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings &amp;quot;[$c0]&amp;quot;
echo &amp;quot;

Done

try hitting [Start] + [q]

&amp;quot;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;just copy/paste into an open terminal window to set this up&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic atop Usage</title>
      <link>https://edmondscommerce.github.io/basic-atop-usage/</link>
      <pubDate>Wed, 26 Oct 2016 11:29:38 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/basic-atop-usage/</guid>
      <description>

&lt;h1 id=&#34;what-is-atop&#34;&gt;What is atop?&lt;/h1&gt;

&lt;p&gt;Taken from the man page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The program atop is an interactive monitor to view the load on a Linux system. It shows the occupation
of the most critical hardware resources (from a performance point of view) on system level, i.e. cpu,
memory, disk and network.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;raw-data-format&#34;&gt;Raw Data Format&lt;/h1&gt;

&lt;p&gt;The raw data format is a binary log file that atop can be configured to record. This log file can be
generated for any length of time and allows you to go back in time to debug system performance issues.&lt;/p&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;You can install atop from most Linux repos or download it directly from their
&lt;a href=&#34;http://www.atoptool.nl/downloadatop.php&#34; target=&#34;_blank&#34;&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to gain the benefits of the binary log file you can either configure atop to generate this
on an ongoing basis or you can run atop with the following command. This command would be most
useful for debugging easily repeatable bugs / issues.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;atop -w &amp;lt;log file path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To configure atop for ongoing log generation you need to point a cron job at &lt;code&gt;atop.daily&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 0 * * * root /etc/atop/atop.daily
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: this file seems to be missing from both Fedora and Centos when atop is installed from the repos.
I&amp;rsquo;m still looking into a fix for this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;atop will write it&amp;rsquo;s log files to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/var/log/atop/atop_YYYYMMDD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To read these log files use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;atop -r &amp;lt;log file path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h1&gt;

&lt;p&gt;For more detailed usage info I recommend you check out the very detailed man page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;? &amp;ndash; help&lt;/li&gt;
&lt;li&gt;g &amp;ndash; Generic output&lt;/li&gt;
&lt;li&gt;m &amp;ndash; Memory output&lt;/li&gt;
&lt;li&gt;d &amp;ndash; Disk output&lt;/li&gt;
&lt;li&gt;n &amp;ndash; Network output&lt;/li&gt;
&lt;li&gt;c &amp;ndash; Show commandline of the process&lt;/li&gt;
&lt;li&gt;u &amp;ndash; Show activity by user&lt;/li&gt;
&lt;li&gt;p &amp;ndash; Show cumulative activity per program&lt;/li&gt;
&lt;li&gt;z &amp;ndash; Freeze the output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When viewing a binary log:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;t &amp;ndash; View next sample&lt;/li&gt;
&lt;li&gt;T &amp;ndash; View previous sample&lt;/li&gt;
&lt;li&gt;r &amp;ndash; Rewind to the beginning&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;useful-links&#34;&gt;Useful Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/atop&#34; target=&#34;_blank&#34;&gt;atop(1) - Linux man page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Magento 2: How to add new tabs to the product page</title>
      <link>https://edmondscommerce.github.io/magento-2-how-to-add-new-tabs-to-the-product-page/</link>
      <pubDate>Tue, 18 Oct 2016 17:52:21 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-2-how-to-add-new-tabs-to-the-product-page/</guid>
      <description>&lt;p&gt;The tabs on the product page are handled by the &lt;code&gt;Magento_Catalog&lt;/code&gt;&amp;rsquo;s &lt;code&gt;product/view/details.phtml&lt;/code&gt; template file. In there the line &lt;code&gt;$block-&amp;gt;getGroupChildNames(&#39;detailed_info&#39;, &#39;getChildHtml&#39;)&lt;/code&gt; collects all blocks in the &lt;code&gt;detailed_info&lt;/code&gt; group for the tabs.&lt;/p&gt;

&lt;p&gt;This means the following layout XML will add a new tab:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;referenceBlock name=&amp;quot;product.info.details&amp;quot;&amp;gt;
            &amp;lt;block class=&amp;quot;Magento\Framework\View\Element\Template&amp;quot; template=&amp;quot;Magento_Theme::path/to/template.phtml&amp;quot; name=&amp;quot;INSERT NAME&amp;quot; group=&amp;quot;detailed_info&amp;quot;&amp;gt;
                &amp;lt;arguments&amp;gt;
                    &amp;lt;argument name=&amp;quot;title&amp;quot; translate=&amp;quot;true&amp;quot; xsi:type=&amp;quot;string&amp;quot;&amp;gt;TAB TITLE HERE&amp;lt;/argument&amp;gt;
                &amp;lt;/arguments&amp;gt;
                &amp;lt;/block&amp;gt;
            &amp;lt;/block&amp;gt;
        &amp;lt;/referenceBlock&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;group=&amp;quot;detailed_info&amp;quot;&lt;/code&gt; part adds it to the tabbed area.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;argument name=&amp;quot;title&amp;quot;&lt;/code&gt; part of that sets a string value on the block which will be used for the tab&amp;rsquo;s title. The content of the block you&amp;rsquo;re adding will be used as the tab content.&lt;/p&gt;

&lt;p&gt;Unfortunately there&amp;rsquo;s no inbuilt way to determine the sort order of these tabs without overriding the &lt;code&gt;details.phtml&lt;/code&gt; template. This is a &lt;a href=&#34;https://github.com/magento/magento2/issues/4154&#34; target=&#34;_blank&#34;&gt;known problem&lt;/a&gt;, but you can choose &lt;a href=&#34;http://magento.stackexchange.com/questions/110796/change-order-of-tabs-on-product-page&#34; target=&#34;_blank&#34;&gt;one of the solutions om StackOverflow&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Supee-8788 Supee-1533 Conflict Fixed</title>
      <link>https://edmondscommerce.github.io/magento-supee-8788-supee-1533-conflict-fixed/</link>
      <pubDate>Thu, 13 Oct 2016 10:19:52 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-supee-8788-supee-1533-conflict-fixed/</guid>
      <description>

&lt;p&gt;TL;DR Run the script at the bottom.&lt;/p&gt;

&lt;h1 id=&#34;the-issue&#34;&gt;The Issue&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;ve previously applied the SUPEE-1533 patch to your Magento site, then when you
try to apply the SUPEE-8788 patch you&amp;rsquo;ll see the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;checking file app/code/core/Mage/Adminhtml/controllers/DashboardController.php
Hunk #1 FAILED at 91.
1 out of 1 hunk FAILED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is caused by the fact that the SUPEE-8788 patch seems to have been taken against an
un-patched version of Magento. This can be seen from the following:&lt;/p&gt;

&lt;p&gt;The SUPEE-8788 patch contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@@ -91,7 +91,7 @@ class Mage_Adminhtml_DashboardController extends Mage_Adminhtml_Controller_Actio
         if ($gaData &amp;amp;&amp;amp; $gaHash) {
             $newHash = Mage::helper(&#39;adminhtml/dashboard_data&#39;)-&amp;gt;getChartDataHash($gaData);
-            if ($newHash == $gaHash) {
+            if (hash_equals($newHash, $gaHash)) {
                 if ($params = unserialize(base64_decode(urldecode($gaData)))) {
                     $response = $httpClient-&amp;gt;setUri(Mage_Adminhtml_Block_Dashboard_Graph::API_URL)
                             -&amp;gt;setParameterGet($params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important line here is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                 if ($params = unserialize(base64_decode(urldecode($gaData)))) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is supposed to match up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if ($gaData &amp;amp;&amp;amp; $gaHash) {
            $newHash = Mage::helper(&#39;adminhtml/dashboard_data&#39;)-&amp;gt;getChartDataHash($gaData);
            if ($newHash == $gaHash) {
                $params = json_decode(base64_decode(urldecode($gaData)), true);
                if ($params) {
                    $response = $httpClient-&amp;gt;setUri(Mage_Adminhtml_Block_Dashboard_Graph::API_URL)
                            -&amp;gt;setParameterGet($params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important lines here are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                $params = json_decode(base64_decode(urldecode($gaData)), true);
                if ($params) {

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now they don&amp;rsquo;t match because of the change made in SUPEE-1533:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         if ($gaData &amp;amp;&amp;amp; $gaHash) {
             $newHash = Mage::helper(&#39;adminhtml/dashboard_data&#39;)-&amp;gt;getChartDataHash($gaData);
             if ($newHash == $gaHash) {
-                if ($params = unserialize(base64_decode(urldecode($gaData)))) {
+                $params = json_decode(base64_decode(urldecode($gaData)), true);
+                if ($params) {
                     $response = $httpClient-&amp;gt;setUri(Mage_Adminhtml_Block_Dashboard_Graph::API_URL)
                             -&amp;gt;setParameterGet($params)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-fix&#34;&gt;The Fix&lt;/h1&gt;

&lt;p&gt;In order to apply SUPEE-8788 we need to temporarily revert the changes made to
&lt;code&gt;DashboardController.php&lt;/code&gt; by SUPEE-1533. We can then apply the patch and restore
the SUPEE-1533 changes.&lt;/p&gt;

&lt;p&gt;[NOTE: It&amp;rsquo;s really important you restore the SUPEE-1533 changes as the use of
json_encode here protects against the &lt;a href=&#34;https://magento.com/security-patch&#34; target=&#34;_blank&#34;&gt;Shoplift Bug&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;To install the patch copy the following script into a .sh file in the root of your
Magento install (along with the SUPEE-8788 patch) and run the script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;dashboard_controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;app/code/core/Mage/Adminhtml/controllers/DashboardController.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Remove &amp;#39;if ($params) {&amp;#39;&lt;/span&gt;
sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;96d&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$dashboard_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Replace json_encode line with serialize line&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;json_encode_line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$params = json_decode(base64_decode(urldecode($gaData)), true);&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;serialize_line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;if ($params = unserialize(base64_decode(urldecode($gaData)))) {&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
sed -i -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$json_encode_line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$serialize_line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$dashboard_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# This now puts the code in the state expected by the patch&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Apply SUPEE-8788 patch&lt;/span&gt;
sh PATCH_SUPEE-8788_CE_1.8.1.0_v1-2016-10-11-06-54-44.sh

&lt;span class=&#34;c1&#34;&gt;# Add back &amp;#39;if ($params) {&amp;#39;&lt;/span&gt;
sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;96i\                if ($params) {&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$dashboard_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Add back json_encode line&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;serialize_line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;if ($params = unserialize(base64_decode(urldecode($gaData)))) {&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;json_encode_line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$params = json_decode(base64_decode(urldecode($gaData)), true);&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
sed -i -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;s/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$serialize_line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$json_encode_line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$dashboard_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;handy-links&#34;&gt;Handy Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magento.stackexchange.com/questions/140550/security-patch-supee-8788-possible-problems&#34; target=&#34;_blank&#34;&gt;SUPEE-8788 Stackoverflow thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magento.com/security/patches/supee-8788&#34; target=&#34;_blank&#34;&gt;Official SUPEE-8788 page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Highlighting Empty Hrefs in Links Using Css</title>
      <link>https://edmondscommerce.github.io/highlighting-empty-hrefs-in-links-using-css/</link>
      <pubDate>Wed, 05 Oct 2016 17:23:16 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/highlighting-empty-hrefs-in-links-using-css/</guid>
      <description>&lt;p&gt;While developing a site, you often put a pile of placeholder links in with a plain &lt;code&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;&lt;/code&gt;. These can sometimes sneak through because they&amp;rsquo;re so easily forgotten about.&lt;/p&gt;

&lt;p&gt;A simple CSS block will automatically highlight these for you, so you don&amp;rsquo;t forget:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a[href=&#39;&#39;]:after {
  content:&#39;!&#39;;
  background:red;
  color:#FFFFFF;
  padding-left:3px;
  padding-right:3px;
  opacity:0.3;
  white-space: nowrap;
}
a[href=&#39;&#39;]:hover:after {
  content:&#39;empty link&#39;;
  opacity:1.0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can adjust the selector if you use &lt;code&gt;href=&amp;quot;#&amp;quot;&lt;/code&gt; instead of blank ones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find All Email Addresses in a Folder (eg Codebase)</title>
      <link>https://edmondscommerce.github.io/find-all-email-addresses-in-a-folder-eg-codebase/</link>
      <pubDate>Tue, 04 Oct 2016 16:12:06 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/find-all-email-addresses-in-a-folder-eg-codebase/</guid>
      <description>&lt;p&gt;Here is a nice little one liner to search recursively in a directory and then pull out all email addresses that it finds&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep -shoPR &#39;[a-zA-Z_]+?@domain.co.uk&#39; * | sort -u

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will quickly find all email addresses and hten give you a sorted unique list&lt;/p&gt;

&lt;p&gt;Handy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento Smtppro Gmail Issue Solution</title>
      <link>https://edmondscommerce.github.io/magento-smtppro-gmail-issue-solution/</link>
      <pubDate>Tue, 04 Oct 2016 14:52:11 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-smtppro-gmail-issue-solution/</guid>
      <description>&lt;p&gt;If you Magento site has stopped sending emails via SMTP Pro then you will want to have a look in your exception log - &lt;code&gt;var/log/exception.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see messages in there along the lines of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016-10-04T14:27:52+00:00 ERR (3): 
exception &#39;Zend_Mail_Protocol_Exception&#39; with message &#39;5.7.14 &amp;lt;https://accounts.google.com/signin/continue?AKgnsbu-
 5.7.14 Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123
 5.7.14 Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123
 5.7.14 Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123Abc123
 5.7.14 Abc123Abc123Abc123&amp;gt; Please log in via your web browser and
 5.7.14 then try again.
 5.7.14  Learn more at
 5.7.14  https://support.google.com/mail/answer/78754 103sm1699291ioi.29 - gsmtp
&#39; in /var/www/vhosts/www.domain.com/public/lib/Zend/Mail/Protocol/Abstract.php:431
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the solution is to log into the gmail web interface, but via your server&amp;rsquo;s IP address.&lt;/p&gt;

&lt;p&gt;Not really the easiest thing to do, and there are a few ways of approaching this. The one that worked for me was to install Squid and use this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum -y install squid

sudo echo &amp;quot;
acl ec src 194.12.9.18
http_access allow ec
&amp;quot; &amp;gt;&amp;gt; /etc/squid/squid.conf

sudo systemctl start squid

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;note you might need to open up firewall ports as well&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once that is running then you can connect to your squid proxy using a local browser.&lt;/p&gt;

&lt;p&gt;Using firefox, you need to go to preferences / advanced / network and the proxy&lt;/p&gt;

&lt;p&gt;Set up your server IP as the proxy IP, set the port to &lt;code&gt;3128&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should now be able to browse the web via firefox and the requests are routed via your server.&lt;/p&gt;

&lt;p&gt;You can check this by searching google for &lt;code&gt;ip&lt;/code&gt; and you should get your servers IP address.&lt;/p&gt;

&lt;p&gt;Once you have this working, simply sign into gmail itself and then the issue should be sorted.&lt;/p&gt;

&lt;p&gt;Once it is working, then make sure you remember to close down squid and close down any firewall ports you opended&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo systemctl stop squid

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adding new less imports in Magento 2 in Development mode</title>
      <link>https://edmondscommerce.github.io/adding-new-less-imports-in-magento-2-in-development-mode/</link>
      <pubDate>Mon, 03 Oct 2016 18:54:20 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/adding-new-less-imports-in-magento-2-in-development-mode/</guid>
      <description>&lt;p&gt;Importing a new less file when extending a Magento theme needs a few steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the new file in your theme (in the &lt;code&gt;app/design/frontend/&amp;lt;vendor&amp;gt;/&amp;lt;theme&amp;gt;/web/css/source/&lt;/code&gt; folder)&lt;/li&gt;
&lt;li&gt;Add an import directive for that file in your normal &lt;code&gt;_extend.less&lt;/code&gt; file with &lt;code&gt;//@magento_import &#39;_newfile.less&#39;;&lt;/code&gt; (yes, with the &lt;code&gt;//&lt;/code&gt; - &lt;a href=&#34;http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/css-topics/css-preprocess.html#fedg_css-magento-import&#34; target=&#34;_blank&#34;&gt;see here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;development&lt;/strong&gt; mode, build the files using the &lt;code&gt;grunt exec&lt;/code&gt; command†. This creates symlinks in your &lt;code&gt;pub/static/frontend/&amp;lt;vendor&amp;gt;/&amp;lt;theme&amp;gt;/&amp;lt;locale&amp;gt;/css/source/&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;production&lt;/strong&gt; mode, build the files using the &lt;code&gt;bin/magento setup:source-theme:deploy&lt;/code&gt; command. This copies the less files into the &lt;code&gt;pub/static/frontend/&amp;lt;vendor&amp;gt;/&amp;lt;theme&amp;gt;/&amp;lt;locale&amp;gt;/css/source/&lt;/code&gt; folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That should be it.&lt;/p&gt;

&lt;p&gt;† - I&amp;rsquo;m pretty sure the &lt;code&gt;bin/magento dev:source-theme:deploy&lt;/code&gt; command should cover this, but for some reason it didn&amp;rsquo;t work for me&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Mysql Dump to Create Fixtures with Where Conditions</title>
      <link>https://edmondscommerce.github.io/using-mysql-dump-to-create-fixtures-with-where-conditions/</link>
      <pubDate>Thu, 29 Sep 2016 11:04:50 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/using-mysql-dump-to-create-fixtures-with-where-conditions/</guid>
      <description>&lt;p&gt;When running unit tests it is generally advisable to have a test database that has a limited but known set of data.&lt;/p&gt;

&lt;p&gt;The idea is that before each test run, the test database is recreated. So that this process is not too slow we then tend to use a small subset of the real live database - perhaps 100 records or entities rather than however many are on the live site.&lt;/p&gt;

&lt;p&gt;In order to build this test database, we then use something call fixtures. This can be all kinds of things - some times the fixtures are created using PHP code. For absolute speed though, I prefer to use fixtures that are raw SQL files that can be very quickly loaded into a database.&lt;/p&gt;

&lt;p&gt;To create the fixtures, the very simplest way is to use &lt;code&gt;mysqldump&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, the issue with mysql dump in the way we normally use it is that it will dump an entire database - the opposite of what we are trying to achieve here.&lt;/p&gt;

&lt;p&gt;The trick here is to use the &lt;code&gt;--where&lt;/code&gt; option to mysqldump to limit the data that is actually dumped.&lt;/p&gt;

&lt;p&gt;Lets take a simple database with an &lt;code&gt;orders&lt;/code&gt;, &lt;code&gt;orders_products&lt;/code&gt; and an &lt;code&gt;orders_status_history table&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;First we will dump the orders into an SQL file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump database_name  orders --where=&amp;quot;1 order by orders_id desc limit 0,100&amp;quot; --no-create-info &amp;gt; /tmp/orders.sql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to calculate what the lowest order ID would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lowestOrderId=$(mysql -N database_name -e &amp;quot;select min(t.orders_id) from (select orders_id from orders order by orders_id DESC limit 0,100) as t&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can run mysqldump on the other tables and dump their data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump database_name  orders_products --where=&amp;quot;orders_id &amp;gt; $lowestOrderId&amp;quot; --no-create-info &amp;gt;&amp;gt; /tmp/orders.sql


mysqldump database_name  orders_status_history --where=&amp;quot;orders_id &amp;gt; $lowestOrderId&amp;quot; --no-create-info &amp;gt;&amp;gt; /tmp/orders.sql

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And thats it, you now have an orders.sql file with the data for your 100 most recent orders in a format that can easily be imported into a test database simple with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
mysql test_db_name &amp;lt; orders.sql

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Google Apps Review blocked sign-in attempt problem and solution</title>
      <link>https://edmondscommerce.github.io/google-apps-review-blocked-sign-in-attempt-problem-and-solution/</link>
      <pubDate>Wed, 21 Sep 2016 16:39:24 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/google-apps-review-blocked-sign-in-attempt-problem-and-solution/</guid>
      <description>&lt;p&gt;When using SMTP Pro&amp;rsquo;s Self Test function against our development Google Apps inbox, I noticed it repeatedly blocked outgoing emails, with the slightly cryptic error &amp;ldquo;5.7.14 Please log in via your web browser and 5.7.14 then try again&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I logged into the inbox to find an email with the subject &amp;ldquo;Review blocked sign-in attempt&amp;rdquo; telling me I was using &amp;ldquo;an app that doesn&amp;rsquo;t meet modern security standards&amp;rdquo;. I&amp;rsquo;m not sure what these modern security standards are (&lt;a href=&#34;https://support.google.com/accounts/answer/6010255&#34; target=&#34;_blank&#34;&gt;it talks about them here&lt;/a&gt;) but lo and behold all of Google&amp;rsquo;s apps are apparently compliant.&lt;/p&gt;

&lt;p&gt;To allow these &amp;lsquo;less secure&amp;rsquo; ones through you can click &amp;ldquo;REVIEW YOUR DEVICES NOW&amp;rdquo; in the email, click the back arrow in the title bar to go to the &lt;a href=&#34;https://myaccount.google.com/u/2/security&#34; target=&#34;_blank&#34;&gt;Sign-in and Security page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scroll to the bottom and set &amp;ldquo;Allow less secure apps&amp;rdquo; to &amp;ldquo;ON&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;It might be worth disabling this when you&amp;rsquo;re done testing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magento 2 - Creating a New Blank Template Block</title>
      <link>https://edmondscommerce.github.io/magento-2---creating-a-new-blank-template-block/</link>
      <pubDate>Mon, 19 Sep 2016 14:52:10 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/magento-2---creating-a-new-blank-template-block/</guid>
      <description>&lt;p&gt;If you want to insert some custom HTML into a page in Magento 2, you&amp;rsquo;ll need to add some layout XML and a template file.&lt;/p&gt;

&lt;p&gt;The equivalent in Magento 1 is a &lt;code&gt;&amp;lt;block type=&amp;quot;core/template&amp;quot; template=&amp;quot;path/to/template.phtml&amp;quot; name=&amp;quot;block_name&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In Magento 2 you achieve this by adding a &lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt; in your &lt;code&gt;default.xml&lt;/code&gt; (or other layout file) with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;referenceContainer name=&amp;quot;container_name&amp;quot;&amp;gt; &amp;lt;!-- the name of the container you want to insert into --&amp;gt;
    &amp;lt;container name=&amp;quot;new_container&amp;quot; htmlClass=&amp;quot;container_css_class&amp;quot; htmlTag=&amp;quot;div&amp;quot;&amp;gt;
        &amp;lt;block class=&amp;quot;Magento\Framework\View\Element\Template&amp;quot; template=&amp;quot;Magento_Theme::path/to/template.phtml&amp;quot; name=&amp;quot;block_name&amp;quot; /&amp;gt;
    &amp;lt;/container&amp;gt;
&amp;lt;/referenceContainer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a template in &lt;code&gt;app/design/frontend/&amp;lt;your_vendor&amp;gt;/&amp;lt;your_theme&amp;gt;/Magento_Theme/path/to/template.phtml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remember to flush all caches.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Php Cli Progress Bar</title>
      <link>https://edmondscommerce.github.io/php-cli-progress-bar/</link>
      <pubDate>Fri, 16 Sep 2016 10:37:59 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php-cli-progress-bar/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing a lot of data manipulation on the command line recently, and one of bugbears that I ran into was that my commands gave no indication of how long they were going to take to complete.&lt;/p&gt;

&lt;p&gt;Sick and tired of just looking at the blank screen I put together a small progress bar class that can be used indicate how many items have been processed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ProgressBar 
{

    protected $_spinners = [&#39;|&#39;, &#39;/&#39;, &#39;-&#39;, &#39;\\&#39;, &#39;|&#39;, &#39;/&#39;, &#39;-&#39;, &#39;\\&#39;];

    /**
     * This is used to echo the progress of a task on the command line.
     * Pass in the current row that you are on and the number of rows that need to be processed and this will echo out
     * a progress bar like this
     *
     * Progress: [-----------------\                                           ]
     *
     * It is possible to change the width of the bar by passing in an int as the $steps param, otherwise this default
     * to 60
     *
     * Once the process is complete pass in the $last param as true to finish the the process bar
     *
     * @param      $totalDone - The number of rows that have been processed so far
     * @param      $total     - The total number of rows to be processed
     * @param bool $last      - If the process has been completed
     * @param bool $steps     - How wide the process bar should be
     */
    public function echoProgress($totalDone, $total, $last = false, $steps = false)
    {
        if (PHP_SAPI != &#39;cli&#39;) {
            return;
        }
        $steps = ($steps == false) ? 60 : $steps;
        if ($last === true) {
            $display = &amp;quot;Progress: [&amp;quot; . str_repeat(&#39;-&#39;, $steps + 1) . &amp;quot;]\r&amp;quot;;
        } else {
            $toGo        = floor((1 - ($totalDone / $total)) * $steps);
            $progressBar = str_repeat(&#39;-&#39;, $steps - $toGo);
            $emptySpace  = str_repeat(&#39; &#39;, $toGo);
            $index       = $totalDone % 8;
            $display     = &amp;quot;Progress: [&amp;quot; . $progressBar . $this-&amp;gt;_spinners[$index] . $emptySpace . &amp;quot;]\r&amp;quot;;
        }
        // @codingStandardsIgnoreStart - There&#39;s nothing wrong with using echo on the CLI
        echo $display;
        // @codingStandardsIgnoreEnd
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can then be used like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$totalDone = 0;
$rowsToProcess = $this-&amp;gt;getRowsToProcess();
$numberOfRowsToProcess = count($rowsToProcess);
$processBar = new ProcessBar();
foreach ($rowsToProcess as $row) {
    $this-&amp;gt;processRow($row);
    $processBar-&amp;gt;echoProgress(++$totalDone, $numberOfRowsToProcess);
}
$processBar-&amp;gt;echoProgress(++$totalDone, $numberOfRowsToProcess, true);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will give the following output when run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ross@ross:~/localhost/tests $ php importData.php
starting the import of EdmondsCommerce\ProductImport\Model\OptionValues
starting the import of EdmondsCommerce\ProductImport\Model\Products
starting the import of EdmondsCommerce\ProductImport\Model\Combinations
Progress: [-----------------\                                           ]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>&#39;command failed: tar&#39; when running &#39;npm install phantomjs&#39;</title>
      <link>https://edmondscommerce.github.io/command-failed-tar-when-running-npm-install-phantomjs/</link>
      <pubDate>Thu, 15 Sep 2016 17:29:23 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/command-failed-tar-when-running-npm-install-phantomjs/</guid>
      <description>&lt;p&gt;As part of installing phantomjs when buoilding a development environment for Magento 2 I encountered a problem where it failed to install. The error presented to me was&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Error: Command failed: tar jxf /usr/lib/node_modules/phantomjs/phantomjs/phantomjs-{version}.tar.bz2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I was able to run &lt;code&gt;tar&lt;/code&gt;, and &lt;code&gt;tar&lt;/code&gt; was in my &lt;code&gt;$PATH&lt;/code&gt;, so I was confused about the problem.&lt;/p&gt;

&lt;p&gt;Turns out because the file was a bzip one, it was trying to execute &lt;code&gt;bzip2&lt;/code&gt; within &lt;code&gt;tar&lt;/code&gt;, hence why it seemed like &lt;code&gt;tar&lt;/code&gt; was failing.&lt;/p&gt;

&lt;p&gt;Simple answer: &lt;code&gt;yum/dnf/apt-get install bzip2&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>