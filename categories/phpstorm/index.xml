<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phpstorm on Edmonds Commerce Dev Blog</title>
    <link>http://edmondscommerce.github.io/categories/phpstorm/</link>
    <description>Recent content in Phpstorm on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jun 2015 09:53:52 +0000</lastBuildDate>
    <atom:link href="http://edmondscommerce.github.io/categories/phpstorm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adding Code Sniffer with Magento Standards to PHP Storm</title>
      <link>http://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</link>
      <pubDate>Wed, 24 Jun 2015 09:53:52 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/adding-code-sniffer-with-magento-standards-to-php-storm.html</guid>
      <description>&lt;p&gt;Keeping inline with the Magento coding standards is always good practice when working but it can often be hard to
stay on top of it, this is where PHP Code Sniffer comes in.&lt;/p&gt;

&lt;p&gt;Lets get setup, install PHP Code sniffer if you haven&amp;rsquo;t already
    yum install php-pear-PHP-CodeSniffer.noarch&lt;/p&gt;

&lt;p&gt;Next, a sanity check that every thing is working
    phpcs -v
    #Output
    #Registering sniffs in the PEAR standard&amp;hellip; DONE (27 sniffs registered)
    #Creating file list&amp;hellip; DONE (0 files in queue)&lt;/p&gt;

&lt;p&gt;Now we are ready to go and get our Magento coding standards to use sniffer with, we&amp;rsquo;ll use composer for this
    composer global require &amp;ldquo;magento-ecg/coding-standard&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Installing the package globally is my preferred way of working, the rule set will be used with all my Magento projects
and if I need to update them I only need to update the global composer repository with one command rather than updating
for every single project.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to tell PHP Storm where to find our sniffer file.
In PHP Storm go to &lt;code&gt;settings-&amp;gt;Languages &amp;amp; Frameworks-&amp;gt;PHP-&amp;gt;Code Sniffer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Under the configuration select menu choose local hit the more (elipsis &amp;hellip;) button then choose to browse to your phpcs
path and browse to your installed sniffer file, in my case the file was located in &lt;code&gt;/bin/phpcs&lt;/code&gt;.
With this done, hit the validate button and you should see green.&lt;/p&gt;

&lt;p&gt;Back on the main settings menu, navigate to &lt;code&gt;editor-&amp;gt;inspections-&amp;gt;PHP&lt;/code&gt; and enable the Code Sniffer checkbox if it isn&amp;rsquo;t
already. Choose &lt;code&gt;custom&lt;/code&gt; as the coding standard and hit the ellipsis (&amp;hellip;) button to browse to your intended rule set.&lt;/p&gt;

&lt;p&gt;In our case, we installed the Magento rule set earlier to our global composer repository which is located in the
home directory. &lt;code&gt;/home/&amp;lt;USER&amp;gt;/.composer/vendor/magento-ecg/coding-standard/Ecg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re all set to go, in PHP Storm you can now choose to inspect code in various places such as individual files,
the entire project or individual directories. I prefer to stick to the directories that I can currently working with
such as the module within the namespace.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compare Text Chunks Quickly in PHPStorm</title>
      <link>http://edmondscommerce.github.io/phpstorm/compare-text-chunks-quickly-in-phpstorm.html</link>
      <pubDate>Wed, 26 Mar 2014 11:34:50 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/compare-text-chunks-quickly-in-phpstorm.html</guid>
      <description>&lt;p&gt;Some times you just need to compare a few lines from one file to a few lines from somewhere else. Full blown file diffing will give you all kinds of false positive information, actually you just want to compare a few lines.&lt;/p&gt;

&lt;p&gt;I had a look around and couldn&amp;rsquo;t see an obvious way to do it but then I saw the &amp;ldquo;Compare with Clipboard&amp;rdquo; option in the right click menu.&lt;/p&gt;

&lt;p&gt;To use this is really easy and super handy.&lt;/p&gt;

&lt;p&gt;First of all, highlight one of the chunks of text and get it into your clipboard &lt;code&gt;[ctrl]+[c]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now highlight your second chunk of text and simply select the &amp;ldquo;Compare with Clipboard&amp;rdquo; option.&lt;/p&gt;

&lt;p&gt;You will now get a standard PHPStorm diff viewer allowing you to compare the text chunks side by side.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrapping a List in Quotes in PHPStorm</title>
      <link>http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html</link>
      <pubDate>Fri, 06 Dec 2013 11:35:58 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/wrapping-a-list-in-quotes-in-phpstorm.html</guid>
      <description>&lt;p&gt;Some times you might find your self with a list of values you want to copy and paste from somewhere into your PHP code as an array of strings.&lt;/p&gt;

&lt;p&gt;For example, take this list of carrier names that I need to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Blue Package, USPS, UPS, UPSMI, FedEx, DHL, DHL Global Mail, Fastway, UPS Mail Innovations, Lasership, Royal Mail, FedEx SmartPost, OSM, OnTrac, Streamlite, Newgistics, Canada Post, City Link, GLS, GO!, Hermes Logistik Gruppe, Parcelforce, TNT, Target, SagawaExpress, NipponExpress, YamatoTransport, Other
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I really don&amp;rsquo;t fancy wrapping each element of this list with quotes one by one, there must be a better way!&lt;/p&gt;

&lt;p&gt;There is, you can use the regex replace functionality of PHPStorm to do this for you quickly and easily.&lt;/p&gt;

&lt;p&gt;First of all paste the string into your PHPStorm editor and highlight it. Then hit &lt;code&gt;[ctrl]+[r]&lt;/code&gt; to start your find and replace.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;In Selection&amp;rdquo; tick box should be ticked already, you also need to tick the regex box.&lt;/p&gt;

&lt;p&gt;Then in the find section, use this regex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;( |)([^,]+),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in your replace box, put this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\n&#39;$2&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets you nearly all the way there, you might just need to tidy up a bit you should now have something looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;Blue Package&#39;,
&#39;USPS&#39;,
&#39;UPS&#39;,
&#39;UPSMI&#39;,
&#39;FedEx&#39;,
&#39;DHL&#39;,
&#39;DHL Global Mail&#39;,
&#39;Fastway&#39;,
&#39;UPS Mail Innovations&#39;,
&#39;Lasership&#39;,
&#39;Royal Mail&#39;,
&#39;FedEx SmartPost&#39;,
&#39;OSM&#39;,
&#39;OnTrac&#39;,
&#39;Streamlite&#39;,
&#39;Newgistics&#39;,
&#39;Canada Post&#39;,
&#39;City Link&#39;,
&#39;GLS&#39;,
&#39;GO!&#39;,
&#39;Hermes Logistik Gruppe&#39;,
&#39;Parcelforce&#39;,
&#39;TNT&#39;,
&#39;Target&#39;,
&#39;SagawaExpress&#39;,
&#39;NipponExpress&#39;,
&#39;YamatoTransport&#39;, Other
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Other&lt;/code&gt; on the end has not been converted has it doesn&amp;rsquo;t have a trailing comma. You could mess about with yoru regex trying to get this to also be converted, or you could say good enough and move on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby Syntax Highlighting with PHPStorm</title>
      <link>http://edmondscommerce.github.io/phpstorm/ruby/ruby-syntax-highlighting-with-phpstorm.html</link>
      <pubDate>Thu, 28 Nov 2013 10:30:12 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/ruby/ruby-syntax-highlighting-with-phpstorm.html</guid>
      <description>&lt;p&gt;PHPStorm is my IDE of choice for PHP development of course and also as many other languages as I can get it to support. One of my favourite plugins for PHPStorm is BASH Support which makes it into a fully featured BASH IDE with function support and syntax highlighting and some code inspections.&lt;/p&gt;

&lt;p&gt;As we are now moving to Octopress for blogging functionality I wanted a way to get Ruby syntax highlighting. There is a full blown IntelliJ based Ruby IDE but that is overkill for my needs. I had a look at Netbeans however it has now stopped supporting Ruby though there is a community supported plugin apparently.&lt;/p&gt;

&lt;p&gt;My best IDE solution so far is simply Vim, perhaps the &lt;a href=&#34;http://vim.spf13.com/&#34; target=&#34;_blank&#34;&gt;spf13 flavour&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After a bit of Googling good old Stack Overflow came through for me with &lt;a href=&#34;http://stackoverflow.com/questions/16451359/is-it-possible-to-get-ruby-syntax-highlighting-in-phpstorm&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; that explains how to leverage PHPStorm&amp;rsquo;s TextMate bundle support to get Ruby syntax highlighting. This works a treat though on my colour scheme (a slightly modified Darcula) it was unreadable. The final thing to do is to change the settings under Settings &amp;gt; TextMate Bundles and in the grid at the bottom next to my theme I switched the TextMate colour scheme from Mac Classic to RailsCasts and now it looks good.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Magicento has a super quick way to enable Template Path Hints in Magento</title>
      <link>http://edmondscommerce.github.io/phpstorm/magicento/magicento-has-a-super-quick-way-to-enable-template-path-hints-in-magento.html</link>
      <pubDate>Fri, 17 May 2013 13:58:20 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/magicento/magicento-has-a-super-quick-way-to-enable-template-path-hints-in-magento.html</guid>
      <description>&lt;p&gt;Magento&amp;rsquo;s Template Path Hints feature can be super handy for working out which templates are in use, but &lt;em&gt;logging into the Admin, navigating to System, Configuration, Developer, Debug, Change Store Scope, Change to Yes, Press Save, Reload&lt;/em&gt; is an arduous process. So much so that often it&amp;rsquo;s easier to just suss it out from the folder structure.&lt;/p&gt;

&lt;p&gt;No more! Magicento has an entry in its menu to enable these at the click of a menu item.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://edmondscommerce.github.io/images/MagicentoMenu.png&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a couple of settings which need to be enabled (see below) but once set up, it works great.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://edmondscommerce.github.io/images/MagicentoSettings-600x317.png&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPStorm Regex Replace &#34;Malformed Replacement String&#34;</title>
      <link>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html</link>
      <pubDate>Thu, 24 Jan 2013 17:39:08 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/phpstorm-regex-replace-malformed-replacement-string.html</guid>
      <description>&lt;p&gt;If you are struggling using PHPStorm to find and replace code with Regex rules then this is your solution.&lt;/p&gt;

&lt;p&gt;The problem is that when using the $ sign in your replacement string it confuses it because PHP Storm uses the $ sign to represent sub pattern replacements.&lt;/p&gt;

&lt;p&gt;Take the following example code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$data = array();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$form=$page-&amp;gt;find(&amp;#39;form.edit_product&amp;#39;, 0);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//standard inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;text&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//radio inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;radio&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//checkbox inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;checkbox&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$input-&amp;gt;name]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//textareas&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$textareas = $form-&amp;gt;find(&amp;#39;textarea&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($textareas as $textarea){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$textarea-&amp;gt;name]=$textarea-&amp;gt;innertext;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And trying to replace the key being used in the data array with a processed one calling a method $this-&amp;gt;dataName($key) to generate the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$data = array();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$form=$page-&amp;gt;find(&amp;#39;form.edit_product&amp;#39;, 0);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//standard inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;text&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//radio inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;radio&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//checkbox inputs&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$inputs = $form-&amp;gt;find(&amp;#39;input[type=&amp;quot;checkbox&amp;quot;]&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($inputs as $input){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    if($input-&amp;gt;checked){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $data[$this-&amp;gt;dataName($input-&amp;gt;name)]=$input-&amp;gt;value;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//textareas&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$textareas = $form-&amp;gt;find(&amp;#39;textarea&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;foreach($textareas as $textarea){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $data[$this-&amp;gt;dataName($textarea-&amp;gt;name)]=$textarea-&amp;gt;innertext;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might try the find pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$data\[\$([^-]+)-&amp;gt;name\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the replace pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\$data\[\$this-&amp;gt;dataName(\$$1-&amp;gt;name)\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However this will give you the dreaded &lt;b&gt;&amp;ldquo;malformed replacement string&amp;rdquo;&lt;/b&gt; Error&lt;/p&gt;

&lt;p&gt;The solution is simply to triple escape your dollar signs, so the replacement pattern becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
\\\$data\[\\\$this-&amp;gt;dataName(\\\$$1-&amp;gt;name\)\]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works, woot!&lt;/p&gt;

&lt;p&gt;Also when it does work, PHP Storms replacement preview feature is really quite nice&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPStorm: Get More Info on Auto-Complete (like netbeans)</title>
      <link>http://edmondscommerce.github.io/phpstorm/phpstorm-get-more-info-on-auto-complete-like-netbeans.html</link>
      <pubDate>Thu, 13 Dec 2012 17:00:20 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/phpstorm-get-more-info-on-auto-complete-like-netbeans.html</guid>
      <description>&lt;p&gt;All developers love code completion, but sometimes the minimalist info that can come up in PHPStorm can be not quite enough.&lt;/p&gt;

&lt;p&gt;Netbeans gave an excerpt that gave plenty of information from the docblock, and PHPStorm can do too, it just defaults to off.&lt;/p&gt;

&lt;p&gt;The setting is under Editor-&amp;gt;Code Completion and is &amp;ldquo;Show full signatures&amp;rdquo;.  The good news is it is an &amp;ldquo;IDE Setting&amp;rdquo; so it persists for all projects, the bad news is that that means the setting will be forgotten about before you next reinstall and want it again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tip: PhpStorm &#34;Select in Projects&#34; - Easier version</title>
      <link>http://edmondscommerce.github.io/phpstorm/tip-phpstorm-select-in-projects-easier-version.html</link>
      <pubDate>Thu, 08 Nov 2012 18:26:28 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/tip-phpstorm-select-in-projects-easier-version.html</guid>
      <description>&lt;p&gt;Followers of this blog will remember the &lt;a title=&#34;Replicate Netbeans “Select in project” in phpstorm&#34; href=&#34;http://www.edmondscommerce.co.uk/phpstorm/replicate-netbeans-select-in-project-in-phpstorm/&#34;&gt;Replicate Netbeans “Select in project” in phpstorm&lt;/a&gt; post which gave a handy key combo to select the current file in the project window.&lt;/p&gt;

&lt;p&gt;It has been brought to our attention that there&amp;rsquo;s also a button to do this with the mouse in one click!  At the top of the Project window, there&amp;rsquo;s a cross-hair/target icon labelled a rather cryptic &amp;ldquo;Scroll from Source&amp;rdquo;.  Click that and it does what netbeans users will be looking for as &amp;ldquo;Select in Projects&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So there you have it, &amp;ldquo;Scroll from Source&amp;rdquo;, is the magic words that you want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPStorm 5 Released</title>
      <link>http://edmondscommerce.github.io/phpstorm/phpstorm-5-released.html</link>
      <pubDate>Thu, 13 Sep 2012 09:07:03 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/phpstorm-5-released.html</guid>
      <description>&lt;p&gt;At Edmonds Commerce we were staunch Netbeans users for years but we always struggled with large scale projects (&lt;a href=&#34;http://edmondscommerce.github.io/platforms/magento/&#34; title=&#34;Magento Platform Overview&#34;&gt;Magento&lt;/a&gt; I&amp;rsquo;m looking at you) meaning that Netbeans would sometimes really crawl as it tried to reindex thousands of PHP files.&lt;/p&gt;

&lt;p&gt;After a recent upgrade of our Linux desktop environment to the Mate edition of Linux Mint 13, Netbeans seemed to perform even worse and had a few bugs as well. At the same time we had been evaluating other IDE options including Eclipse and Zend Studio (which we all have free licences for thanks to being Zend Certified Developers).&lt;/p&gt;

&lt;p&gt;In the end though, the one we tried that really impressed was PHPStorm. It isn&amp;rsquo;t free open source but it isn&amp;rsquo;t too expensive, especially considering it is perhaps the single most important and highly used tool of a professional PHP developer.&lt;/p&gt;

&lt;p&gt;Now a new version has come out. Downloading and upgrading took all of 5 minutes and we are now going to enjoy better performance and some nice new features. I have yet to really test out the new version so I can&amp;rsquo;t really report on them but they look good. You can read about all the new features in version 5 &lt;a href=&#34;http://www.jetbrains.com/phpstorm/whatsnew/&#34; title=&#34;PHPStorm 5 Features&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Replicate Netbeans &#34;Select in project&#34; in phpstorm</title>
      <link>http://edmondscommerce.github.io/phpstorm/replicate-netbeans-select-in-project-in-phpstorm.html</link>
      <pubDate>Mon, 10 Sep 2012 14:41:36 +0000</pubDate>
      
      <guid>http://edmondscommerce.github.io/phpstorm/replicate-netbeans-select-in-project-in-phpstorm.html</guid>
      <description>&lt;p&gt;Netbeans has a handy feature when you right-click a file in the editor window to take you to the file in the project (file manager tab) view.&lt;/p&gt;

&lt;p&gt;To get phpstorm to do this is not as simple but is handily mappable to a shortcut key.&lt;/p&gt;

&lt;p&gt;To enable this, go to Settings-&amp;gt;Keymap-&amp;gt;Main menu-&amp;gt;Navigate-&amp;gt;Select in&amp;hellip; and choose a key.  I set it to Alt+P, so now I press Alt+P then press enter to go to the current file in the project view.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>