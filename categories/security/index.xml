<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/categories/security/</link>
    <description>Recent content in Security on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jul 2016 13:25:31 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/categories/security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CVE-2011-2461 - How to Patch Magento Adobe Flex Vulnerability</title>
      <link>https://edmondscommerce.github.io/cve-2011-2461---how-to-patch-magento-adobe-flex-vulnerability/</link>
      <pubDate>Tue, 26 Jul 2016 13:25:31 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/cve-2011-2461---how-to-patch-magento-adobe-flex-vulnerability/</guid>
      <description>

&lt;h1 id=&#34;cve-2011-2461&#34;&gt;CVE-2011-2461&lt;/h1&gt;

&lt;p&gt;For magento versions older than 1.9.1.0 you can patch this vulnerability by simply installing the patched .swf
files hosted on our GitHub repo
&lt;a href=&#34;https://github.com/edmondscommerce/CVE-2011-2461_Magento_Patch&#34; target=&#34;_blank&#34;&gt;CVE-2011-2461_Magento_Patch&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;more-info&#34;&gt;More Info&lt;/h1&gt;

&lt;p&gt;Find more information regarding the CVE here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://peterocallaghan.co.uk/2016/07/magento-csrf-vulnerability-via-adobe-flex/&#34; target=&#34;_blank&#34;&gt;Peter O&amp;rsquo;Callaghan - Magento CSRF vulnerability via Adobe Flex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mindedsecurity.com/2015/03/the-old-is-new-again-cve-2011-2461-is.html&#34; target=&#34;_blank&#34;&gt;Minded Security - The old is new, again. CVE-2011-2461 is back!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://helpx.adobe.com/flash-builder/kb/flex-security-issue-apsb11-25.html&#34; target=&#34;_blank&#34;&gt;Adobe - Flex Security Issue APSB11-25&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SSL testing and SHA-1 Sunsetting</title>
      <link>https://edmondscommerce.github.io/security/ssl-testing-and-sha-1-sunsetting.html</link>
      <pubDate>Wed, 12 Nov 2014 13:03:36 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/ssl-testing-and-sha-1-sunsetting.html</guid>
      <description>&lt;p&gt;Over last few days we been doing a bit of work on doing some audits for people and one of the things that has come up is ssl. For the purpose of checking the servers ssl implementation we have been using &lt;a href=&#34;https://www.ssllabs.com/ssltest/&#34; target=&#34;_blank&#34;&gt;Qualys SSL Labs&lt;/a&gt; which is a excelent tool.&lt;/p&gt;

&lt;p&gt;The checker checks for the ssl certificate and tells you if your server setup is vulnerable to attacks such as Poodle and OpenSSL CCS Injection. We will produce a blog post shortly on the best practise setup to prevent these attcks.&lt;/p&gt;

&lt;p&gt;For the moment SHA-1 as a certificate signature algorithm is getting depricated in &lt;a href=&#34;https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know&#34; target=&#34;_blank&#34;&gt;chrome&lt;/a&gt;. As the cost for collision attcks against SHA-1 will become more &lt;a href=&#34;https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html&#34; target=&#34;_blank&#34;&gt;affordable&lt;/a&gt; in the next few years.&lt;/p&gt;

&lt;p&gt;Goole have set the cut off for certificates after 2016 but we will be seeing some crosses on the padlock in chrom during the first quater of 2015.&lt;/p&gt;

&lt;p&gt;If your certificate expires in 2015 then you will not see any chrome. If your certificate expires in 2016 you will see some minor errors being reported in chrome. However if your certificate expires in 2017 then chrome will treat it as an insecure certificate in 2015.&lt;/p&gt;

&lt;p&gt;So our advice is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your certificate expires in 2015: When you come to renew make sure you get SHA-256 as the certificate signature&lt;/li&gt;
&lt;li&gt;If your certificate expires in 2016: Think about getting renewed during 2015 or earlier.&lt;/li&gt;
&lt;li&gt;If your certificate expires in 2017: Think about getting a new one issue as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>URGENT update BASH - big security issue</title>
      <link>https://edmondscommerce.github.io/security/urgent-update-bash-big-security-issue.html</link>
      <pubDate>Thu, 25 Sep 2014 15:18:14 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/urgent-update-bash-big-security-issue.html</guid>
      <description>

&lt;p&gt;Shell Shock is a BASH exploit that can allow the running of arbitrary commands on Linux servers.&lt;/p&gt;

&lt;p&gt;This is a newly discovered bug and affects a very large number of servers.&lt;/p&gt;

&lt;p&gt;There is a patch, you should ensure that your server&amp;rsquo;s BASH version is updated ASAP.&lt;/p&gt;

&lt;h3 id=&#34;centos-redhat-etc&#34;&gt;Centos, Redhat etc&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;yum clean all; yum -y update bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu-debian-etc&#34;&gt;Ubuntu, Debian etc&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;apt-get install --only-upgrade bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check if you are vulnerable, you can run this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env X=&amp;quot;() { :;} ; echo VULNERABLE&amp;quot; /bin/sh -c &amp;quot;echo completed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see VULNERABLE then you need to update BASH.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ebay Security Breach</title>
      <link>https://edmondscommerce.github.io/security/ebay-security-breach.html</link>
      <pubDate>Wed, 21 May 2014 20:34:06 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/ebay-security-breach.html</guid>
      <description>&lt;p&gt;It is being reported that there has been a database breach at eBay leading to the leaking of encrypted passwords&lt;/p&gt;

&lt;p&gt;Whilst there has not been any reported access to user accounts it is worth updating your password for eBay and any other site that share the same password&lt;/p&gt;

&lt;p&gt;It is considered bad practice to have the same password for multiple site, so to help me keep track of all of them I use &lt;a href=&#34;https://lastpass.com&#34; target=&#34;_blank&#34;&gt;lastpass&lt;/a&gt; to make the job simpler&lt;/p&gt;

&lt;p&gt;The full statement for ebay is available &lt;a href=&#34;http://www.ebayinc.com/in_the_news/story/ebay-inc-ask-ebay-users-change-passwords&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NHS Website Hosting Malware</title>
      <link>https://edmondscommerce.github.io/security/nhs-website-hosting-malware.html</link>
      <pubDate>Mon, 03 Feb 2014 10:39:41 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/nhs-website-hosting-malware.html</guid>
      <description>

&lt;p&gt;This morning I was made aware that certain pages of the NHS website - the UK&amp;rsquo;s National Health Service - were hosting malware that was automatically redirecting users to malicious pages. The story broke on the popular news site Reddit, you can see the actual reddit thread &lt;a href=&#34;http://www.reddit.com/r/unitedkingdom/comments/1wv91h/nhsuk_compromised_many_pages_are_serving_malware/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first and most important point is that if you ever find yourself unexpectedly redirected from a page to another page then you should definitely not agree to install any software suggsted by the redirected site. Your safest course of action is likely to close the tab or even your browser as soon as possible and then run a full virus scan after updating your virus software.&lt;/p&gt;

&lt;h3 id=&#34;here-is-some-information-on-this-particular-attack&#34;&gt;Here is some information on this particular attack&lt;/h3&gt;

&lt;p&gt;The list of URLs originally shown to be hosting this malware can be found &lt;a href=&#34;http://pastebin.com/DbvR0iyj&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The attack vector seems to be in a (possibly accidental) mis spelling of the domain name that is hosting some Javascript related to Google Translate.&lt;/p&gt;

&lt;h4 id=&#34;you-can-see-a-correct-chunk-of-html-here&#34;&gt;You can see a correct chunk of HTML here:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/includes/AC_RunActiveContent.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://translate.googleapis.com/translate_static/css/translateelement.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://translate.googleapis.com/translate_static/js/element/main.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/includes/translate.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;and-here-is-the-compromised-html&#34;&gt;And here is the compromised HTML&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;//translate.googleaspis.com/translate_static/js/element/19/element_main.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;//translate.googleaspis.com/translate_static/js/element/element.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/includes/translate.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The domain name googleaspis.com is registered by regtons.com and though the &lt;a href=&#34;http://www.whois.com/whois/googleaspis.com&#34; target=&#34;_blank&#34;&gt;Whois information&lt;/a&gt; has the actual domain ownership details obfuscated by a Czech company that protect the actual real ownership details, it does seem that the server and other &lt;a href=&#34;http://www.tcpiputils.com/browse/ip-address/31.170.179.179&#34; target=&#34;_blank&#34;&gt;internet services&lt;/a&gt; are all based in the Czech Republic.&lt;/p&gt;

&lt;p&gt;Checking the Google Safe Browsing information, you can see that Google have found &lt;a href=&#34;http://www.google.co.uk/safebrowsing/diagnostic?site=hmr.nhs.uk/&#34; target=&#34;_blank&#34;&gt;numerous issues&lt;/a&gt; on the NHS domains seemingly starting on the 31st of January this year.&lt;/p&gt;

&lt;p&gt;It seems that the NHS have now confirmed that they are aware of this issue and are currently taking action to resolve the problem.&lt;/p&gt;

&lt;p&gt;It is still not clear exactly how or why this issue cropped up in the first place. If it was an accident, how did it manage to get past what you would expect to be quite rigorous quality assurance processes? If this was a result of a malicious break in, how did they manage to compromise the website in this way and are there any further security issues that we should, as a nation, be worried about?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPG / PGP Public key</title>
      <link>https://edmondscommerce.github.io/security/gpg-pgp-public-key.html</link>
      <pubDate>Fri, 01 Feb 2013 12:59:09 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/gpg-pgp-public-key.html</guid>
      <description>&lt;p&gt;Sending confidential information across the Internet is always risky as you never really know who or what may intentionally or accidentally look at a copy of your communication at some points.&lt;/p&gt;

&lt;p&gt;Various tactics can be used to reduce the risk when sending confidential information. The current approach accepted by most people is the use of PGP or GPG. PGP and GPG are commercial and open source (respectively) implementations of asymmetric encryption system specifically designed to work with visible text communication.&lt;/p&gt;

&lt;p&gt;Asymmetric cryptography works by using a key pair. When some thing is encrypted using one of the keys only the other key can be used to decrypt the encrypted text. This allows you to give away your public key to any one and every one and know that any thing some one encrypts with it cannot be retrieved any one other than your self. It is currently technically infeasible, and has stood up to 10 years of scrutiny so far, to determine one of the keys of a pair when having one of them.&lt;/p&gt;

&lt;p&gt;The only real trouble after using this system is communicating the public key and knowing it has not been tampered with.&lt;/p&gt;

&lt;p&gt;If you need to send Edmonds Commerce any confidential information securely feel free to encrypt it with our public key:
&lt;code&gt;
&amp;mdash;&amp;ndash;BEGIN PGP PUBLIC KEY BLOCK&amp;mdash;&amp;ndash;
Version: GnuPG v1.4.11 (GNU/Linux)&lt;/p&gt;

&lt;p&gt;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
=ISyO
&amp;mdash;&amp;ndash;END PGP PUBLIC KEY BLOCK&amp;mdash;&amp;ndash;
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serious Skype Vulnerability Nov 2012</title>
      <link>https://edmondscommerce.github.io/security/serious-skype-vulnerability-nov-2012.html</link>
      <pubDate>Wed, 14 Nov 2012 12:54:10 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/serious-skype-vulnerability-nov-2012.html</guid>
      <description>&lt;p&gt;There is a current vulnerability with skype accounts where anyone who knows your email address can get access to your account, and even your private chat logs.&lt;/p&gt;

&lt;p&gt;According to Kaspersky Labs (a leading computer security firm), the leader of the Russian Opposition has had his private chat logs leaked via this method.&lt;/p&gt;

&lt;p&gt;This is a serious vulnerability and Microsoft (the current owners of skype) are looking into the issue.  At present there&amp;rsquo;s no way to avoid the compromise, perhaps think about clearing your logs if you have anything private in there.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a good article &lt;a title=&#34;The Register&#34; href=&#34;http://www.theregister.co.uk/2012/11/14/skype_disables_password_reset_bug/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; that explains in more detail.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Apps and Two Factor Authentication</title>
      <link>https://edmondscommerce.github.io/security/google-apps-and-two-factor-authentication.html</link>
      <pubDate>Wed, 07 Nov 2012 10:22:34 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/google-apps-and-two-factor-authentication.html</guid>
      <description>&lt;p&gt;If you are using Google apps and have two factor authentication turned on then you are probably using the convenient &amp;ldquo;Remember this PC for 30 days&amp;rdquo; feature.&lt;/p&gt;

&lt;p&gt;If you like your browser to forget every thing except a very select set of data (bookmarks, etc.) but keep the convenience of the 30 day authentication then you only need to keep the cookie called &amp;ldquo;SMSV&amp;rdquo; for the domain &amp;ldquo;www.google.com&amp;rdquo; with path &amp;ldquo;/a&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;There is a variety of ways you can keep this cookie. You could, for example, export it then import it when ever (and where ever) you need it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Got the Insecure Content on a Secure HTTPs Page Problem - Easy Solution</title>
      <link>https://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution.html</link>
      <pubDate>Thu, 12 Jan 2012 12:28:54 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/got-the-insecure-content-on-a-secure-https-page-problem-easy-solution.html</guid>
      <description>&lt;p&gt;Often you will see SSL warnings or errors related to insecure content being displayed on a secure page.&lt;/p&gt;

&lt;p&gt;This could be as simple as one javascript file or image that is being included via http rather than https, though some times this can be a bit tricky to track down.&lt;/p&gt;

&lt;p&gt;The easiest solution is to hit this site:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.whynopadlock.com/&#34;&gt;http://www.whynopadlock.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will give you a clear report of the problems and should help you quickly find and fix them.&lt;/p&gt;

&lt;p&gt;Alternatively if you use Chrome you may see the details in the Javascript console.&lt;/p&gt;

&lt;p&gt;Once you know what elements are being called by http as opposed to https, you simply need to make them use https or remove them altogether.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Checkout, 501 Error with Mod Security &#43; Solution</title>
      <link>https://edmondscommerce.github.io/security/google-checkout-501-error-with-mod-security-solution.html</link>
      <pubDate>Thu, 26 Mar 2009 10:48:57 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/google-checkout-501-error-with-mod-security-solution.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you are pulling your hair out trying to figure out why you are seeing a 501 error in your Google Checkout integration console I may well have the answer and solution for you.&lt;/p&gt;

&lt;p&gt;This is the error message you will see in the integration console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 	We encountered an error trying to access your server at https://domain.co.uk/googlecheckout/api/ -- the error we got is Sending failed with HTTP response code: 501. Response body was: &amp;lt;HTML&amp;gt; &amp;lt;HEAD&amp;gt; &amp;lt;TITLE&amp;gt;501 Not Implemented&amp;lt;/TITLE&amp;gt; &amp;lt;/HEAD&amp;gt; &amp;lt;BODY&amp;gt; &amp;lt;H1&amp;gt;Not Implemented&amp;lt;/H1&amp;gt; The page you are looking for cannot be displayed because a header value in the request does not match certain configuration settings on the Web server.&amp;lt;P&amp;gt; &amp;lt;HR&amp;gt; &amp;lt;ADDRESS&amp;gt; Web Server at domain.co.uk &amp;lt;/ADDRESS&amp;gt; &amp;lt;/BODY&amp;gt; &amp;lt;/HTML&amp;gt; &amp;lt;!-- - Unfortunately, Microsoft has added a clever new - &amp;quot;feature&amp;quot; to Internet Explorer. If the text of - an error&#39;s message is &amp;quot;too small&amp;quot;, specifically - less than 512 bytes, Internet Explorer returns - its own error message. You can turn that off, - but it&#39;s pretty tricky to find switch called - &amp;quot;smart error messages&amp;quot;. That means, of course, - that short error messages are censored by default. - IIS always returns error messages that are long - enough to make Internet Explorer happy. The - workaround is pretty simple: pad the error - message with a big comment like this to push it - over the five hundred and twelve bytes minimum. - Of course, that&#39;s exactly what you&#39;re reading - right now. --&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing to do is log into your server via SSH and examine the error logs.&lt;/p&gt;

&lt;p&gt;find the error logs, open the file up in vi using this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
vi error_log

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then go to the bottom of the file using the ```shift
 + [g] shortcut. Then to search backwards in the log use the following command:&lt;/p&gt;

&lt;p&gt;[code]
?ModSecurity&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;If you find something with this error message then you have mod security installed. If you search around you may well find an error message like this:&lt;/p&gt;

&lt;blockquote&gt;
[Thu Mar 26 10:22:11 2009] [error] [client 94.229.166.12] ModSecurity: Access denied with code 501 (phase 2). Match of &#34;rx (?:^(?:application\\/x-www-form-urlencoded(?:;(?:\\s?charset\\s?=\\s?[\\w\\d\\-]{1,18})?)??$|multipart/form-data;)|text/xml)&#34; against &#34;REQUEST_HEADERS:Content-Type&#34; required. [file &#34;/etc/httpd/modsecurity.d/modsecurity_crs_30_http_policy.conf&#34;] [line &#34;71&#34;] [id &#34;960010&#34;] [msg &#34;Request content type is not allowed by policy&#34;] [severity &#34;WARNING&#34;] [tag &#34;POLICY/ENCODING_NOT_ALLOWED&#34;] [hostname &#34;247electrical.co.uk&#34;] [uri &#34;/googlecheckout/api&#34;] [unique_id &#34;-UMIen8AAAEAAFsDLH4AAAAB&#34;]
&lt;/blockquote&gt;

&lt;p&gt;This error message tells us which particular rule is causing it to fail. What we need to do now is either edit this rule or disable it altogether. I will first try to edit it so that the request can get through, but the rule is still active. The rule we need to edit is in this rules file:&lt;/p&gt;

&lt;p&gt;modsecurity_crs_30_http_policy.conf&lt;/p&gt;

&lt;p&gt;and is on line 71.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m no mod security expert. Having had a quick look through the documentation I am not sure how to edit this rule to allow Google Checkout callbacks through. So for the time being I am going to disable this particular rule altogether by adding a  # in front of lines 70,71 and 72.&lt;/p&gt;

&lt;p&gt;If any mod security experts out there read this blog and know a better solution please do post it in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy Security for PHP Scripts</title>
      <link>https://edmondscommerce.github.io/php/security/easy-security-for-php-scripts.html</link>
      <pubDate>Fri, 19 Dec 2008 15:09:45 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/php/security/easy-security-for-php-scripts.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If you have a script, admin area or whatever that you would like to make a bit more secure, you can use the following chunk of code to do this. If you don&amp;rsquo;t have SSL (HTTPS) set up then you would need to get this sorted first.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t bullet proof protection, but it helps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;//IP addresses that you would like to be able to access the system&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$allowed_ips[] = &amp;#39;99.99.99.01&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$allowed_ips[] = &amp;#39;99.99.99.02&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$allowed_ips[] = &amp;#39;99.99.99.03&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if(!in_array($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;], $allowed_ips)){&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;	header(&amp;#39;HTTP/1.1 500 Internal Server Error&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;	exit();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Force SSL Usage&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if($_SERVER[&amp;#39;SERVER_PORT&amp;#39;] != 443){ //assuming your server is running SSL on port 443&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;	$url = &amp;quot;https://&amp;quot;.$_SERVER[&amp;#39;HTTP_HOST&amp;#39;].$_SERVER[&amp;#39;REQUEST_URI&amp;#39;];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;   	header(&amp;#39;Location: &amp;#39;.$url);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Secure and Insecure Contents in HTTPS</title>
      <link>https://edmondscommerce.github.io/security/secure-and-insecure-contents-in-https.html</link>
      <pubDate>Thu, 18 Dec 2008 15:16:55 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/secure-and-insecure-contents-in-https.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
If your web site&amp;rsquo;s secure HTTPS area includes any content such as images, javascript or whatever via standard HTTP, your visitors may well get a security warning popping up saying that the page contains secure and insecure content.&lt;/p&gt;

&lt;p&gt;For some of your sites visitors, this rather vague and worrying statement might make them decide to abandon your checkout procedure and cost you a sale.&lt;/p&gt;

&lt;p&gt;Often this is very easy to fix.&lt;/p&gt;

&lt;p&gt;Simply go to the page that is triggering the error message and &amp;ldquo;View Source&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Then in the source code, search for&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;src=&amp;quot;http://

or

src=http://
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that you have found the offending items, you either need to remove them from your secure pages, or ensure that they are using the https:// method when the pages are being viewed by HTTPS.&lt;/p&gt;

&lt;p&gt;that&amp;rsquo;s it - dead easy :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Securing a LAMP Server with mod_security</title>
      <link>https://edmondscommerce.github.io/security/securing-a-lamp-server-with-mod_security.html</link>
      <pubDate>Mon, 15 Sep 2008 13:09:44 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/security/securing-a-lamp-server-with-mod_security.html</guid>
      <description>&lt;p&gt;&lt;div class=&#34;oldpost&#34;&gt;&lt;h4&gt;This is post is now quite old and the the information it contains may be out of date or innacurate.&lt;/h4&gt;
&lt;p&gt;
If you find any errors or have any suggestions to update the information &lt;a href=&#34;http://edmondscommerce.github.io/contact-us/index.html&#34;&gt;please let us know&lt;/a&gt;
or &lt;a href=&#34;https://github.com/edmondscommerce/edmondscommerce.github.io&#34;&gt;create a pull request on GitHub&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
To get the highest possible level of server security and to protect yourself from things like XSS attacks, Edmonds Commerce highly recommend you get mod_security set up on your server.&lt;/p&gt;

&lt;p&gt;If you ask your hosts they should be able to do this for you.&lt;/p&gt;

&lt;p&gt;You can read all about mod_security &lt;a href=&#34;http://www.modsecurity.org/&#34;&gt;here&lt;/a&gt;. If you would like any help getting mod_security set up on your server then simply get in touch.&lt;/p&gt;

&lt;p&gt;One thing we always recommend doing to the standard mod_security configuration is to increase the maximum body size. This restriction by default limits the size of any web page to 500k.&lt;/p&gt;

&lt;p&gt;For front end pages, there should never be a time when you need to display a page bigger than this size, however for some administration side systems, it is necessary to create very big pages. This mod_security limit will prevent these pages from being viewable.&lt;/p&gt;

&lt;p&gt;To remedy this, you need to edit the file located in the modsecurity.d sub folder of your httpd folder (usually /etc/httpd/modsecurity.d/)&lt;/p&gt;

&lt;p&gt;In this folder there is a collection of files which handle all of the various security rules that detect potential security threats. There is also a file called modsecurity_crs_10_config.conf.&lt;/p&gt;

&lt;p&gt;Edit this file using vi and change the value for the SecResponseBodyLimit setting. We usually recommend upping this to 2mb from the standard .5mb. This means that the server is protected from doing really big things (for example a mysql dump) but is able to display really big admin side HTML pages.&lt;/p&gt;

&lt;p&gt;To set it to 2mb you need to change the value of SecResponseBodyLimit to 2097152&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>