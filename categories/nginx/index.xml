<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Edmonds Commerce Dev Blog</title>
    <link>https://edmondscommerce.github.io/categories/nginx/</link>
    <description>Recent content in Nginx on Edmonds Commerce Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Sep 2016 09:59:14 +0000</lastBuildDate>
    <atom:link href="https://edmondscommerce.github.io/categories/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Nginx Allow Ip Range</title>
      <link>https://edmondscommerce.github.io/nginx-allow-ip-range/</link>
      <pubDate>Tue, 13 Sep 2016 09:59:14 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/nginx-allow-ip-range/</guid>
      <description>&lt;p&gt;When specifying Nginx config, a common requirement is to control access to particular routes or even servers and use IP addresses as the method of restriction.&lt;/p&gt;

&lt;p&gt;Generally that&amp;rsquo;s quite simple, you can just &lt;code&gt;allow 123.123.123.123;&lt;/code&gt; for any IPs you want to allow and then conclude with &lt;code&gt;deny all;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However - what if you have quite a large range of IPs to block - do you need to do a separate allow for each line?&lt;/p&gt;

&lt;p&gt;The answer of course is no, there is a much more elegant solution, however it uses the rather opaque &lt;a href=&#34;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing&#34; target=&#34;_blank&#34;&gt;CIDR&lt;/a&gt; format for specifying the range.&lt;/p&gt;

&lt;p&gt;I could explain it to you but I&amp;rsquo;d be lying if I pretended I understand it. Instead, here is a link to a great little calculator in which you can specify the starting and ending IPs and it will give you the correct CIDR notation to paste in - yay!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ipaddressguide.com/cidr#range&#34; target=&#34;_blank&#34;&gt;http://www.ipaddressguide.com/cidr#range&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just paste in your starting and ending IPs (eg &lt;code&gt;123.123.123.100&lt;/code&gt; and &lt;code&gt;123.123.123.150&lt;/code&gt;) and press &lt;strong&gt;Calculate&lt;/strong&gt; and you will then get the CIDR version, in this instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;123.123.123.100/30
123.123.123.104/29
123.123.123.112/28
123.123.123.128/28
123.123.123.144/30
123.123.123.148/31
123.123.123.150/32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much better than 50 lines of config. I&amp;rsquo;d suggest putting a comment above it explaining what its actually doing in your config though.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Varnish and Nginx redirecting to port 8080</title>
      <link>https://edmondscommerce.github.io/nginx/varnish/varnish-and-nginx-redirecting-to-port-8080.html</link>
      <pubDate>Fri, 23 Jan 2015 15:22:43 +0000</pubDate>
      
      <guid>https://edmondscommerce.github.io/nginx/varnish/varnish-and-nginx-redirecting-to-port-8080.html</guid>
      <description>&lt;p&gt;So theres a strange problem where any redirects are going port 8080 when running your web application or site under varnish and nginx. Now arroung the web the solution apears to have varnish listen locally on port 80 while leaving nginx to listen on port 80 for any network addresses. The issue is that nginx when doing a redirect will add the port automatically to any redirect specified in nginx or is triggered from php, this is so that you dont have to ajust your rewrites if you are running on a non standard web port. But in the case of running varnish on top we dont want this behaviour to happen.&lt;/p&gt;

&lt;p&gt;To stop this in the location, server or http context of your nginx config. Simply add:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;port_in_redirect off&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As by default according to the &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#port_in_redirect&#34; target=&#34;_blank&#34;&gt;nginx documentation&lt;/a&gt; this behaviour is on by default.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>